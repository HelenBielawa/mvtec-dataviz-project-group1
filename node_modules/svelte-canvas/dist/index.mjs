function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}
function setContext(key, context) {
    get_current_component().$$.context.set(key, context);
}
function getContext(key) {
    return get_current_component().$$.context.get(key);
}
// TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism
function bubble(component, event) {
    const callbacks = component.$$.callbacks[event.type];
    if (callbacks) {
        callbacks.slice().forEach(fn => fn(event));
    }
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if ($$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set() {
        // overridden by instance, if it has props
    }
}

// Adapted from https://github.com/hperrin/svelte-material-ui/blob/master/packages/common/forwardEvents.js

// prettier-ignore
const events = [
    'focus', 'blur',
    'fullscreenchange', 'fullscreenerror', 'scroll',
    'cut', 'copy', 'paste',
    'keydown', 'keypress', 'keyup',
    'auxclick', 'click', 'contextmenu', 'dblclick',
    'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseover', 'mouseout', 'mouseup',
    'pointerlockchange', 'pointerlockerror', 'select', 'wheel',
    'drag', 'dragend', 'dragenter', 'dragstart', 'dragleave', 'dragover', 'drop',
    'touchcancel', 'touchend', 'touchmove', 'touchstart',
    'pointerover', 'pointerenter', 'pointerdown', 'pointermove', 'pointerup', 'pointercancel', 'pointerout', 'pointerleave', 
    'gotpointercapture', 'lostpointercapture'
  ];

function forwardEventsBuilder() {
  const component = current_component;

  return node => {
    const destructors = events.map(event =>
      listen(node, event, e => bubble(component, e))
    );

    return {
      destroy: () => destructors.forEach(destroy => destroy())
    };
  };
}

/* src/Canvas.svelte generated by Svelte v3.23.2 */

function add_css() {
	var style = element("style");
	style.id = "svelte-o3oskp-style";
	style.textContent = "canvas.svelte-o3oskp{display:block}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let canvas_1;
	let canvas_1_style_value;
	let canvas_1_width_value;
	let canvas_1_height_value;
	let forwardEvents_action;
	let t;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	return {
		c() {
			canvas_1 = element("canvas");
			t = space();
			if (default_slot) default_slot.c();
			attr(canvas_1, "style", canvas_1_style_value = "width: " + /*width*/ ctx[1] + "px; height: " + /*height*/ ctx[2] + "px;" + (/*style*/ ctx[3] ? ` ${/*style*/ ctx[3]}` : ""));
			attr(canvas_1, "width", canvas_1_width_value = /*width*/ ctx[1] * /*pixelRatio*/ ctx[0]);
			attr(canvas_1, "height", canvas_1_height_value = /*height*/ ctx[2] * /*pixelRatio*/ ctx[0]);
			attr(canvas_1, "class", "svelte-o3oskp");
		},
		m(target, anchor) {
			insert(target, canvas_1, anchor);
			/*canvas_1_binding*/ ctx[12](canvas_1);
			insert(target, t, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;

			if (!mounted) {
				dispose = action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[5].call(null, canvas_1));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*width, height, style*/ 14 && canvas_1_style_value !== (canvas_1_style_value = "width: " + /*width*/ ctx[1] + "px; height: " + /*height*/ ctx[2] + "px;" + (/*style*/ ctx[3] ? ` ${/*style*/ ctx[3]}` : ""))) {
				attr(canvas_1, "style", canvas_1_style_value);
			}

			if (!current || dirty & /*width, pixelRatio*/ 3 && canvas_1_width_value !== (canvas_1_width_value = /*width*/ ctx[1] * /*pixelRatio*/ ctx[0])) {
				attr(canvas_1, "width", canvas_1_width_value);
			}

			if (!current || dirty & /*height, pixelRatio*/ 5 && canvas_1_height_value !== (canvas_1_height_value = /*height*/ ctx[2] * /*pixelRatio*/ ctx[0])) {
				attr(canvas_1, "height", canvas_1_height_value);
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(canvas_1);
			/*canvas_1_binding*/ ctx[12](null);
			if (detaching) detach(t);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

const KEY = {};

function instance($$self, $$props, $$invalidate) {
	const forwardEvents = forwardEventsBuilder();
	let canvas, context, redrawNeeded = true, resizeNeeded = true;
	const setups = [], renderers = [];

	let { width = 640 } = $$props,
		{ height = 640 } = $$props,
		{ pixelRatio = undefined } = $$props,
		{ style = null } = $$props,
		{ autoclear = true } = $$props;

	const getCanvas = () => canvas,
		getContext = () => context,
		redraw = () => redrawNeeded = true;

	const resize = () => resizeNeeded = true;

	const draw = () => {
		if (resizeNeeded) {
			context.scale(pixelRatio, pixelRatio);
			resizeNeeded = false;
		}

		if (setups.length !== 0) {
			for (let setup of setups) {
				setup({ context, width, height });
				setups.splice(setups.indexOf(setup), 1);
			}

			redrawNeeded = true;
		}

		if (redrawNeeded) {
			if (autoclear) {
				context.clearRect(0, 0, width, height);
			}

			const length = renderers.length;

			const prioritized = renderers.map((renderer, i) => {
				const rank = renderer.priority();
				renderer.rank = rank || i - length;
				return renderer;
			}).sort((a, b) => a.rank - b.rank);

			for (let { render } of prioritized) {
				render({ context, width, height });
			}

			redrawNeeded = false;
		}

		window.requestAnimationFrame(draw);
	};

	const register = ({ setup, renderer }) => {
		if (setup) setups.push(setup);
		renderers.push(renderer);

		onDestroy(() => {
			renderers.splice(renderers.indexOf(renderer), 1);
			redraw();
		});
	};

	setContext(KEY, { register, redraw });

	if (pixelRatio === undefined) {
		if (typeof window === "undefined") {
			pixelRatio = 2;
		} else {
			pixelRatio = window.devicePixelRatio;
		}
	}

	onMount(() => {
		context = canvas.getContext("2d");
		draw();
	});

	let { $$slots = {}, $$scope } = $$props;

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			canvas = $$value;
			$$invalidate(4, canvas);
		});
	}

	$$self.$set = $$props => {
		if ("width" in $$props) $$invalidate(1, width = $$props.width);
		if ("height" in $$props) $$invalidate(2, height = $$props.height);
		if ("pixelRatio" in $$props) $$invalidate(0, pixelRatio = $$props.pixelRatio);
		if ("style" in $$props) $$invalidate(3, style = $$props.style);
		if ("autoclear" in $$props) $$invalidate(6, autoclear = $$props.autoclear);
		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*width, height, pixelRatio, autoclear*/ 71) {
			 (resize(), redraw());
		}
	};

	return [
		pixelRatio,
		width,
		height,
		style,
		canvas,
		forwardEvents,
		autoclear,
		getCanvas,
		getContext,
		redraw,
		$$scope,
		$$slots,
		canvas_1_binding
	];
}

class Canvas extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-o3oskp-style")) add_css();

		init(this, options, instance, create_fragment, safe_not_equal, {
			width: 1,
			height: 2,
			pixelRatio: 0,
			style: 3,
			autoclear: 6,
			getCanvas: 7,
			getContext: 8,
			redraw: 9
		});
	}

	get getCanvas() {
		return this.$$.ctx[7];
	}

	get getContext() {
		return this.$$.ctx[8];
	}

	get redraw() {
		return this.$$.ctx[9];
	}
}

/* src/Layer.svelte generated by Svelte v3.23.2 */

function instance$1($$self, $$props, $$invalidate) {
	const { register, redraw } = getContext(KEY);

	let { setup = undefined } = $$props,
		{ render = () => {
			
		} } = $$props,
		{ priority = undefined } = $$props;

	if (typeof setup !== "function" && setup !== undefined) {
		throw new Error("setup must be a function");
	}

	if (typeof render !== "function") {
		throw new Error("render must be a function");
	}

	if (priority && (!Number.isInteger(priority) || priority <= 0)) {
		throw new Error("priority must be a positive integer");
	}

	register({
		setup,
		renderer: { render, priority: () => priority }
	});

	$$self.$set = $$props => {
		if ("setup" in $$props) $$invalidate(0, setup = $$props.setup);
		if ("render" in $$props) $$invalidate(1, render = $$props.render);
		if ("priority" in $$props) $$invalidate(2, priority = $$props.priority);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*priority, render*/ 6) {
			 (redraw());
		}
	};

	return [setup, render, priority];
}

class Layer extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, null, safe_not_equal, { setup: 0, render: 1, priority: 2 });
	}
}

const subscriber_queue = [];
/**
 * Creates a `Readable` store that allows reading by subscription.
 * @param value initial value
 * @param {StartStopNotifier}start start and stop notifications for subscriptions
 */
function readable(value, start) {
    return {
        subscribe: writable(value, start).subscribe,
    };
}
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

let frame;

const now = Date.now();

function start(set) {
  set(Date.now() - now);

  frame = window.requestAnimationFrame(() => start(set));
  return () => window.cancelAnimationFrame(frame);
}

function noop$1() {}

var timer = readable(
  Date.now() - now,
  typeof window === 'undefined' ? noop$1 : start
);

export { Canvas, Layer, timer as t };
