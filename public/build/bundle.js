
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop() { }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    // unfortunately this can't be a constant as that wouldn't be tree-shakeable
    // so we cache the result instead
    let crossorigin;
    function is_crossorigin() {
        if (crossorigin === undefined) {
            crossorigin = false;
            try {
                if (typeof window !== 'undefined' && window.parent) {
                    void window.parent.document;
                }
            }
            catch (error) {
                crossorigin = true;
            }
        }
        return crossorigin;
    }
    function add_resize_listener(node, fn) {
        const computed_style = getComputedStyle(node);
        const z_index = (parseInt(computed_style.zIndex) || 0) - 1;
        if (computed_style.position === 'static') {
            node.style.position = 'relative';
        }
        const iframe = element('iframe');
        iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
            `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);
        iframe.setAttribute('aria-hidden', 'true');
        iframe.tabIndex = -1;
        const crossorigin = is_crossorigin();
        let unsubscribe;
        if (crossorigin) {
            iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
            unsubscribe = listen(window, 'message', (event) => {
                if (event.source === iframe.contentWindow)
                    fn();
            });
        }
        else {
            iframe.src = 'about:blank';
            iframe.onload = () => {
                unsubscribe = listen(iframe.contentWindow, 'resize', fn);
            };
        }
        append(node, iframe);
        return () => {
            if (crossorigin) {
                unsubscribe();
            }
            else if (unsubscribe && iframe.contentWindow) {
                unsubscribe();
            }
            detach(iframe);
        };
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            callbacks.slice().forEach(fn => fn(event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.31.0' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /* src\components\common\Axis.svelte generated by Svelte v3.31.0 */

    const file = "src\\components\\common\\Axis.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    // (64:34) 
    function create_if_block_4(ctx) {
    	let g;
    	let g_transform_value;

    	function select_block_type_2(ctx, dirty) {
    		if (/*tick*/ ctx[11].value === "0") return create_if_block_5;
    		return create_else_block_1;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			if_block.c();
    			attr_dev(g, "class", "tick");
    			attr_dev(g, "transform", g_transform_value = "translate(0, " + /*tick*/ ctx[11].offset + ")");
    			add_location(g, file, 64, 4, 1739);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			if_block.m(g, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(g, null);
    				}
    			}

    			if (dirty & /*ticks*/ 8 && g_transform_value !== (g_transform_value = "translate(0, " + /*tick*/ ctx[11].offset + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(64:34) ",
    		ctx
    	});

    	return block;
    }

    // (53:35) 
    function create_if_block_2(ctx) {
    	let g;
    	let g_transform_value;

    	function select_block_type_1(ctx, dirty) {
    		if (/*tick*/ ctx[11].value === "0") return create_if_block_3;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			if_block.c();
    			attr_dev(g, "class", "tick");
    			attr_dev(g, "transform", g_transform_value = "translate(0, " + /*tick*/ ctx[11].offset + ")");
    			add_location(g, file, 53, 4, 1406);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			if_block.m(g, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(g, null);
    				}
    			}

    			if (dirty & /*ticks*/ 8 && g_transform_value !== (g_transform_value = "translate(0, " + /*tick*/ ctx[11].offset + ")")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(53:35) ",
    		ctx
    	});

    	return block;
    }

    // (46:31) 
    function create_if_block_1(ctx) {
    	let g;
    	let line;
    	let text_1;
    	let t_value = /*tick*/ ctx[11].value + "";
    	let t;
    	let text_1_text_anchor_value;
    	let g_transform_value;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			line = svg_element("line");
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(line, "y2", "-6");
    			attr_dev(line, "class", "svelte-14915d6");
    			add_location(line, file, 47, 6, 1234);
    			attr_dev(text_1, "class", "label");
    			attr_dev(text_1, "y", "-10");
    			attr_dev(text_1, "text-anchor", text_1_text_anchor_value = /*anchor*/ ctx[4](/*tick*/ ctx[11].offset));
    			add_location(text_1, file, 48, 6, 1256);
    			attr_dev(g, "class", "tick");
    			attr_dev(g, "transform", g_transform_value = "translate(" + /*tick*/ ctx[11].offset + ", 0)");
    			add_location(g, file, 46, 4, 1170);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, line);
    			append_dev(g, text_1);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*ticks*/ 8 && t_value !== (t_value = /*tick*/ ctx[11].value + "")) set_data_dev(t, t_value);

    			if (dirty & /*anchor, ticks*/ 24 && text_1_text_anchor_value !== (text_1_text_anchor_value = /*anchor*/ ctx[4](/*tick*/ ctx[11].offset))) {
    				attr_dev(text_1, "text-anchor", text_1_text_anchor_value);
    			}

    			if (dirty & /*ticks*/ 8 && g_transform_value !== (g_transform_value = "translate(" + /*tick*/ ctx[11].offset + ", 0)")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(46:31) ",
    		ctx
    	});

    	return block;
    }

    // (39:4) {#if position === 'bottom'}
    function create_if_block(ctx) {
    	let g;
    	let line;
    	let text_1;
    	let t_value = /*tick*/ ctx[11].value + "";
    	let t;
    	let text_1_text_anchor_value;
    	let g_transform_value;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			line = svg_element("line");
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(line, "y2", "6");
    			attr_dev(line, "class", "svelte-14915d6");
    			add_location(line, file, 40, 6, 1004);
    			attr_dev(text_1, "class", "label");
    			attr_dev(text_1, "y", "20");
    			attr_dev(text_1, "text-anchor", text_1_text_anchor_value = /*anchor*/ ctx[4](/*tick*/ ctx[11].offset));
    			add_location(text_1, file, 41, 6, 1025);
    			attr_dev(g, "class", "tick");
    			attr_dev(g, "transform", g_transform_value = "translate(" + /*tick*/ ctx[11].offset + ", 0)");
    			add_location(g, file, 39, 4, 940);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, line);
    			append_dev(g, text_1);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*ticks*/ 8 && t_value !== (t_value = /*tick*/ ctx[11].value + "")) set_data_dev(t, t_value);

    			if (dirty & /*anchor, ticks*/ 24 && text_1_text_anchor_value !== (text_1_text_anchor_value = /*anchor*/ ctx[4](/*tick*/ ctx[11].offset))) {
    				attr_dev(text_1, "text-anchor", text_1_text_anchor_value);
    			}

    			if (dirty & /*ticks*/ 8 && g_transform_value !== (g_transform_value = "translate(" + /*tick*/ ctx[11].offset + ", 0)")) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(39:4) {#if position === 'bottom'}",
    		ctx
    	});

    	return block;
    }

    // (68:3) {:else}
    function create_else_block_1(ctx) {
    	let line;
    	let text_1;
    	let t_value = /*tick*/ ctx[11].value + "";
    	let t;

    	const block = {
    		c: function create() {
    			line = svg_element("line");
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(line, "x2", /*width*/ ctx[0]);
    			attr_dev(line, "stroke-dasharray", "2 3");
    			attr_dev(line, "class", "svelte-14915d6");
    			add_location(line, file, 68, 6, 1873);
    			attr_dev(text_1, "class", "label");
    			attr_dev(text_1, "x", "0");
    			attr_dev(text_1, "y", "-5");
    			attr_dev(text_1, "text-anchor", "start");
    			add_location(text_1, file, 69, 6, 1923);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line, anchor);
    			insert_dev(target, text_1, anchor);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*width*/ 1) {
    				attr_dev(line, "x2", /*width*/ ctx[0]);
    			}

    			if (dirty & /*ticks*/ 8 && t_value !== (t_value = /*tick*/ ctx[11].value + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line);
    			if (detaching) detach_dev(text_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(68:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (66:6) {#if tick.value === '0'}
    function create_if_block_5(ctx) {
    	let line;

    	const block = {
    		c: function create() {
    			line = svg_element("line");
    			attr_dev(line, "x2", /*width*/ ctx[0]);
    			attr_dev(line, "class", "svelte-14915d6");
    			add_location(line, file, 66, 6, 1835);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*width*/ 1) {
    				attr_dev(line, "x2", /*width*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(66:6) {#if tick.value === '0'}",
    		ctx
    	});

    	return block;
    }

    // (57:3) {:else}
    function create_else_block(ctx) {
    	let line;
    	let text_1;
    	let t_value = /*tick*/ ctx[11].value + "";
    	let t;

    	const block = {
    		c: function create() {
    			line = svg_element("line");
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(line, "x2", /*width*/ ctx[0]);
    			attr_dev(line, "stroke-dasharray", "2 3");
    			attr_dev(line, "class", "svelte-14915d6");
    			add_location(line, file, 57, 6, 1537);
    			attr_dev(text_1, "class", "label");
    			attr_dev(text_1, "x", /*width*/ ctx[0]);
    			attr_dev(text_1, "y", "-5");
    			attr_dev(text_1, "text-anchor", "end");
    			add_location(text_1, file, 58, 6, 1587);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line, anchor);
    			insert_dev(target, text_1, anchor);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*width*/ 1) {
    				attr_dev(line, "x2", /*width*/ ctx[0]);
    			}

    			if (dirty & /*ticks*/ 8 && t_value !== (t_value = /*tick*/ ctx[11].value + "")) set_data_dev(t, t_value);

    			if (dirty & /*width*/ 1) {
    				attr_dev(text_1, "x", /*width*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line);
    			if (detaching) detach_dev(text_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(57:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (55:3) {#if tick.value === '0'}
    function create_if_block_3(ctx) {
    	let line;

    	const block = {
    		c: function create() {
    			line = svg_element("line");
    			attr_dev(line, "x2", /*width*/ ctx[0]);
    			attr_dev(line, "class", "svelte-14915d6");
    			add_location(line, file, 55, 6, 1499);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, line, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*width*/ 1) {
    				attr_dev(line, "x2", /*width*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(line);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(55:3) {#if tick.value === '0'}",
    		ctx
    	});

    	return block;
    }

    // (38:2) {#each ticks as tick}
    function create_each_block(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*position*/ ctx[1] === "bottom") return create_if_block;
    		if (/*position*/ ctx[1] === "top") return create_if_block_1;
    		if (/*position*/ ctx[1] === "right") return create_if_block_2;
    		if (/*position*/ ctx[1] === "left") return create_if_block_4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) {
    				if_block.d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(38:2) {#each ticks as tick}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let g;
    	let each_value = /*ticks*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(g, "class", "axis");
    			attr_dev(g, "transform", /*transform*/ ctx[2]);
    			attr_dev(g, "pointer-events", "none");
    			add_location(g, file, 36, 0, 826);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*ticks, anchor, position, width*/ 27) {
    				each_value = /*ticks*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*transform*/ 4) {
    				attr_dev(g, "transform", /*transform*/ ctx[2]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Axis", slots, []);
    	let { width } = $$props;
    	let { height } = $$props;
    	let { margin } = $$props;
    	let { scale } = $$props;
    	let { position } = $$props;
    	let { format } = $$props;
    	let { time } = $$props;
    	const writable_props = ["width", "height", "margin", "scale", "position", "format", "time"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Axis> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("width" in $$props) $$invalidate(0, width = $$props.width);
    		if ("height" in $$props) $$invalidate(5, height = $$props.height);
    		if ("margin" in $$props) $$invalidate(6, margin = $$props.margin);
    		if ("scale" in $$props) $$invalidate(7, scale = $$props.scale);
    		if ("position" in $$props) $$invalidate(1, position = $$props.position);
    		if ("format" in $$props) $$invalidate(8, format = $$props.format);
    		if ("time" in $$props) $$invalidate(9, time = $$props.time);
    	};

    	$$self.$capture_state = () => ({
    		width,
    		height,
    		margin,
    		scale,
    		position,
    		format,
    		time,
    		nTicks,
    		transform,
    		ticks,
    		anchor
    	});

    	$$self.$inject_state = $$props => {
    		if ("width" in $$props) $$invalidate(0, width = $$props.width);
    		if ("height" in $$props) $$invalidate(5, height = $$props.height);
    		if ("margin" in $$props) $$invalidate(6, margin = $$props.margin);
    		if ("scale" in $$props) $$invalidate(7, scale = $$props.scale);
    		if ("position" in $$props) $$invalidate(1, position = $$props.position);
    		if ("format" in $$props) $$invalidate(8, format = $$props.format);
    		if ("time" in $$props) $$invalidate(9, time = $$props.time);
    		if ("nTicks" in $$props) $$invalidate(10, nTicks = $$props.nTicks);
    		if ("transform" in $$props) $$invalidate(2, transform = $$props.transform);
    		if ("ticks" in $$props) $$invalidate(3, ticks = $$props.ticks);
    		if ("anchor" in $$props) $$invalidate(4, anchor = $$props.anchor);
    	};

    	let nTicks;
    	let transform;
    	let ticks;
    	let anchor;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*position, width, height*/ 35) {
    			 $$invalidate(10, nTicks = position === "bottom" || position === "top"
    			? width / 50
    			: height / 50);
    		}

    		if ($$self.$$.dirty & /*position, height, margin*/ 98) {
    			 $$invalidate(2, transform = position === "bottom"
    			? `translate(0, ${height - margin.bottom - margin.top})`
    			: position === "top"
    				? `translate(0, ${margin.top})`
    				: position === "left"
    					? `translate(${margin.left}, 0)`
    					: `translate(0, ${margin.right})`);
    		}

    		if ($$self.$$.dirty & /*scale, time, nTicks, format*/ 1920) {
    			 $$invalidate(3, ticks = scale.ticks(!time ? nTicks : time).map(d => ({ value: format(d), offset: scale(d) })));
    		}

    		if ($$self.$$.dirty & /*width*/ 1) {
    			 $$invalidate(4, anchor = x => {
    				switch (true) {
    					case x < 20:
    						return "start";
    					case x > width - 40:
    						return "end";
    					default:
    						return "middle";
    				}
    			});
    		}
    	};

    	return [
    		width,
    		position,
    		transform,
    		ticks,
    		anchor,
    		height,
    		margin,
    		scale,
    		format,
    		time,
    		nTicks
    	];
    }

    class Axis extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance, create_fragment, safe_not_equal, {
    			width: 0,
    			height: 5,
    			margin: 6,
    			scale: 7,
    			position: 1,
    			format: 8,
    			time: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Axis",
    			options,
    			id: create_fragment.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*width*/ ctx[0] === undefined && !("width" in props)) {
    			console.warn("<Axis> was created without expected prop 'width'");
    		}

    		if (/*height*/ ctx[5] === undefined && !("height" in props)) {
    			console.warn("<Axis> was created without expected prop 'height'");
    		}

    		if (/*margin*/ ctx[6] === undefined && !("margin" in props)) {
    			console.warn("<Axis> was created without expected prop 'margin'");
    		}

    		if (/*scale*/ ctx[7] === undefined && !("scale" in props)) {
    			console.warn("<Axis> was created without expected prop 'scale'");
    		}

    		if (/*position*/ ctx[1] === undefined && !("position" in props)) {
    			console.warn("<Axis> was created without expected prop 'position'");
    		}

    		if (/*format*/ ctx[8] === undefined && !("format" in props)) {
    			console.warn("<Axis> was created without expected prop 'format'");
    		}

    		if (/*time*/ ctx[9] === undefined && !("time" in props)) {
    			console.warn("<Axis> was created without expected prop 'time'");
    		}
    	}

    	get width() {
    		throw new Error("<Axis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Axis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<Axis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<Axis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get margin() {
    		throw new Error("<Axis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set margin(value) {
    		throw new Error("<Axis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scale() {
    		throw new Error("<Axis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scale(value) {
    		throw new Error("<Axis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get position() {
    		throw new Error("<Axis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set position(value) {
    		throw new Error("<Axis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get format() {
    		throw new Error("<Axis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set format(value) {
    		throw new Error("<Axis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get time() {
    		throw new Error("<Axis>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set time(value) {
    		throw new Error("<Axis>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\common\PointInteractive.svelte generated by Svelte v3.31.0 */

    const file$1 = "src\\components\\common\\PointInteractive.svelte";

    // (24:0) {#if datum !== undefined}
    function create_if_block$1(ctx) {
    	let g;
    	let line;
    	let line_x__value;
    	let line_y__value;
    	let line_x__value_1;
    	let line_y__value_1;
    	let circle;
    	let circle_cx_value;
    	let circle_cy_value;
    	let text0;
    	let t0_value = /*format*/ ctx[5].y(/*datum*/ ctx[0][/*key*/ ctx[1].y]) + "";
    	let t0;
    	let text0_x_value;
    	let text0_y_value;
    	let text0_text_anchor_value;
    	let text1;
    	let t1_value = /*format*/ ctx[5].x(/*datum*/ ctx[0][/*key*/ ctx[1].x]) + "";
    	let t1;
    	let text1_x_value;
    	let text1_y_value;
    	let text1_text_anchor_value;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			line = svg_element("line");
    			circle = svg_element("circle");
    			text0 = svg_element("text");
    			t0 = text(t0_value);
    			text1 = svg_element("text");
    			t1 = text(t1_value);
    			attr_dev(line, "x1", line_x__value = /*x*/ ctx[2](/*datum*/ ctx[0][/*key*/ ctx[1].x]));
    			attr_dev(line, "y1", line_y__value = /*y*/ ctx[3](0));
    			attr_dev(line, "x2", line_x__value_1 = /*x*/ ctx[2](/*datum*/ ctx[0][/*key*/ ctx[1].x]));
    			attr_dev(line, "y2", line_y__value_1 = /*y*/ ctx[3](/*datum*/ ctx[0][/*key*/ ctx[1].y]));
    			attr_dev(line, "pointer-events", "none");
    			attr_dev(line, "stroke", "rgba(0,0,0,.5)");
    			attr_dev(line, "stroke-width", ".3");
    			attr_dev(line, "class", "tooltip");
    			add_location(line, file$1, 25, 4, 413);
    			attr_dev(circle, "r", /*r*/ ctx[6]);
    			attr_dev(circle, "cx", circle_cx_value = /*x*/ ctx[2](/*datum*/ ctx[0][/*key*/ ctx[1].x]));
    			attr_dev(circle, "cy", circle_cy_value = /*y*/ ctx[3](/*datum*/ ctx[0][/*key*/ ctx[1].y]));
    			attr_dev(circle, "stroke", "rgba(0,0,0,1)");
    			attr_dev(circle, "pointer-events", "none");
    			attr_dev(circle, "stroke-width", "2");
    			attr_dev(circle, "fill", /*color*/ ctx[4]);
    			attr_dev(circle, "class", "tooltip");
    			add_location(circle, file$1, 35, 4, 655);
    			attr_dev(text0, "x", text0_x_value = /*x*/ ctx[2](/*datum*/ ctx[0][/*key*/ ctx[1].x]));
    			attr_dev(text0, "y", text0_y_value = /*y*/ ctx[3](/*datum*/ ctx[0][/*key*/ ctx[1].y]) - 8);
    			attr_dev(text0, "pointer-events", "none");
    			attr_dev(text0, "text-anchor", text0_text_anchor_value = /*anchor*/ ctx[7](/*x*/ ctx[2](/*datum*/ ctx[0][/*key*/ ctx[1].x])));
    			attr_dev(text0, "class", "tooltip value svelte-1x25tuj");
    			add_location(text0, file$1, 45, 4, 885);
    			attr_dev(text1, "x", text1_x_value = /*x*/ ctx[2](/*datum*/ ctx[0][/*key*/ ctx[1].x]));
    			attr_dev(text1, "y", text1_y_value = /*y*/ ctx[3](0) + 20);
    			attr_dev(text1, "pointer-events", "none");
    			attr_dev(text1, "text-anchor", text1_text_anchor_value = /*anchor*/ ctx[7](/*x*/ ctx[2](/*datum*/ ctx[0][/*key*/ ctx[1].x])));
    			attr_dev(text1, "class", "tooltip label svelte-1x25tuj");
    			add_location(text1, file$1, 54, 4, 1121);
    			add_location(g, file$1, 24, 0, 404);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, line);
    			append_dev(g, circle);
    			append_dev(g, text0);
    			append_dev(text0, t0);
    			append_dev(g, text1);
    			append_dev(text1, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*x, datum, key*/ 7 && line_x__value !== (line_x__value = /*x*/ ctx[2](/*datum*/ ctx[0][/*key*/ ctx[1].x]))) {
    				attr_dev(line, "x1", line_x__value);
    			}

    			if (dirty & /*y*/ 8 && line_y__value !== (line_y__value = /*y*/ ctx[3](0))) {
    				attr_dev(line, "y1", line_y__value);
    			}

    			if (dirty & /*x, datum, key*/ 7 && line_x__value_1 !== (line_x__value_1 = /*x*/ ctx[2](/*datum*/ ctx[0][/*key*/ ctx[1].x]))) {
    				attr_dev(line, "x2", line_x__value_1);
    			}

    			if (dirty & /*y, datum, key*/ 11 && line_y__value_1 !== (line_y__value_1 = /*y*/ ctx[3](/*datum*/ ctx[0][/*key*/ ctx[1].y]))) {
    				attr_dev(line, "y2", line_y__value_1);
    			}

    			if (dirty & /*r*/ 64) {
    				attr_dev(circle, "r", /*r*/ ctx[6]);
    			}

    			if (dirty & /*x, datum, key*/ 7 && circle_cx_value !== (circle_cx_value = /*x*/ ctx[2](/*datum*/ ctx[0][/*key*/ ctx[1].x]))) {
    				attr_dev(circle, "cx", circle_cx_value);
    			}

    			if (dirty & /*y, datum, key*/ 11 && circle_cy_value !== (circle_cy_value = /*y*/ ctx[3](/*datum*/ ctx[0][/*key*/ ctx[1].y]))) {
    				attr_dev(circle, "cy", circle_cy_value);
    			}

    			if (dirty & /*color*/ 16) {
    				attr_dev(circle, "fill", /*color*/ ctx[4]);
    			}

    			if (dirty & /*format, datum, key*/ 35 && t0_value !== (t0_value = /*format*/ ctx[5].y(/*datum*/ ctx[0][/*key*/ ctx[1].y]) + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*x, datum, key*/ 7 && text0_x_value !== (text0_x_value = /*x*/ ctx[2](/*datum*/ ctx[0][/*key*/ ctx[1].x]))) {
    				attr_dev(text0, "x", text0_x_value);
    			}

    			if (dirty & /*y, datum, key*/ 11 && text0_y_value !== (text0_y_value = /*y*/ ctx[3](/*datum*/ ctx[0][/*key*/ ctx[1].y]) - 8)) {
    				attr_dev(text0, "y", text0_y_value);
    			}

    			if (dirty & /*anchor, x, datum, key*/ 135 && text0_text_anchor_value !== (text0_text_anchor_value = /*anchor*/ ctx[7](/*x*/ ctx[2](/*datum*/ ctx[0][/*key*/ ctx[1].x])))) {
    				attr_dev(text0, "text-anchor", text0_text_anchor_value);
    			}

    			if (dirty & /*format, datum, key*/ 35 && t1_value !== (t1_value = /*format*/ ctx[5].x(/*datum*/ ctx[0][/*key*/ ctx[1].x]) + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*x, datum, key*/ 7 && text1_x_value !== (text1_x_value = /*x*/ ctx[2](/*datum*/ ctx[0][/*key*/ ctx[1].x]))) {
    				attr_dev(text1, "x", text1_x_value);
    			}

    			if (dirty & /*y*/ 8 && text1_y_value !== (text1_y_value = /*y*/ ctx[3](0) + 20)) {
    				attr_dev(text1, "y", text1_y_value);
    			}

    			if (dirty & /*anchor, x, datum, key*/ 135 && text1_text_anchor_value !== (text1_text_anchor_value = /*anchor*/ ctx[7](/*x*/ ctx[2](/*datum*/ ctx[0][/*key*/ ctx[1].x])))) {
    				attr_dev(text1, "text-anchor", text1_text_anchor_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(24:0) {#if datum !== undefined}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let if_block_anchor;
    	let if_block = /*datum*/ ctx[0] !== undefined && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*datum*/ ctx[0] !== undefined) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("PointInteractive", slots, []);
    	let { width } = $$props;
    	let { datum } = $$props;
    	let { key } = $$props;
    	let { x } = $$props;
    	let { y } = $$props;
    	let { color } = $$props;
    	let { format } = $$props;
    	let { r = 3 } = $$props;
    	const writable_props = ["width", "datum", "key", "x", "y", "color", "format", "r"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PointInteractive> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("width" in $$props) $$invalidate(8, width = $$props.width);
    		if ("datum" in $$props) $$invalidate(0, datum = $$props.datum);
    		if ("key" in $$props) $$invalidate(1, key = $$props.key);
    		if ("x" in $$props) $$invalidate(2, x = $$props.x);
    		if ("y" in $$props) $$invalidate(3, y = $$props.y);
    		if ("color" in $$props) $$invalidate(4, color = $$props.color);
    		if ("format" in $$props) $$invalidate(5, format = $$props.format);
    		if ("r" in $$props) $$invalidate(6, r = $$props.r);
    	};

    	$$self.$capture_state = () => ({
    		width,
    		datum,
    		key,
    		x,
    		y,
    		color,
    		format,
    		r,
    		anchor
    	});

    	$$self.$inject_state = $$props => {
    		if ("width" in $$props) $$invalidate(8, width = $$props.width);
    		if ("datum" in $$props) $$invalidate(0, datum = $$props.datum);
    		if ("key" in $$props) $$invalidate(1, key = $$props.key);
    		if ("x" in $$props) $$invalidate(2, x = $$props.x);
    		if ("y" in $$props) $$invalidate(3, y = $$props.y);
    		if ("color" in $$props) $$invalidate(4, color = $$props.color);
    		if ("format" in $$props) $$invalidate(5, format = $$props.format);
    		if ("r" in $$props) $$invalidate(6, r = $$props.r);
    		if ("anchor" in $$props) $$invalidate(7, anchor = $$props.anchor);
    	};

    	let anchor;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*width*/ 256) {
    			 $$invalidate(7, anchor = x => {
    				switch (true) {
    					case x < 20:
    						return "start";
    					case x > width - 40:
    						return "end";
    					default:
    						return "middle";
    				}
    			});
    		}
    	};

    	return [datum, key, x, y, color, format, r, anchor, width];
    }

    class PointInteractive extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
    			width: 8,
    			datum: 0,
    			key: 1,
    			x: 2,
    			y: 3,
    			color: 4,
    			format: 5,
    			r: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PointInteractive",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*width*/ ctx[8] === undefined && !("width" in props)) {
    			console.warn("<PointInteractive> was created without expected prop 'width'");
    		}

    		if (/*datum*/ ctx[0] === undefined && !("datum" in props)) {
    			console.warn("<PointInteractive> was created without expected prop 'datum'");
    		}

    		if (/*key*/ ctx[1] === undefined && !("key" in props)) {
    			console.warn("<PointInteractive> was created without expected prop 'key'");
    		}

    		if (/*x*/ ctx[2] === undefined && !("x" in props)) {
    			console.warn("<PointInteractive> was created without expected prop 'x'");
    		}

    		if (/*y*/ ctx[3] === undefined && !("y" in props)) {
    			console.warn("<PointInteractive> was created without expected prop 'y'");
    		}

    		if (/*color*/ ctx[4] === undefined && !("color" in props)) {
    			console.warn("<PointInteractive> was created without expected prop 'color'");
    		}

    		if (/*format*/ ctx[5] === undefined && !("format" in props)) {
    			console.warn("<PointInteractive> was created without expected prop 'format'");
    		}
    	}

    	get width() {
    		throw new Error("<PointInteractive>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<PointInteractive>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get datum() {
    		throw new Error("<PointInteractive>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set datum(value) {
    		throw new Error("<PointInteractive>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get key() {
    		throw new Error("<PointInteractive>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<PointInteractive>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x() {
    		throw new Error("<PointInteractive>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<PointInteractive>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<PointInteractive>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<PointInteractive>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<PointInteractive>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<PointInteractive>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get format() {
    		throw new Error("<PointInteractive>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set format(value) {
    		throw new Error("<PointInteractive>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get r() {
    		throw new Error("<PointInteractive>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set r(value) {
    		throw new Error("<PointInteractive>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const pi = Math.PI,
        tau = 2 * pi,
        epsilon = 1e-6,
        tauEpsilon = tau - epsilon;

    function Path() {
      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null; // end of current subpath
      this._ = "";
    }

    function path() {
      return new Path;
    }

    Path.prototype = path.prototype = {
      constructor: Path,
      moveTo: function(x, y) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
      },
      closePath: function() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      },
      lineTo: function(x, y) {
        this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      quadraticCurveTo: function(x1, y1, x, y) {
        this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      arcTo: function(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        var x0 = this._x1,
            y0 = this._y1,
            x21 = x2 - x1,
            y21 = y2 - y1,
            x01 = x0 - x1,
            y01 = y0 - y1,
            l01_2 = x01 * x01 + y01 * y01;

        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);

        // Is this path empty? Move to (x1,y1).
        if (this._x1 === null) {
          this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
        else if (!(l01_2 > epsilon));

        // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
        // Equivalently, is (x1,y1) coincident with (x2,y2)?
        // Or, is the radius zero? Line to (x1,y1).
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Otherwise, draw an arc!
        else {
          var x20 = x2 - x0,
              y20 = y2 - y0,
              l21_2 = x21 * x21 + y21 * y21,
              l20_2 = x20 * x20 + y20 * y20,
              l21 = Math.sqrt(l21_2),
              l01 = Math.sqrt(l01_2),
              l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
              t01 = l / l01,
              t21 = l / l21;

          // If the start tangent is not coincident with (x0,y0), line to.
          if (Math.abs(t01 - 1) > epsilon) {
            this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
          }

          this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
        }
      },
      arc: function(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r, ccw = !!ccw;
        var dx = r * Math.cos(a0),
            dy = r * Math.sin(a0),
            x0 = x + dx,
            y0 = y + dy,
            cw = 1 ^ ccw,
            da = ccw ? a0 - a1 : a1 - a0;

        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);

        // Is this path empty? Move to (x0,y0).
        if (this._x1 === null) {
          this._ += "M" + x0 + "," + y0;
        }

        // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
        else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
          this._ += "L" + x0 + "," + y0;
        }

        // Is this arc empty? We’re done.
        if (!r) return;

        // Does the angle go the wrong way? Flip the direction.
        if (da < 0) da = da % tau + tau;

        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > tauEpsilon) {
          this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
        }

        // Is this arc non-empty? Draw an arc!
        else if (da > epsilon) {
          this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
        }
      },
      rect: function(x, y, w, h) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
      },
      toString: function() {
        return this._;
      }
    };

    function constant(x) {
      return function constant() {
        return x;
      };
    }

    function array(x) {
      return typeof x === "object" && "length" in x
        ? x // Array, TypedArray, NodeList, array-like
        : Array.from(x); // Map, Set, iterable, string, or anything else
    }

    function Linear(context) {
      this._context = context;
    }

    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // proceed
          default: this._context.lineTo(x, y); break;
        }
      }
    };

    function curveLinear(context) {
      return new Linear(context);
    }

    function x(p) {
      return p[0];
    }

    function y(p) {
      return p[1];
    }

    function line(x$1, y$1) {
      var defined = constant(true),
          context = null,
          curve = curveLinear,
          output = null;

      x$1 = typeof x$1 === "function" ? x$1 : (x$1 === undefined) ? x : constant(x$1);
      y$1 = typeof y$1 === "function" ? y$1 : (y$1 === undefined) ? y : constant(y$1);

      function line(data) {
        var i,
            n = (data = array(data)).length,
            d,
            defined0 = false,
            buffer;

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) output.lineStart();
            else output.lineEnd();
          }
          if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      line.x = function(_) {
        return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), line) : x$1;
      };

      line.y = function(_) {
        return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), line) : y$1;
      };

      line.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
      };

      line.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
      };

      line.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
      };

      return line;
    }

    function area(x0, y0, y1) {
      var x1 = null,
          defined = constant(true),
          context = null,
          curve = curveLinear,
          output = null;

      x0 = typeof x0 === "function" ? x0 : (x0 === undefined) ? x : constant(+x0);
      y0 = typeof y0 === "function" ? y0 : (y0 === undefined) ? constant(0) : constant(+y0);
      y1 = typeof y1 === "function" ? y1 : (y1 === undefined) ? y : constant(+y1);

      function area(data) {
        var i,
            j,
            k,
            n = (data = array(data)).length,
            d,
            defined0 = false,
            buffer,
            x0z = new Array(n),
            y0z = new Array(n);

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) {
              j = i;
              output.areaStart();
              output.lineStart();
            } else {
              output.lineEnd();
              output.lineStart();
              for (k = i - 1; k >= j; --k) {
                output.point(x0z[k], y0z[k]);
              }
              output.lineEnd();
              output.areaEnd();
            }
          }
          if (defined0) {
            x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
            output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
          }
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      function arealine() {
        return line().defined(defined).curve(curve).context(context);
      }

      area.x = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
      };

      area.x0 = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
      };

      area.x1 = function(_) {
        return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
      };

      area.y = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
      };

      area.y0 = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
      };

      area.y1 = function(_) {
        return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
      };

      area.lineX0 =
      area.lineY0 = function() {
        return arealine().x(x0).y(y0);
      };

      area.lineY1 = function() {
        return arealine().x(x0).y(y1);
      };

      area.lineX1 = function() {
        return arealine().x(x1).y(y0);
      };

      area.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
      };

      area.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
      };

      area.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
      };

      return area;
    }

    function point(that, x, y) {
      that._context.bezierCurveTo(
        (2 * that._x0 + that._x1) / 3,
        (2 * that._y0 + that._y1) / 3,
        (that._x0 + 2 * that._x1) / 3,
        (that._y0 + 2 * that._y1) / 3,
        (that._x0 + 4 * that._x1 + x) / 6,
        (that._y0 + 4 * that._y1 + y) / 6
      );
    }

    function Basis(context) {
      this._context = context;
    }

    Basis.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 =
        this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 3: point(this, this._x1, this._y1); // proceed
          case 2: this._context.lineTo(this._x1, this._y1); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
          default: point(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
      }
    };

    function curveBasis(context) {
      return new Basis(context);
    }

    function Step(context, t) {
      this._context = context;
      this._t = t;
    }

    Step.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // proceed
          default: {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y);
              this._context.lineTo(x, y);
            } else {
              var x1 = this._x * (1 - this._t) + x * this._t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y);
            }
            break;
          }
        }
        this._x = x, this._y = y;
      }
    };

    function curveStep(context) {
      return new Step(context, 0.5);
    }

    function none(series, order) {
      if (!((n = series.length) > 1)) return;
      for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
        s0 = s1, s1 = series[order[i]];
        for (j = 0; j < m; ++j) {
          s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
        }
      }
    }

    function none$1(series) {
      var n = series.length, o = new Array(n);
      while (--n >= 0) o[n] = n;
      return o;
    }

    function stackValue(d, key) {
      return d[key];
    }

    function stackSeries(key) {
      const series = [];
      series.key = key;
      return series;
    }

    function stack() {
      var keys = constant([]),
          order = none$1,
          offset = none,
          value = stackValue;

      function stack(data) {
        var sz = Array.from(keys.apply(this, arguments), stackSeries),
            i, n = sz.length, j = -1,
            oz;

        for (const d of data) {
          for (i = 0, ++j; i < n; ++i) {
            (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
          }
        }

        for (i = 0, oz = array(order(sz)); i < n; ++i) {
          sz[oz[i]].index = i;
        }

        offset(sz, oz);
        return sz;
      }

      stack.keys = function(_) {
        return arguments.length ? (keys = typeof _ === "function" ? _ : constant(Array.from(_)), stack) : keys;
      };

      stack.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack) : value;
      };

      stack.order = function(_) {
        return arguments.length ? (order = _ == null ? none$1 : typeof _ === "function" ? _ : constant(Array.from(_)), stack) : order;
      };

      stack.offset = function(_) {
        return arguments.length ? (offset = _ == null ? none : _, stack) : offset;
      };

      return stack;
    }

    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function bisector(f) {
      let delta = f;
      let compare = f;

      if (f.length === 1) {
        delta = (d, x) => f(d) - x;
        compare = ascendingComparator(f);
      }

      function left(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          const mid = (lo + hi) >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1;
          else hi = mid;
        }
        return lo;
      }

      function right(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          const mid = (lo + hi) >>> 1;
          if (compare(a[mid], x) > 0) hi = mid;
          else lo = mid + 1;
        }
        return lo;
      }

      function center(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
      }

      return {left, center, right};
    }

    function ascendingComparator(f) {
      return (d, x) => ascending(f(d), x);
    }

    function number(x) {
      return x === null ? NaN : +x;
    }

    const ascendingBisect = bisector(ascending);
    const bisectRight = ascendingBisect.right;
    const bisectCenter = bisector(number).center;

    function extent(values, valueof) {
      let min;
      let max;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      }
      return [min, max];
    }

    var e10 = Math.sqrt(50),
        e5 = Math.sqrt(10),
        e2 = Math.sqrt(2);

    function ticks(start, stop, count) {
      var reverse,
          i = -1,
          n,
          ticks,
          step;

      stop = +stop, start = +start, count = +count;
      if (start === stop && count > 0) return [start];
      if (reverse = stop < start) n = start, start = stop, stop = n;
      if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

      if (step > 0) {
        start = Math.ceil(start / step);
        stop = Math.floor(stop / step);
        ticks = new Array(n = Math.ceil(stop - start + 1));
        while (++i < n) ticks[i] = (start + i) * step;
      } else {
        step = -step;
        start = Math.ceil(start * step);
        stop = Math.floor(stop * step);
        ticks = new Array(n = Math.ceil(stop - start + 1));
        while (++i < n) ticks[i] = (start + i) / step;
      }

      if (reverse) ticks.reverse();

      return ticks;
    }

    function tickIncrement(start, stop, count) {
      var step = (stop - start) / Math.max(0, count),
          power = Math.floor(Math.log(step) / Math.LN10),
          error = step / Math.pow(10, power);
      return power >= 0
          ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
          : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
    }

    function tickStep(start, stop, count) {
      var step0 = Math.abs(stop - start) / Math.max(0, count),
          step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
          error = step0 / step1;
      if (error >= e10) step1 *= 10;
      else if (error >= e5) step1 *= 5;
      else if (error >= e2) step1 *= 2;
      return stop < start ? -step1 : step1;
    }

    function max(values, valueof) {
      let max;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null
              && (max < value || (max === undefined && value >= value))) {
            max = value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (max < value || (max === undefined && value >= value))) {
            max = value;
          }
        }
      }
      return max;
    }

    function initRange(domain, range) {
      switch (arguments.length) {
        case 0: break;
        case 1: this.range(domain); break;
        default: this.range(range).domain(domain); break;
      }
      return this;
    }

    function define(constructor, factory, prototype) {
      constructor.prototype = factory.prototype = prototype;
      prototype.constructor = constructor;
    }

    function extend(parent, definition) {
      var prototype = Object.create(parent.prototype);
      for (var key in definition) prototype[key] = definition[key];
      return prototype;
    }

    function Color() {}

    var darker = 0.7;
    var brighter = 1 / darker;

    var reI = "\\s*([+-]?\\d+)\\s*",
        reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
        reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
        reHex = /^#([0-9a-f]{3,8})$/,
        reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
        reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
        reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
        reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
        reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
        reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

    var named = {
      aliceblue: 0xf0f8ff,
      antiquewhite: 0xfaebd7,
      aqua: 0x00ffff,
      aquamarine: 0x7fffd4,
      azure: 0xf0ffff,
      beige: 0xf5f5dc,
      bisque: 0xffe4c4,
      black: 0x000000,
      blanchedalmond: 0xffebcd,
      blue: 0x0000ff,
      blueviolet: 0x8a2be2,
      brown: 0xa52a2a,
      burlywood: 0xdeb887,
      cadetblue: 0x5f9ea0,
      chartreuse: 0x7fff00,
      chocolate: 0xd2691e,
      coral: 0xff7f50,
      cornflowerblue: 0x6495ed,
      cornsilk: 0xfff8dc,
      crimson: 0xdc143c,
      cyan: 0x00ffff,
      darkblue: 0x00008b,
      darkcyan: 0x008b8b,
      darkgoldenrod: 0xb8860b,
      darkgray: 0xa9a9a9,
      darkgreen: 0x006400,
      darkgrey: 0xa9a9a9,
      darkkhaki: 0xbdb76b,
      darkmagenta: 0x8b008b,
      darkolivegreen: 0x556b2f,
      darkorange: 0xff8c00,
      darkorchid: 0x9932cc,
      darkred: 0x8b0000,
      darksalmon: 0xe9967a,
      darkseagreen: 0x8fbc8f,
      darkslateblue: 0x483d8b,
      darkslategray: 0x2f4f4f,
      darkslategrey: 0x2f4f4f,
      darkturquoise: 0x00ced1,
      darkviolet: 0x9400d3,
      deeppink: 0xff1493,
      deepskyblue: 0x00bfff,
      dimgray: 0x696969,
      dimgrey: 0x696969,
      dodgerblue: 0x1e90ff,
      firebrick: 0xb22222,
      floralwhite: 0xfffaf0,
      forestgreen: 0x228b22,
      fuchsia: 0xff00ff,
      gainsboro: 0xdcdcdc,
      ghostwhite: 0xf8f8ff,
      gold: 0xffd700,
      goldenrod: 0xdaa520,
      gray: 0x808080,
      green: 0x008000,
      greenyellow: 0xadff2f,
      grey: 0x808080,
      honeydew: 0xf0fff0,
      hotpink: 0xff69b4,
      indianred: 0xcd5c5c,
      indigo: 0x4b0082,
      ivory: 0xfffff0,
      khaki: 0xf0e68c,
      lavender: 0xe6e6fa,
      lavenderblush: 0xfff0f5,
      lawngreen: 0x7cfc00,
      lemonchiffon: 0xfffacd,
      lightblue: 0xadd8e6,
      lightcoral: 0xf08080,
      lightcyan: 0xe0ffff,
      lightgoldenrodyellow: 0xfafad2,
      lightgray: 0xd3d3d3,
      lightgreen: 0x90ee90,
      lightgrey: 0xd3d3d3,
      lightpink: 0xffb6c1,
      lightsalmon: 0xffa07a,
      lightseagreen: 0x20b2aa,
      lightskyblue: 0x87cefa,
      lightslategray: 0x778899,
      lightslategrey: 0x778899,
      lightsteelblue: 0xb0c4de,
      lightyellow: 0xffffe0,
      lime: 0x00ff00,
      limegreen: 0x32cd32,
      linen: 0xfaf0e6,
      magenta: 0xff00ff,
      maroon: 0x800000,
      mediumaquamarine: 0x66cdaa,
      mediumblue: 0x0000cd,
      mediumorchid: 0xba55d3,
      mediumpurple: 0x9370db,
      mediumseagreen: 0x3cb371,
      mediumslateblue: 0x7b68ee,
      mediumspringgreen: 0x00fa9a,
      mediumturquoise: 0x48d1cc,
      mediumvioletred: 0xc71585,
      midnightblue: 0x191970,
      mintcream: 0xf5fffa,
      mistyrose: 0xffe4e1,
      moccasin: 0xffe4b5,
      navajowhite: 0xffdead,
      navy: 0x000080,
      oldlace: 0xfdf5e6,
      olive: 0x808000,
      olivedrab: 0x6b8e23,
      orange: 0xffa500,
      orangered: 0xff4500,
      orchid: 0xda70d6,
      palegoldenrod: 0xeee8aa,
      palegreen: 0x98fb98,
      paleturquoise: 0xafeeee,
      palevioletred: 0xdb7093,
      papayawhip: 0xffefd5,
      peachpuff: 0xffdab9,
      peru: 0xcd853f,
      pink: 0xffc0cb,
      plum: 0xdda0dd,
      powderblue: 0xb0e0e6,
      purple: 0x800080,
      rebeccapurple: 0x663399,
      red: 0xff0000,
      rosybrown: 0xbc8f8f,
      royalblue: 0x4169e1,
      saddlebrown: 0x8b4513,
      salmon: 0xfa8072,
      sandybrown: 0xf4a460,
      seagreen: 0x2e8b57,
      seashell: 0xfff5ee,
      sienna: 0xa0522d,
      silver: 0xc0c0c0,
      skyblue: 0x87ceeb,
      slateblue: 0x6a5acd,
      slategray: 0x708090,
      slategrey: 0x708090,
      snow: 0xfffafa,
      springgreen: 0x00ff7f,
      steelblue: 0x4682b4,
      tan: 0xd2b48c,
      teal: 0x008080,
      thistle: 0xd8bfd8,
      tomato: 0xff6347,
      turquoise: 0x40e0d0,
      violet: 0xee82ee,
      wheat: 0xf5deb3,
      white: 0xffffff,
      whitesmoke: 0xf5f5f5,
      yellow: 0xffff00,
      yellowgreen: 0x9acd32
    };

    define(Color, color, {
      copy: function(channels) {
        return Object.assign(new this.constructor, this, channels);
      },
      displayable: function() {
        return this.rgb().displayable();
      },
      hex: color_formatHex, // Deprecated! Use color.formatHex.
      formatHex: color_formatHex,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });

    function color_formatHex() {
      return this.rgb().formatHex();
    }

    function color_formatHsl() {
      return hslConvert(this).formatHsl();
    }

    function color_formatRgb() {
      return this.rgb().formatRgb();
    }

    function color(format) {
      var m, l;
      format = (format + "").trim().toLowerCase();
      return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
          : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
          : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
          : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
          : null) // invalid hex
          : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
          : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
          : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
          : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
          : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
          : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
          : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
          : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
          : null;
    }

    function rgbn(n) {
      return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
    }

    function rgba(r, g, b, a) {
      if (a <= 0) r = g = b = NaN;
      return new Rgb(r, g, b, a);
    }

    function rgbConvert(o) {
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Rgb;
      o = o.rgb();
      return new Rgb(o.r, o.g, o.b, o.opacity);
    }

    function rgb(r, g, b, opacity) {
      return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
    }

    function Rgb(r, g, b, opacity) {
      this.r = +r;
      this.g = +g;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Rgb, rgb, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      rgb: function() {
        return this;
      },
      displayable: function() {
        return (-0.5 <= this.r && this.r < 255.5)
            && (-0.5 <= this.g && this.g < 255.5)
            && (-0.5 <= this.b && this.b < 255.5)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex, // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));

    function rgb_formatHex() {
      return "#" + hex(this.r) + hex(this.g) + hex(this.b);
    }

    function rgb_formatRgb() {
      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "rgb(" : "rgba(")
          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.b) || 0))
          + (a === 1 ? ")" : ", " + a + ")");
    }

    function hex(value) {
      value = Math.max(0, Math.min(255, Math.round(value) || 0));
      return (value < 16 ? "0" : "") + value.toString(16);
    }

    function hsla(h, s, l, a) {
      if (a <= 0) h = s = l = NaN;
      else if (l <= 0 || l >= 1) h = s = NaN;
      else if (s <= 0) h = NaN;
      return new Hsl(h, s, l, a);
    }

    function hslConvert(o) {
      if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Hsl;
      if (o instanceof Hsl) return o;
      o = o.rgb();
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          h = NaN,
          s = max - min,
          l = (max + min) / 2;
      if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
      } else {
        s = l > 0 && l < 1 ? 0 : h;
      }
      return new Hsl(h, s, l, o.opacity);
    }

    function hsl(h, s, l, opacity) {
      return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
    }

    function Hsl(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Hsl, hsl, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = this.h % 360 + (this.h < 0) * 360,
            s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
            l = this.l,
            m2 = l + (l < 0.5 ? l : 1 - l) * s,
            m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s))
            && (0 <= this.l && this.l <= 1)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl: function() {
        var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? "hsl(" : "hsla(")
            + (this.h || 0) + ", "
            + (this.s || 0) * 100 + "%, "
            + (this.l || 0) * 100 + "%"
            + (a === 1 ? ")" : ", " + a + ")");
      }
    }));

    /* From FvD 13.37, CSS Color Module Level 3 */
    function hsl2rgb(h, m1, m2) {
      return (h < 60 ? m1 + (m2 - m1) * h / 60
          : h < 180 ? m2
          : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
          : m1) * 255;
    }

    var constant$1 = x => () => x;

    function linear(a, d) {
      return function(t) {
        return a + t * d;
      };
    }

    function exponential(a, b, y) {
      return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
      };
    }

    function gamma(y) {
      return (y = +y) === 1 ? nogamma : function(a, b) {
        return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a);
      };
    }

    function nogamma(a, b) {
      var d = b - a;
      return d ? linear(a, d) : constant$1(isNaN(a) ? b : a);
    }

    var rgb$1 = (function rgbGamma(y) {
      var color = gamma(y);

      function rgb$1(start, end) {
        var r = color((start = rgb(start)).r, (end = rgb(end)).r),
            g = color(start.g, end.g),
            b = color(start.b, end.b),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.r = r(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }

      rgb$1.gamma = rgbGamma;

      return rgb$1;
    })(1);

    function numberArray(a, b) {
      if (!b) b = [];
      var n = a ? Math.min(b.length, a.length) : 0,
          c = b.slice(),
          i;
      return function(t) {
        for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
        return c;
      };
    }

    function isNumberArray(x) {
      return ArrayBuffer.isView(x) && !(x instanceof DataView);
    }

    function genericArray(a, b) {
      var nb = b ? b.length : 0,
          na = a ? Math.min(nb, a.length) : 0,
          x = new Array(na),
          c = new Array(nb),
          i;

      for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);
      for (; i < nb; ++i) c[i] = b[i];

      return function(t) {
        for (i = 0; i < na; ++i) c[i] = x[i](t);
        return c;
      };
    }

    function date(a, b) {
      var d = new Date;
      return a = +a, b = +b, function(t) {
        return d.setTime(a * (1 - t) + b * t), d;
      };
    }

    function interpolateNumber(a, b) {
      return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
      };
    }

    function object(a, b) {
      var i = {},
          c = {},
          k;

      if (a === null || typeof a !== "object") a = {};
      if (b === null || typeof b !== "object") b = {};

      for (k in b) {
        if (k in a) {
          i[k] = interpolate(a[k], b[k]);
        } else {
          c[k] = b[k];
        }
      }

      return function(t) {
        for (k in i) c[k] = i[k](t);
        return c;
      };
    }

    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        reB = new RegExp(reA.source, "g");

    function zero(b) {
      return function() {
        return b;
      };
    }

    function one(b) {
      return function(t) {
        return b(t) + "";
      };
    }

    function string(a, b) {
      var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
          am, // current match in a
          bm, // current match in b
          bs, // string preceding current number in b, if any
          i = -1, // index in s
          s = [], // string constants and placeholders
          q = []; // number interpolators

      // Coerce inputs to strings.
      a = a + "", b = b + "";

      // Interpolate pairs of numbers in a & b.
      while ((am = reA.exec(a))
          && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) { // a string precedes the next number in b
          bs = b.slice(bi, bs);
          if (s[i]) s[i] += bs; // coalesce with previous string
          else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
          if (s[i]) s[i] += bm; // coalesce with previous string
          else s[++i] = bm;
        } else { // interpolate non-matching numbers
          s[++i] = null;
          q.push({i: i, x: interpolateNumber(am, bm)});
        }
        bi = reB.lastIndex;
      }

      // Add remains of b.
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }

      // Special optimization for only a single match.
      // Otherwise, interpolate each of the numbers and rejoin the string.
      return s.length < 2 ? (q[0]
          ? one(q[0].x)
          : zero(b))
          : (b = q.length, function(t) {
              for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
              return s.join("");
            });
    }

    function interpolate(a, b) {
      var t = typeof b, c;
      return b == null || t === "boolean" ? constant$1(b)
          : (t === "number" ? interpolateNumber
          : t === "string" ? ((c = color(b)) ? (b = c, rgb$1) : string)
          : b instanceof color ? rgb$1
          : b instanceof Date ? date
          : isNumberArray(b) ? numberArray
          : Array.isArray(b) ? genericArray
          : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
          : interpolateNumber)(a, b);
    }

    function interpolateRound(a, b) {
      return a = +a, b = +b, function(t) {
        return Math.round(a * (1 - t) + b * t);
      };
    }

    function constants(x) {
      return function() {
        return x;
      };
    }

    function number$1(x) {
      return +x;
    }

    var unit = [0, 1];

    function identity(x) {
      return x;
    }

    function normalize(a, b) {
      return (b -= (a = +a))
          ? function(x) { return (x - a) / b; }
          : constants(isNaN(b) ? NaN : 0.5);
    }

    function clamper(a, b) {
      var t;
      if (a > b) t = a, a = b, b = t;
      return function(x) { return Math.max(a, Math.min(b, x)); };
    }

    // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
    // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
    function bimap(domain, range, interpolate) {
      var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
      if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
      else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
      return function(x) { return r0(d0(x)); };
    }

    function polymap(domain, range, interpolate) {
      var j = Math.min(domain.length, range.length) - 1,
          d = new Array(j),
          r = new Array(j),
          i = -1;

      // Reverse descending domains.
      if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
      }

      while (++i < j) {
        d[i] = normalize(domain[i], domain[i + 1]);
        r[i] = interpolate(range[i], range[i + 1]);
      }

      return function(x) {
        var i = bisectRight(domain, x, 1, j) - 1;
        return r[i](d[i](x));
      };
    }

    function copy(source, target) {
      return target
          .domain(source.domain())
          .range(source.range())
          .interpolate(source.interpolate())
          .clamp(source.clamp())
          .unknown(source.unknown());
    }

    function transformer() {
      var domain = unit,
          range = unit,
          interpolate$1 = interpolate,
          transform,
          untransform,
          unknown,
          clamp = identity,
          piecewise,
          output,
          input;

      function rescale() {
        var n = Math.min(domain.length, range.length);
        if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);
        piecewise = n > 2 ? polymap : bimap;
        output = input = null;
        return scale;
      }

      function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate$1)))(transform(clamp(x)));
      }

      scale.invert = function(y) {
        return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
      };

      scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
      };

      scale.rangeRound = function(_) {
        return range = Array.from(_), interpolate$1 = interpolateRound, rescale();
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;
      };

      scale.interpolate = function(_) {
        return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t, u) {
        transform = t, untransform = u;
        return rescale();
      };
    }

    function continuous() {
      return transformer()(identity, identity);
    }

    function formatDecimal(x) {
      return Math.abs(x = Math.round(x)) >= 1e21
          ? x.toLocaleString("en").replace(/,/g, "")
          : x.toString(10);
    }

    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimalParts(1.23) returns ["123", 0].
    function formatDecimalParts(x, p) {
      if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
      var i, coefficient = x.slice(0, i);

      // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
      // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
      return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
      ];
    }

    function exponent(x) {
      return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
    }

    function formatGroup(grouping, thousands) {
      return function(value, width) {
        var i = value.length,
            t = [],
            j = 0,
            g = grouping[0],
            length = 0;

        while (i > 0 && g > 0) {
          if (length + g + 1 > width) g = Math.max(1, width - length);
          t.push(value.substring(i -= g, i + g));
          if ((length += g + 1) > width) break;
          g = grouping[j = (j + 1) % grouping.length];
        }

        return t.reverse().join(thousands);
      };
    }

    function formatNumerals(numerals) {
      return function(value) {
        return value.replace(/[0-9]/g, function(i) {
          return numerals[+i];
        });
      };
    }

    // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
    var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

    function formatSpecifier(specifier) {
      if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
      var match;
      return new FormatSpecifier({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
      });
    }

    formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

    function FormatSpecifier(specifier) {
      this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
      this.align = specifier.align === undefined ? ">" : specifier.align + "";
      this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
      this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
      this.zero = !!specifier.zero;
      this.width = specifier.width === undefined ? undefined : +specifier.width;
      this.comma = !!specifier.comma;
      this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
      this.trim = !!specifier.trim;
      this.type = specifier.type === undefined ? "" : specifier.type + "";
    }

    FormatSpecifier.prototype.toString = function() {
      return this.fill
          + this.align
          + this.sign
          + this.symbol
          + (this.zero ? "0" : "")
          + (this.width === undefined ? "" : Math.max(1, this.width | 0))
          + (this.comma ? "," : "")
          + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
          + (this.trim ? "~" : "")
          + this.type;
    };

    // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
    function formatTrim(s) {
      out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
        switch (s[i]) {
          case ".": i0 = i1 = i; break;
          case "0": if (i0 === 0) i0 = i; i1 = i; break;
          default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
        }
      }
      return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
    }

    var prefixExponent;

    function formatPrefixAuto(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1],
          i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
          n = coefficient.length;
      return i === n ? coefficient
          : i > n ? coefficient + new Array(i - n + 1).join("0")
          : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
          : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
    }

    function formatRounded(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1];
      return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
          : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
          : coefficient + new Array(exponent - coefficient.length + 2).join("0");
    }

    var formatTypes = {
      "%": (x, p) => (x * 100).toFixed(p),
      "b": (x) => Math.round(x).toString(2),
      "c": (x) => x + "",
      "d": formatDecimal,
      "e": (x, p) => x.toExponential(p),
      "f": (x, p) => x.toFixed(p),
      "g": (x, p) => x.toPrecision(p),
      "o": (x) => Math.round(x).toString(8),
      "p": (x, p) => formatRounded(x * 100, p),
      "r": formatRounded,
      "s": formatPrefixAuto,
      "X": (x) => Math.round(x).toString(16).toUpperCase(),
      "x": (x) => Math.round(x).toString(16)
    };

    function identity$1(x) {
      return x;
    }

    var map = Array.prototype.map,
        prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

    function formatLocale(locale) {
      var group = locale.grouping === undefined || locale.thousands === undefined ? identity$1 : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
          currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
          currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
          decimal = locale.decimal === undefined ? "." : locale.decimal + "",
          numerals = locale.numerals === undefined ? identity$1 : formatNumerals(map.call(locale.numerals, String)),
          percent = locale.percent === undefined ? "%" : locale.percent + "",
          minus = locale.minus === undefined ? "−" : locale.minus + "",
          nan = locale.nan === undefined ? "NaN" : locale.nan + "";

      function newFormat(specifier) {
        specifier = formatSpecifier(specifier);

        var fill = specifier.fill,
            align = specifier.align,
            sign = specifier.sign,
            symbol = specifier.symbol,
            zero = specifier.zero,
            width = specifier.width,
            comma = specifier.comma,
            precision = specifier.precision,
            trim = specifier.trim,
            type = specifier.type;

        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";

        // The "" type, and any invalid type, is an alias for ".12~g".
        else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
            suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = formatTypes[type],
            maybeSuffix = /[defgprs%]/.test(type);

        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision === undefined ? 6
            : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
            : Math.max(0, Math.min(20, precision));

        function format(value) {
          var valuePrefix = prefix,
              valueSuffix = suffix,
              i, n, c;

          if (type === "c") {
            valueSuffix = formatType(value) + valueSuffix;
            value = "";
          } else {
            value = +value;

            // Determine the sign. -0 is not less than 0, but 1 / -0 is!
            var valueNegative = value < 0 || 1 / value < 0;

            // Perform the initial formatting.
            value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

            // Trim insignificant zeros.
            if (trim) value = formatTrim(value);

            // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
            if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

            // Compute the prefix and suffix.
            valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
            valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

            // Break the formatted value into the integer “value” part that can be
            // grouped, and fractional or exponential “suffix” part that is not.
            if (maybeSuffix) {
              i = -1, n = value.length;
              while (++i < n) {
                if (c = value.charCodeAt(i), 48 > c || c > 57) {
                  valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                  value = value.slice(0, i);
                  break;
                }
              }
            }
          }

          // If the fill character is not "0", grouping is applied before padding.
          if (comma && !zero) value = group(value, Infinity);

          // Compute the padding.
          var length = valuePrefix.length + value.length + valueSuffix.length,
              padding = length < width ? new Array(width - length + 1).join(fill) : "";

          // If the fill character is "0", grouping is applied after padding.
          if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

          // Reconstruct the final output based on the desired alignment.
          switch (align) {
            case "<": value = valuePrefix + value + valueSuffix + padding; break;
            case "=": value = valuePrefix + padding + value + valueSuffix; break;
            case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
            default: value = padding + valuePrefix + value + valueSuffix; break;
          }

          return numerals(value);
        }

        format.toString = function() {
          return specifier + "";
        };

        return format;
      }

      function formatPrefix(specifier, value) {
        var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
            e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
            k = Math.pow(10, -e),
            prefix = prefixes[8 + e / 3];
        return function(value) {
          return f(k * value) + prefix;
        };
      }

      return {
        format: newFormat,
        formatPrefix: formatPrefix
      };
    }

    var locale;
    var format;
    var formatPrefix;

    defaultLocale({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });

    function defaultLocale(definition) {
      locale = formatLocale(definition);
      format = locale.format;
      formatPrefix = locale.formatPrefix;
      return locale;
    }

    function precisionFixed(step) {
      return Math.max(0, -exponent(Math.abs(step)));
    }

    function precisionPrefix(step, value) {
      return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
    }

    function precisionRound(step, max) {
      step = Math.abs(step), max = Math.abs(max) - step;
      return Math.max(0, exponent(max) - exponent(step)) + 1;
    }

    function tickFormat(start, stop, count, specifier) {
      var step = tickStep(start, stop, count),
          precision;
      specifier = formatSpecifier(specifier == null ? ",f" : specifier);
      switch (specifier.type) {
        case "s": {
          var value = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
          return formatPrefix(specifier, value);
        }
        case "":
        case "e":
        case "g":
        case "p":
        case "r": {
          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
          break;
        }
        case "f":
        case "%": {
          if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
          break;
        }
      }
      return format(specifier);
    }

    function linearish(scale) {
      var domain = scale.domain;

      scale.ticks = function(count) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
      };

      scale.tickFormat = function(count, specifier) {
        var d = domain();
        return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
      };

      scale.nice = function(count) {
        if (count == null) count = 10;

        var d = domain();
        var i0 = 0;
        var i1 = d.length - 1;
        var start = d[i0];
        var stop = d[i1];
        var prestep;
        var step;
        var maxIter = 10;

        if (stop < start) {
          step = start, start = stop, stop = step;
          step = i0, i0 = i1, i1 = step;
        }
        
        while (maxIter-- > 0) {
          step = tickIncrement(start, stop, count);
          if (step === prestep) {
            d[i0] = start;
            d[i1] = stop;
            return domain(d);
          } else if (step > 0) {
            start = Math.floor(start / step) * step;
            stop = Math.ceil(stop / step) * step;
          } else if (step < 0) {
            start = Math.ceil(start * step) / step;
            stop = Math.floor(stop * step) / step;
          } else {
            break;
          }
          prestep = step;
        }

        return scale;
      };

      return scale;
    }

    function linear$1() {
      var scale = continuous();

      scale.copy = function() {
        return copy(scale, linear$1());
      };

      initRange.apply(scale, arguments);

      return linearish(scale);
    }

    function nice(domain, interval) {
      domain = domain.slice();

      var i0 = 0,
          i1 = domain.length - 1,
          x0 = domain[i0],
          x1 = domain[i1],
          t;

      if (x1 < x0) {
        t = i0, i0 = i1, i1 = t;
        t = x0, x0 = x1, x1 = t;
      }

      domain[i0] = interval.floor(x0);
      domain[i1] = interval.ceil(x1);
      return domain;
    }

    var t0 = new Date,
        t1 = new Date;

    function newInterval(floori, offseti, count, field) {

      function interval(date) {
        return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
      }

      interval.floor = function(date) {
        return floori(date = new Date(+date)), date;
      };

      interval.ceil = function(date) {
        return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
      };

      interval.round = function(date) {
        var d0 = interval(date),
            d1 = interval.ceil(date);
        return date - d0 < d1 - date ? d0 : d1;
      };

      interval.offset = function(date, step) {
        return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
      };

      interval.range = function(start, stop, step) {
        var range = [], previous;
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
        do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
        while (previous < start && start < stop);
        return range;
      };

      interval.filter = function(test) {
        return newInterval(function(date) {
          if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
        }, function(date, step) {
          if (date >= date) {
            if (step < 0) while (++step <= 0) {
              while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
            } else while (--step >= 0) {
              while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
            }
          }
        });
      };

      if (count) {
        interval.count = function(start, end) {
          t0.setTime(+start), t1.setTime(+end);
          floori(t0), floori(t1);
          return Math.floor(count(t0, t1));
        };

        interval.every = function(step) {
          step = Math.floor(step);
          return !isFinite(step) || !(step > 0) ? null
              : !(step > 1) ? interval
              : interval.filter(field
                  ? function(d) { return field(d) % step === 0; }
                  : function(d) { return interval.count(0, d) % step === 0; });
        };
      }

      return interval;
    }

    var millisecond = newInterval(function() {
      // noop
    }, function(date, step) {
      date.setTime(+date + step);
    }, function(start, end) {
      return end - start;
    });

    // An optimized implementation for this simple case.
    millisecond.every = function(k) {
      k = Math.floor(k);
      if (!isFinite(k) || !(k > 0)) return null;
      if (!(k > 1)) return millisecond;
      return newInterval(function(date) {
        date.setTime(Math.floor(date / k) * k);
      }, function(date, step) {
        date.setTime(+date + step * k);
      }, function(start, end) {
        return (end - start) / k;
      });
    };

    const durationSecond = 1000;
    const durationMinute = durationSecond * 60;
    const durationHour = durationMinute * 60;
    const durationDay = durationHour * 24;
    const durationWeek = durationDay * 7;
    const durationMonth = durationDay * 30;
    const durationYear = durationDay * 365;

    var second = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds());
    }, function(date, step) {
      date.setTime(+date + step * durationSecond);
    }, function(start, end) {
      return (end - start) / durationSecond;
    }, function(date) {
      return date.getUTCSeconds();
    });

    var minute = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
    }, function(date, step) {
      date.setTime(+date + step * durationMinute);
    }, function(start, end) {
      return (end - start) / durationMinute;
    }, function(date) {
      return date.getMinutes();
    });

    var hour = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
    }, function(date, step) {
      date.setTime(+date + step * durationHour);
    }, function(start, end) {
      return (end - start) / durationHour;
    }, function(date) {
      return date.getHours();
    });

    var day = newInterval(
      date => date.setHours(0, 0, 0, 0),
      (date, step) => date.setDate(date.getDate() + step),
      (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
      date => date.getDate() - 1
    );

    function weekday(i) {
      return newInterval(function(date) {
        date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
        date.setHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setDate(date.getDate() + step * 7);
      }, function(start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
      });
    }

    var sunday = weekday(0);
    var monday = weekday(1);
    var tuesday = weekday(2);
    var wednesday = weekday(3);
    var thursday = weekday(4);
    var friday = weekday(5);
    var saturday = weekday(6);

    var month = newInterval(function(date) {
      date.setDate(1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setMonth(date.getMonth() + step);
    }, function(start, end) {
      return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
    }, function(date) {
      return date.getMonth();
    });

    var year = newInterval(function(date) {
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setFullYear(date.getFullYear() + step);
    }, function(start, end) {
      return end.getFullYear() - start.getFullYear();
    }, function(date) {
      return date.getFullYear();
    });

    // An optimized implementation for this simple case.
    year.every = function(k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
        date.setFullYear(Math.floor(date.getFullYear() / k) * k);
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setFullYear(date.getFullYear() + step * k);
      });
    };

    var utcMinute = newInterval(function(date) {
      date.setUTCSeconds(0, 0);
    }, function(date, step) {
      date.setTime(+date + step * durationMinute);
    }, function(start, end) {
      return (end - start) / durationMinute;
    }, function(date) {
      return date.getUTCMinutes();
    });

    var utcHour = newInterval(function(date) {
      date.setUTCMinutes(0, 0, 0);
    }, function(date, step) {
      date.setTime(+date + step * durationHour);
    }, function(start, end) {
      return (end - start) / durationHour;
    }, function(date) {
      return date.getUTCHours();
    });

    var utcDay = newInterval(function(date) {
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCDate(date.getUTCDate() + step);
    }, function(start, end) {
      return (end - start) / durationDay;
    }, function(date) {
      return date.getUTCDate() - 1;
    });

    function utcWeekday(i) {
      return newInterval(function(date) {
        date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
        date.setUTCHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setUTCDate(date.getUTCDate() + step * 7);
      }, function(start, end) {
        return (end - start) / durationWeek;
      });
    }

    var utcSunday = utcWeekday(0);
    var utcMonday = utcWeekday(1);
    var utcTuesday = utcWeekday(2);
    var utcWednesday = utcWeekday(3);
    var utcThursday = utcWeekday(4);
    var utcFriday = utcWeekday(5);
    var utcSaturday = utcWeekday(6);

    var utcMonth = newInterval(function(date) {
      date.setUTCDate(1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCMonth(date.getUTCMonth() + step);
    }, function(start, end) {
      return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
    }, function(date) {
      return date.getUTCMonth();
    });

    var utcYear = newInterval(function(date) {
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step);
    }, function(start, end) {
      return end.getUTCFullYear() - start.getUTCFullYear();
    }, function(date) {
      return date.getUTCFullYear();
    });

    // An optimized implementation for this simple case.
    utcYear.every = function(k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
        date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step * k);
      });
    };

    function ticker(year, month, week, day, hour, minute) {

      const tickIntervals = [
        [second,  1,      durationSecond],
        [second,  5,  5 * durationSecond],
        [second, 15, 15 * durationSecond],
        [second, 30, 30 * durationSecond],
        [minute,  1,      durationMinute],
        [minute,  5,  5 * durationMinute],
        [minute, 15, 15 * durationMinute],
        [minute, 30, 30 * durationMinute],
        [  hour,  1,      durationHour  ],
        [  hour,  3,  3 * durationHour  ],
        [  hour,  6,  6 * durationHour  ],
        [  hour, 12, 12 * durationHour  ],
        [   day,  1,      durationDay   ],
        [   day,  2,  2 * durationDay   ],
        [  week,  1,      durationWeek  ],
        [ month,  1,      durationMonth ],
        [ month,  3,  3 * durationMonth ],
        [  year,  1,      durationYear  ]
      ];

      function ticks(start, stop, count) {
        const reverse = stop < start;
        if (reverse) [start, stop] = [stop, start];
        const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
        const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop
        return reverse ? ticks.reverse() : ticks;
      }

      function tickInterval(start, stop, count) {
        const target = Math.abs(stop - start) / count;
        const i = bisector(([,, step]) => step).right(tickIntervals, target);
        if (i === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count));
        if (i === 0) return millisecond.every(Math.max(tickStep(start, stop, count), 1));
        const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        return t.every(step);
      }

      return [ticks, tickInterval];
    }

    const [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute);
    const [timeTicks, timeTickInterval] = ticker(year, month, sunday, day, hour, minute);

    var t0$1 = new Date,
        t1$1 = new Date;

    function newInterval$1(floori, offseti, count, field) {

      function interval(date) {
        return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
      }

      interval.floor = function(date) {
        return floori(date = new Date(+date)), date;
      };

      interval.ceil = function(date) {
        return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
      };

      interval.round = function(date) {
        var d0 = interval(date),
            d1 = interval.ceil(date);
        return date - d0 < d1 - date ? d0 : d1;
      };

      interval.offset = function(date, step) {
        return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
      };

      interval.range = function(start, stop, step) {
        var range = [], previous;
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
        do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
        while (previous < start && start < stop);
        return range;
      };

      interval.filter = function(test) {
        return newInterval$1(function(date) {
          if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
        }, function(date, step) {
          if (date >= date) {
            if (step < 0) while (++step <= 0) {
              while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
            } else while (--step >= 0) {
              while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
            }
          }
        });
      };

      if (count) {
        interval.count = function(start, end) {
          t0$1.setTime(+start), t1$1.setTime(+end);
          floori(t0$1), floori(t1$1);
          return Math.floor(count(t0$1, t1$1));
        };

        interval.every = function(step) {
          step = Math.floor(step);
          return !isFinite(step) || !(step > 0) ? null
              : !(step > 1) ? interval
              : interval.filter(field
                  ? function(d) { return field(d) % step === 0; }
                  : function(d) { return interval.count(0, d) % step === 0; });
        };
      }

      return interval;
    }

    const durationSecond$1 = 1000;
    const durationMinute$1 = durationSecond$1 * 60;
    const durationHour$1 = durationMinute$1 * 60;
    const durationDay$1 = durationHour$1 * 24;
    const durationWeek$1 = durationDay$1 * 7;

    var day$1 = newInterval$1(
      date => date.setHours(0, 0, 0, 0),
      (date, step) => date.setDate(date.getDate() + step),
      (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationDay$1,
      date => date.getDate() - 1
    );

    function weekday$1(i) {
      return newInterval$1(function(date) {
        date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
        date.setHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setDate(date.getDate() + step * 7);
      }, function(start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationWeek$1;
      });
    }

    var sunday$1 = weekday$1(0);
    var monday$1 = weekday$1(1);
    var tuesday$1 = weekday$1(2);
    var wednesday$1 = weekday$1(3);
    var thursday$1 = weekday$1(4);
    var friday$1 = weekday$1(5);
    var saturday$1 = weekday$1(6);

    var year$1 = newInterval$1(function(date) {
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setFullYear(date.getFullYear() + step);
    }, function(start, end) {
      return end.getFullYear() - start.getFullYear();
    }, function(date) {
      return date.getFullYear();
    });

    // An optimized implementation for this simple case.
    year$1.every = function(k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval$1(function(date) {
        date.setFullYear(Math.floor(date.getFullYear() / k) * k);
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setFullYear(date.getFullYear() + step * k);
      });
    };

    var utcDay$1 = newInterval$1(function(date) {
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCDate(date.getUTCDate() + step);
    }, function(start, end) {
      return (end - start) / durationDay$1;
    }, function(date) {
      return date.getUTCDate() - 1;
    });

    function utcWeekday$1(i) {
      return newInterval$1(function(date) {
        date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
        date.setUTCHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setUTCDate(date.getUTCDate() + step * 7);
      }, function(start, end) {
        return (end - start) / durationWeek$1;
      });
    }

    var utcSunday$1 = utcWeekday$1(0);
    var utcMonday$1 = utcWeekday$1(1);
    var utcTuesday$1 = utcWeekday$1(2);
    var utcWednesday$1 = utcWeekday$1(3);
    var utcThursday$1 = utcWeekday$1(4);
    var utcFriday$1 = utcWeekday$1(5);
    var utcSaturday$1 = utcWeekday$1(6);

    var utcYear$1 = newInterval$1(function(date) {
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step);
    }, function(start, end) {
      return end.getUTCFullYear() - start.getUTCFullYear();
    }, function(date) {
      return date.getUTCFullYear();
    });

    // An optimized implementation for this simple case.
    utcYear$1.every = function(k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval$1(function(date) {
        date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step * k);
      });
    };

    function localDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
        date.setFullYear(d.y);
        return date;
      }
      return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
    }

    function utcDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date.setUTCFullYear(d.y);
        return date;
      }
      return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
    }

    function newDate(y, m, d) {
      return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};
    }

    function formatLocale$1(locale) {
      var locale_dateTime = locale.dateTime,
          locale_date = locale.date,
          locale_time = locale.time,
          locale_periods = locale.periods,
          locale_weekdays = locale.days,
          locale_shortWeekdays = locale.shortDays,
          locale_months = locale.months,
          locale_shortMonths = locale.shortMonths;

      var periodRe = formatRe(locale_periods),
          periodLookup = formatLookup(locale_periods),
          weekdayRe = formatRe(locale_weekdays),
          weekdayLookup = formatLookup(locale_weekdays),
          shortWeekdayRe = formatRe(locale_shortWeekdays),
          shortWeekdayLookup = formatLookup(locale_shortWeekdays),
          monthRe = formatRe(locale_months),
          monthLookup = formatLookup(locale_months),
          shortMonthRe = formatRe(locale_shortMonths),
          shortMonthLookup = formatLookup(locale_shortMonths);

      var formats = {
        "a": formatShortWeekday,
        "A": formatWeekday,
        "b": formatShortMonth,
        "B": formatMonth,
        "c": null,
        "d": formatDayOfMonth,
        "e": formatDayOfMonth,
        "f": formatMicroseconds,
        "g": formatYearISO,
        "G": formatFullYearISO,
        "H": formatHour24,
        "I": formatHour12,
        "j": formatDayOfYear,
        "L": formatMilliseconds,
        "m": formatMonthNumber,
        "M": formatMinutes,
        "p": formatPeriod,
        "q": formatQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatSeconds,
        "u": formatWeekdayNumberMonday,
        "U": formatWeekNumberSunday,
        "V": formatWeekNumberISO,
        "w": formatWeekdayNumberSunday,
        "W": formatWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatYear,
        "Y": formatFullYear,
        "Z": formatZone,
        "%": formatLiteralPercent
      };

      var utcFormats = {
        "a": formatUTCShortWeekday,
        "A": formatUTCWeekday,
        "b": formatUTCShortMonth,
        "B": formatUTCMonth,
        "c": null,
        "d": formatUTCDayOfMonth,
        "e": formatUTCDayOfMonth,
        "f": formatUTCMicroseconds,
        "g": formatUTCYearISO,
        "G": formatUTCFullYearISO,
        "H": formatUTCHour24,
        "I": formatUTCHour12,
        "j": formatUTCDayOfYear,
        "L": formatUTCMilliseconds,
        "m": formatUTCMonthNumber,
        "M": formatUTCMinutes,
        "p": formatUTCPeriod,
        "q": formatUTCQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatUTCSeconds,
        "u": formatUTCWeekdayNumberMonday,
        "U": formatUTCWeekNumberSunday,
        "V": formatUTCWeekNumberISO,
        "w": formatUTCWeekdayNumberSunday,
        "W": formatUTCWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatUTCYear,
        "Y": formatUTCFullYear,
        "Z": formatUTCZone,
        "%": formatLiteralPercent
      };

      var parses = {
        "a": parseShortWeekday,
        "A": parseWeekday,
        "b": parseShortMonth,
        "B": parseMonth,
        "c": parseLocaleDateTime,
        "d": parseDayOfMonth,
        "e": parseDayOfMonth,
        "f": parseMicroseconds,
        "g": parseYear,
        "G": parseFullYear,
        "H": parseHour24,
        "I": parseHour24,
        "j": parseDayOfYear,
        "L": parseMilliseconds,
        "m": parseMonthNumber,
        "M": parseMinutes,
        "p": parsePeriod,
        "q": parseQuarter,
        "Q": parseUnixTimestamp,
        "s": parseUnixTimestampSeconds,
        "S": parseSeconds,
        "u": parseWeekdayNumberMonday,
        "U": parseWeekNumberSunday,
        "V": parseWeekNumberISO,
        "w": parseWeekdayNumberSunday,
        "W": parseWeekNumberMonday,
        "x": parseLocaleDate,
        "X": parseLocaleTime,
        "y": parseYear,
        "Y": parseFullYear,
        "Z": parseZone,
        "%": parseLiteralPercent
      };

      // These recursive directive definitions must be deferred.
      formats.x = newFormat(locale_date, formats);
      formats.X = newFormat(locale_time, formats);
      formats.c = newFormat(locale_dateTime, formats);
      utcFormats.x = newFormat(locale_date, utcFormats);
      utcFormats.X = newFormat(locale_time, utcFormats);
      utcFormats.c = newFormat(locale_dateTime, utcFormats);

      function newFormat(specifier, formats) {
        return function(date) {
          var string = [],
              i = -1,
              j = 0,
              n = specifier.length,
              c,
              pad,
              format;

          if (!(date instanceof Date)) date = new Date(+date);

          while (++i < n) {
            if (specifier.charCodeAt(i) === 37) {
              string.push(specifier.slice(j, i));
              if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
              else pad = c === "e" ? " " : "0";
              if (format = formats[c]) c = format(date, pad);
              string.push(c);
              j = i + 1;
            }
          }

          string.push(specifier.slice(j, i));
          return string.join("");
        };
      }

      function newParse(specifier, Z) {
        return function(string) {
          var d = newDate(1900, undefined, 1),
              i = parseSpecifier(d, specifier, string += "", 0),
              week, day;
          if (i != string.length) return null;

          // If a UNIX timestamp is specified, return it.
          if ("Q" in d) return new Date(d.Q);
          if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));

          // If this is utcParse, never use the local timezone.
          if (Z && !("Z" in d)) d.Z = 0;

          // The am-pm flag is 0 for AM, and 1 for PM.
          if ("p" in d) d.H = d.H % 12 + d.p * 12;

          // If the month was not specified, inherit from the quarter.
          if (d.m === undefined) d.m = "q" in d ? d.q : 0;

          // Convert day-of-week and week-of-year to day-of-year.
          if ("V" in d) {
            if (d.V < 1 || d.V > 53) return null;
            if (!("w" in d)) d.w = 1;
            if ("Z" in d) {
              week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
              week = day > 4 || day === 0 ? utcMonday$1.ceil(week) : utcMonday$1(week);
              week = utcDay$1.offset(week, (d.V - 1) * 7);
              d.y = week.getUTCFullYear();
              d.m = week.getUTCMonth();
              d.d = week.getUTCDate() + (d.w + 6) % 7;
            } else {
              week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
              week = day > 4 || day === 0 ? monday$1.ceil(week) : monday$1(week);
              week = day$1.offset(week, (d.V - 1) * 7);
              d.y = week.getFullYear();
              d.m = week.getMonth();
              d.d = week.getDate() + (d.w + 6) % 7;
            }
          } else if ("W" in d || "U" in d) {
            if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
            day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
            d.m = 0;
            d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
          }

          // If a time zone is specified, all fields are interpreted as UTC and then
          // offset according to the specified time zone.
          if ("Z" in d) {
            d.H += d.Z / 100 | 0;
            d.M += d.Z % 100;
            return utcDate(d);
          }

          // Otherwise, all fields are in local time.
          return localDate(d);
        };
      }

      function parseSpecifier(d, specifier, string, j) {
        var i = 0,
            n = specifier.length,
            m = string.length,
            c,
            parse;

        while (i < n) {
          if (j >= m) return -1;
          c = specifier.charCodeAt(i++);
          if (c === 37) {
            c = specifier.charAt(i++);
            parse = parses[c in pads ? specifier.charAt(i++) : c];
            if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
          } else if (c != string.charCodeAt(j++)) {
            return -1;
          }
        }

        return j;
      }

      function parsePeriod(d, string, i) {
        var n = periodRe.exec(string.slice(i));
        return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseShortWeekday(d, string, i) {
        var n = shortWeekdayRe.exec(string.slice(i));
        return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseWeekday(d, string, i) {
        var n = weekdayRe.exec(string.slice(i));
        return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseShortMonth(d, string, i) {
        var n = shortMonthRe.exec(string.slice(i));
        return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseMonth(d, string, i) {
        var n = monthRe.exec(string.slice(i));
        return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseLocaleDateTime(d, string, i) {
        return parseSpecifier(d, locale_dateTime, string, i);
      }

      function parseLocaleDate(d, string, i) {
        return parseSpecifier(d, locale_date, string, i);
      }

      function parseLocaleTime(d, string, i) {
        return parseSpecifier(d, locale_time, string, i);
      }

      function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()];
      }

      function formatWeekday(d) {
        return locale_weekdays[d.getDay()];
      }

      function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()];
      }

      function formatMonth(d) {
        return locale_months[d.getMonth()];
      }

      function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)];
      }

      function formatQuarter(d) {
        return 1 + ~~(d.getMonth() / 3);
      }

      function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()];
      }

      function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()];
      }

      function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()];
      }

      function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()];
      }

      function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)];
      }

      function formatUTCQuarter(d) {
        return 1 + ~~(d.getUTCMonth() / 3);
      }

      return {
        format: function(specifier) {
          var f = newFormat(specifier += "", formats);
          f.toString = function() { return specifier; };
          return f;
        },
        parse: function(specifier) {
          var p = newParse(specifier += "", false);
          p.toString = function() { return specifier; };
          return p;
        },
        utcFormat: function(specifier) {
          var f = newFormat(specifier += "", utcFormats);
          f.toString = function() { return specifier; };
          return f;
        },
        utcParse: function(specifier) {
          var p = newParse(specifier += "", true);
          p.toString = function() { return specifier; };
          return p;
        }
      };
    }

    var pads = {"-": "", "_": " ", "0": "0"},
        numberRe = /^\s*\d+/, // note: ignores next directive
        percentRe = /^%/,
        requoteRe = /[\\^$*+?|[\]().{}]/g;

    function pad(value, fill, width) {
      var sign = value < 0 ? "-" : "",
          string = (sign ? -value : value) + "",
          length = string.length;
      return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
    }

    function requote(s) {
      return s.replace(requoteRe, "\\$&");
    }

    function formatRe(names) {
      return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
    }

    function formatLookup(names) {
      return new Map(names.map((name, i) => [name.toLowerCase(), i]));
    }

    function parseWeekdayNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.w = +n[0], i + n[0].length) : -1;
    }

    function parseWeekdayNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.u = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.U = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberISO(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.V = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.W = +n[0], i + n[0].length) : -1;
    }

    function parseFullYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 4));
      return n ? (d.y = +n[0], i + n[0].length) : -1;
    }

    function parseYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
    }

    function parseZone(d, string, i) {
      var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
      return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
    }

    function parseQuarter(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
    }

    function parseMonthNumber(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
    }

    function parseDayOfMonth(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.d = +n[0], i + n[0].length) : -1;
    }

    function parseDayOfYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
    }

    function parseHour24(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.H = +n[0], i + n[0].length) : -1;
    }

    function parseMinutes(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.M = +n[0], i + n[0].length) : -1;
    }

    function parseSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.S = +n[0], i + n[0].length) : -1;
    }

    function parseMilliseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.L = +n[0], i + n[0].length) : -1;
    }

    function parseMicroseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 6));
      return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
    }

    function parseLiteralPercent(d, string, i) {
      var n = percentRe.exec(string.slice(i, i + 1));
      return n ? i + n[0].length : -1;
    }

    function parseUnixTimestamp(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.Q = +n[0], i + n[0].length) : -1;
    }

    function parseUnixTimestampSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.s = +n[0], i + n[0].length) : -1;
    }

    function formatDayOfMonth(d, p) {
      return pad(d.getDate(), p, 2);
    }

    function formatHour24(d, p) {
      return pad(d.getHours(), p, 2);
    }

    function formatHour12(d, p) {
      return pad(d.getHours() % 12 || 12, p, 2);
    }

    function formatDayOfYear(d, p) {
      return pad(1 + day$1.count(year$1(d), d), p, 3);
    }

    function formatMilliseconds(d, p) {
      return pad(d.getMilliseconds(), p, 3);
    }

    function formatMicroseconds(d, p) {
      return formatMilliseconds(d, p) + "000";
    }

    function formatMonthNumber(d, p) {
      return pad(d.getMonth() + 1, p, 2);
    }

    function formatMinutes(d, p) {
      return pad(d.getMinutes(), p, 2);
    }

    function formatSeconds(d, p) {
      return pad(d.getSeconds(), p, 2);
    }

    function formatWeekdayNumberMonday(d) {
      var day = d.getDay();
      return day === 0 ? 7 : day;
    }

    function formatWeekNumberSunday(d, p) {
      return pad(sunday$1.count(year$1(d) - 1, d), p, 2);
    }

    function dISO(d) {
      var day = d.getDay();
      return (day >= 4 || day === 0) ? thursday$1(d) : thursday$1.ceil(d);
    }

    function formatWeekNumberISO(d, p) {
      d = dISO(d);
      return pad(thursday$1.count(year$1(d), d) + (year$1(d).getDay() === 4), p, 2);
    }

    function formatWeekdayNumberSunday(d) {
      return d.getDay();
    }

    function formatWeekNumberMonday(d, p) {
      return pad(monday$1.count(year$1(d) - 1, d), p, 2);
    }

    function formatYear(d, p) {
      return pad(d.getFullYear() % 100, p, 2);
    }

    function formatYearISO(d, p) {
      d = dISO(d);
      return pad(d.getFullYear() % 100, p, 2);
    }

    function formatFullYear(d, p) {
      return pad(d.getFullYear() % 10000, p, 4);
    }

    function formatFullYearISO(d, p) {
      var day = d.getDay();
      d = (day >= 4 || day === 0) ? thursday$1(d) : thursday$1.ceil(d);
      return pad(d.getFullYear() % 10000, p, 4);
    }

    function formatZone(d) {
      var z = d.getTimezoneOffset();
      return (z > 0 ? "-" : (z *= -1, "+"))
          + pad(z / 60 | 0, "0", 2)
          + pad(z % 60, "0", 2);
    }

    function formatUTCDayOfMonth(d, p) {
      return pad(d.getUTCDate(), p, 2);
    }

    function formatUTCHour24(d, p) {
      return pad(d.getUTCHours(), p, 2);
    }

    function formatUTCHour12(d, p) {
      return pad(d.getUTCHours() % 12 || 12, p, 2);
    }

    function formatUTCDayOfYear(d, p) {
      return pad(1 + utcDay$1.count(utcYear$1(d), d), p, 3);
    }

    function formatUTCMilliseconds(d, p) {
      return pad(d.getUTCMilliseconds(), p, 3);
    }

    function formatUTCMicroseconds(d, p) {
      return formatUTCMilliseconds(d, p) + "000";
    }

    function formatUTCMonthNumber(d, p) {
      return pad(d.getUTCMonth() + 1, p, 2);
    }

    function formatUTCMinutes(d, p) {
      return pad(d.getUTCMinutes(), p, 2);
    }

    function formatUTCSeconds(d, p) {
      return pad(d.getUTCSeconds(), p, 2);
    }

    function formatUTCWeekdayNumberMonday(d) {
      var dow = d.getUTCDay();
      return dow === 0 ? 7 : dow;
    }

    function formatUTCWeekNumberSunday(d, p) {
      return pad(utcSunday$1.count(utcYear$1(d) - 1, d), p, 2);
    }

    function UTCdISO(d) {
      var day = d.getUTCDay();
      return (day >= 4 || day === 0) ? utcThursday$1(d) : utcThursday$1.ceil(d);
    }

    function formatUTCWeekNumberISO(d, p) {
      d = UTCdISO(d);
      return pad(utcThursday$1.count(utcYear$1(d), d) + (utcYear$1(d).getUTCDay() === 4), p, 2);
    }

    function formatUTCWeekdayNumberSunday(d) {
      return d.getUTCDay();
    }

    function formatUTCWeekNumberMonday(d, p) {
      return pad(utcMonday$1.count(utcYear$1(d) - 1, d), p, 2);
    }

    function formatUTCYear(d, p) {
      return pad(d.getUTCFullYear() % 100, p, 2);
    }

    function formatUTCYearISO(d, p) {
      d = UTCdISO(d);
      return pad(d.getUTCFullYear() % 100, p, 2);
    }

    function formatUTCFullYear(d, p) {
      return pad(d.getUTCFullYear() % 10000, p, 4);
    }

    function formatUTCFullYearISO(d, p) {
      var day = d.getUTCDay();
      d = (day >= 4 || day === 0) ? utcThursday$1(d) : utcThursday$1.ceil(d);
      return pad(d.getUTCFullYear() % 10000, p, 4);
    }

    function formatUTCZone() {
      return "+0000";
    }

    function formatLiteralPercent() {
      return "%";
    }

    function formatUnixTimestamp(d) {
      return +d;
    }

    function formatUnixTimestampSeconds(d) {
      return Math.floor(+d / 1000);
    }

    var locale$1;
    var timeFormat;
    var timeParse;
    var utcFormat;
    var utcParse;

    defaultLocale$1({
      dateTime: "%x, %X",
      date: "%-m/%-d/%Y",
      time: "%-I:%M:%S %p",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });

    function defaultLocale$1(definition) {
      locale$1 = formatLocale$1(definition);
      timeFormat = locale$1.format;
      timeParse = locale$1.parse;
      utcFormat = locale$1.utcFormat;
      utcParse = locale$1.utcParse;
      return locale$1;
    }

    function date$1(t) {
      return new Date(t);
    }

    function number$2(t) {
      return t instanceof Date ? +t : +new Date(+t);
    }

    function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {
      var scale = continuous(),
          invert = scale.invert,
          domain = scale.domain;

      var formatMillisecond = format(".%L"),
          formatSecond = format(":%S"),
          formatMinute = format("%I:%M"),
          formatHour = format("%I %p"),
          formatDay = format("%a %d"),
          formatWeek = format("%b %d"),
          formatMonth = format("%B"),
          formatYear = format("%Y");

      function tickFormat(date) {
        return (second(date) < date ? formatMillisecond
            : minute(date) < date ? formatSecond
            : hour(date) < date ? formatMinute
            : day(date) < date ? formatHour
            : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
            : year(date) < date ? formatMonth
            : formatYear)(date);
      }

      scale.invert = function(y) {
        return new Date(invert(y));
      };

      scale.domain = function(_) {
        return arguments.length ? domain(Array.from(_, number$2)) : domain().map(date$1);
      };

      scale.ticks = function(interval) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);
      };

      scale.tickFormat = function(count, specifier) {
        return specifier == null ? tickFormat : format(specifier);
      };

      scale.nice = function(interval) {
        var d = domain();
        if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
        return interval ? domain(nice(d, interval)) : scale;
      };

      scale.copy = function() {
        return copy(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));
      };

      return scale;
    }

    function time() {
      return initRange.apply(calendar(timeTicks, timeTickInterval, year, month, sunday, day, hour, minute, second, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
    }

    function utcTime() {
      return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
    }

    /* src\components\charts\Line.svelte generated by Svelte v3.31.0 */
    const file$2 = "src\\components\\charts\\Line.svelte";

    // (48:0) {#if width}
    function create_if_block$2(ctx) {
    	let svg;
    	let title_1;
    	let t0;
    	let desc_1;
    	let t1;
    	let g;
    	let path_1;
    	let path_1_d_value;
    	let axis0;
    	let axis1;
    	let pointinteractive;
    	let svg_viewBox_value;
    	let current;
    	let mounted;
    	let dispose;

    	axis0 = new Axis({
    			props: {
    				width: /*width*/ ctx[8],
    				height: /*height*/ ctx[9],
    				margin: /*margin*/ ctx[1],
    				scale: /*y*/ ctx[11],
    				position: "left",
    				format: /*format*/ ctx[2].y
    			},
    			$$inline: true
    		});

    	axis1 = new Axis({
    			props: {
    				width: /*width*/ ctx[8],
    				height: /*height*/ ctx[9],
    				margin: /*margin*/ ctx[1],
    				scale: /*x*/ ctx[10],
    				position: "bottom",
    				format: /*format*/ ctx[2].x
    			},
    			$$inline: true
    		});

    	pointinteractive = new PointInteractive({
    			props: {
    				datum: /*datum*/ ctx[12],
    				format: /*format*/ ctx[2],
    				x: /*x*/ ctx[10],
    				y: /*y*/ ctx[11],
    				key: /*key*/ ctx[3],
    				width: /*width*/ ctx[8]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			title_1 = svg_element("title");
    			t0 = text(/*title*/ ctx[5]);
    			desc_1 = svg_element("desc");
    			t1 = text(/*desc*/ ctx[6]);
    			g = svg_element("g");
    			path_1 = svg_element("path");
    			create_component(axis0.$$.fragment);
    			create_component(axis1.$$.fragment);
    			create_component(pointinteractive.$$.fragment);
    			attr_dev(title_1, "id", "title");
    			add_location(title_1, file$2, 59, 1, 1549);
    			attr_dev(desc_1, "id", "desc");
    			add_location(desc_1, file$2, 60, 1, 1585);
    			attr_dev(path_1, "d", path_1_d_value = /*path*/ ctx[13](/*data*/ ctx[0]));
    			attr_dev(path_1, "stroke", /*color*/ ctx[4]);
    			attr_dev(path_1, "fill", "none");
    			add_location(path_1, file$2, 62, 2, 1624);
    			add_location(g, file$2, 61, 1, 1617);
    			attr_dev(svg, "xmlns:svg", "https://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", svg_viewBox_value = "0 0 " + /*width*/ ctx[8] + " " + /*height*/ ctx[9]);
    			attr_dev(svg, "width", /*width*/ ctx[8]);
    			attr_dev(svg, "height", /*height*/ ctx[9]);
    			attr_dev(svg, "role", "img");
    			attr_dev(svg, "aria-labelledby", "title desc");
    			add_location(svg, file$2, 48, 0, 1279);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, title_1);
    			append_dev(title_1, t0);
    			append_dev(svg, desc_1);
    			append_dev(desc_1, t1);
    			append_dev(svg, g);
    			append_dev(g, path_1);
    			mount_component(axis0, svg, null);
    			mount_component(axis1, svg, null);
    			mount_component(pointinteractive, svg, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(svg, "touchmove", prevent_default(/*touchmove_handler*/ ctx[16]), false, true, false),
    					listen_dev(svg, "pointermove", prevent_default(/*mouseMove*/ ctx[14]), false, true, false),
    					listen_dev(svg, "mouseleave", /*leave*/ ctx[15], false, false, false),
    					listen_dev(svg, "touchend", /*leave*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*title*/ 32) set_data_dev(t0, /*title*/ ctx[5]);
    			if (!current || dirty & /*desc*/ 64) set_data_dev(t1, /*desc*/ ctx[6]);

    			if (!current || dirty & /*path, data*/ 8193 && path_1_d_value !== (path_1_d_value = /*path*/ ctx[13](/*data*/ ctx[0]))) {
    				attr_dev(path_1, "d", path_1_d_value);
    			}

    			if (!current || dirty & /*color*/ 16) {
    				attr_dev(path_1, "stroke", /*color*/ ctx[4]);
    			}

    			const axis0_changes = {};
    			if (dirty & /*width*/ 256) axis0_changes.width = /*width*/ ctx[8];
    			if (dirty & /*height*/ 512) axis0_changes.height = /*height*/ ctx[9];
    			if (dirty & /*margin*/ 2) axis0_changes.margin = /*margin*/ ctx[1];
    			if (dirty & /*y*/ 2048) axis0_changes.scale = /*y*/ ctx[11];
    			if (dirty & /*format*/ 4) axis0_changes.format = /*format*/ ctx[2].y;
    			axis0.$set(axis0_changes);
    			const axis1_changes = {};
    			if (dirty & /*width*/ 256) axis1_changes.width = /*width*/ ctx[8];
    			if (dirty & /*height*/ 512) axis1_changes.height = /*height*/ ctx[9];
    			if (dirty & /*margin*/ 2) axis1_changes.margin = /*margin*/ ctx[1];
    			if (dirty & /*x*/ 1024) axis1_changes.scale = /*x*/ ctx[10];
    			if (dirty & /*format*/ 4) axis1_changes.format = /*format*/ ctx[2].x;
    			axis1.$set(axis1_changes);
    			const pointinteractive_changes = {};
    			if (dirty & /*datum*/ 4096) pointinteractive_changes.datum = /*datum*/ ctx[12];
    			if (dirty & /*format*/ 4) pointinteractive_changes.format = /*format*/ ctx[2];
    			if (dirty & /*x*/ 1024) pointinteractive_changes.x = /*x*/ ctx[10];
    			if (dirty & /*y*/ 2048) pointinteractive_changes.y = /*y*/ ctx[11];
    			if (dirty & /*key*/ 8) pointinteractive_changes.key = /*key*/ ctx[3];
    			if (dirty & /*width*/ 256) pointinteractive_changes.width = /*width*/ ctx[8];
    			pointinteractive.$set(pointinteractive_changes);

    			if (!current || dirty & /*width, height*/ 768 && svg_viewBox_value !== (svg_viewBox_value = "0 0 " + /*width*/ ctx[8] + " " + /*height*/ ctx[9])) {
    				attr_dev(svg, "viewBox", svg_viewBox_value);
    			}

    			if (!current || dirty & /*width*/ 256) {
    				attr_dev(svg, "width", /*width*/ ctx[8]);
    			}

    			if (!current || dirty & /*height*/ 512) {
    				attr_dev(svg, "height", /*height*/ ctx[9]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(axis0.$$.fragment, local);
    			transition_in(axis1.$$.fragment, local);
    			transition_in(pointinteractive.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(axis0.$$.fragment, local);
    			transition_out(axis1.$$.fragment, local);
    			transition_out(pointinteractive.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			destroy_component(axis0);
    			destroy_component(axis1);
    			destroy_component(pointinteractive);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(48:0) {#if width}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let div;
    	let div_class_value;
    	let div_resize_listener;
    	let current;
    	let if_block = /*width*/ ctx[8] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", div_class_value = "graphic " + /*layout*/ ctx[7]);
    			add_render_callback(() => /*div_elementresize_handler*/ ctx[17].call(div));
    			add_location(div, file$2, 46, 0, 1182);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			div_resize_listener = add_resize_listener(div, /*div_elementresize_handler*/ ctx[17].bind(div));
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*width*/ ctx[8]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*width*/ 256) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*layout*/ 128 && div_class_value !== (div_class_value = "graphic " + /*layout*/ ctx[7])) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			div_resize_listener();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Line", slots, []);
    	let { data } = $$props;
    	let { margin = { top: 20, right: 5, bottom: 20, left: 5 } } = $$props;
    	let { format } = $$props;
    	let { key } = $$props;
    	let { color } = $$props;
    	let { title } = $$props;
    	let { desc } = $$props;
    	let { layout } = $$props;
    	let datum, width, height;

    	const mouseMove = m => {
    		const mX = m.offsetX ? m.offsetX : m.clientX;
    		const _data = [...data];
    		_data.sort((a, b) => a[key.x] - b[[key.x]]);
    		const index = x.invert(mX);
    		const i = bisector(d => d[key.x]).center(_data, index);
    		$$invalidate(12, datum = _data[i]);
    	};

    	const leave = m => {
    		$$invalidate(12, datum = undefined);
    	};

    	const writable_props = ["data", "margin", "format", "key", "color", "title", "desc", "layout"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Line> was created with unknown prop '${key}'`);
    	});

    	function touchmove_handler(event) {
    		bubble($$self, event);
    	}

    	function div_elementresize_handler() {
    		width = this.clientWidth;
    		height = this.clientHeight;
    		$$invalidate(8, width);
    		$$invalidate(9, height);
    	}

    	$$self.$$set = $$props => {
    		if ("data" in $$props) $$invalidate(0, data = $$props.data);
    		if ("margin" in $$props) $$invalidate(1, margin = $$props.margin);
    		if ("format" in $$props) $$invalidate(2, format = $$props.format);
    		if ("key" in $$props) $$invalidate(3, key = $$props.key);
    		if ("color" in $$props) $$invalidate(4, color = $$props.color);
    		if ("title" in $$props) $$invalidate(5, title = $$props.title);
    		if ("desc" in $$props) $$invalidate(6, desc = $$props.desc);
    		if ("layout" in $$props) $$invalidate(7, layout = $$props.layout);
    	};

    	$$self.$capture_state = () => ({
    		Axis,
    		PointInteractive,
    		line,
    		curveStep,
    		scaleTime: time,
    		scaleLinear: linear$1,
    		max,
    		extent,
    		bisector,
    		data,
    		margin,
    		format,
    		key,
    		color,
    		title,
    		desc,
    		layout,
    		datum,
    		width,
    		height,
    		mouseMove,
    		leave,
    		x,
    		y,
    		path
    	});

    	$$self.$inject_state = $$props => {
    		if ("data" in $$props) $$invalidate(0, data = $$props.data);
    		if ("margin" in $$props) $$invalidate(1, margin = $$props.margin);
    		if ("format" in $$props) $$invalidate(2, format = $$props.format);
    		if ("key" in $$props) $$invalidate(3, key = $$props.key);
    		if ("color" in $$props) $$invalidate(4, color = $$props.color);
    		if ("title" in $$props) $$invalidate(5, title = $$props.title);
    		if ("desc" in $$props) $$invalidate(6, desc = $$props.desc);
    		if ("layout" in $$props) $$invalidate(7, layout = $$props.layout);
    		if ("datum" in $$props) $$invalidate(12, datum = $$props.datum);
    		if ("width" in $$props) $$invalidate(8, width = $$props.width);
    		if ("height" in $$props) $$invalidate(9, height = $$props.height);
    		if ("x" in $$props) $$invalidate(10, x = $$props.x);
    		if ("y" in $$props) $$invalidate(11, y = $$props.y);
    		if ("path" in $$props) $$invalidate(13, path = $$props.path);
    	};

    	let x;
    	let y;
    	let path;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*data, key, margin, width*/ 267) {
    			 $$invalidate(10, x = time().domain(extent(data, d => d[key.x])).range([margin.left, width - margin.right]));
    		}

    		if ($$self.$$.dirty & /*data, key, height, margin*/ 523) {
    			 $$invalidate(11, y = linear$1().domain([0, max(data, d => d[key.y])]).range([height - margin.bottom - margin.top, margin.top]));
    		}

    		if ($$self.$$.dirty & /*x, key, y*/ 3080) {
    			 $$invalidate(13, path = line().x(d => x(d[key.x])).y(d => y(d[key.y])).curve(curveStep));
    		}
    	};

    	return [
    		data,
    		margin,
    		format,
    		key,
    		color,
    		title,
    		desc,
    		layout,
    		width,
    		height,
    		x,
    		y,
    		datum,
    		path,
    		mouseMove,
    		leave,
    		touchmove_handler,
    		div_elementresize_handler
    	];
    }

    class Line extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
    			data: 0,
    			margin: 1,
    			format: 2,
    			key: 3,
    			color: 4,
    			title: 5,
    			desc: 6,
    			layout: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Line",
    			options,
    			id: create_fragment$2.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[0] === undefined && !("data" in props)) {
    			console.warn("<Line> was created without expected prop 'data'");
    		}

    		if (/*format*/ ctx[2] === undefined && !("format" in props)) {
    			console.warn("<Line> was created without expected prop 'format'");
    		}

    		if (/*key*/ ctx[3] === undefined && !("key" in props)) {
    			console.warn("<Line> was created without expected prop 'key'");
    		}

    		if (/*color*/ ctx[4] === undefined && !("color" in props)) {
    			console.warn("<Line> was created without expected prop 'color'");
    		}

    		if (/*title*/ ctx[5] === undefined && !("title" in props)) {
    			console.warn("<Line> was created without expected prop 'title'");
    		}

    		if (/*desc*/ ctx[6] === undefined && !("desc" in props)) {
    			console.warn("<Line> was created without expected prop 'desc'");
    		}

    		if (/*layout*/ ctx[7] === undefined && !("layout" in props)) {
    			console.warn("<Line> was created without expected prop 'layout'");
    		}
    	}

    	get data() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get margin() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set margin(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get format() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set format(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get key() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get desc() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set desc(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get layout() {
    		throw new Error("<Line>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set layout(value) {
    		throw new Error("<Line>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var isArray = Array.isArray;

    function toArray(value) {
      return value != null
        ? (isArray(value) ? value : [value])
        : [];
    }

    /**
     * Generate a table expression that filters a table based on ordered row
     * indices from start to end (end not included), where start and end
     * represent per-group ordered row numbers in the table. The resulting
     * string can be used as the input to the filter verb.
     * @param {number} [start] Zero-based index at which to start extraction.
     *  A negative index indicates an offset from the end of the group.
     *  If start is undefined, slice starts from the index 0.
     * @param {number} [end] Zero-based index before which to end extraction.
     *  A negative index indicates an offset from the end of the group.
     *  If end is omitted, slice extracts through the end of the group.
     * @return {string} A table expression string for slicing values.
     * @example slice(1, -1)
     */
    function slice(start = 0, end = Infinity) {
      return `${prep(start)} < row_number() && row_number() <= ${prep(end)}`;
    }

    function prep(index) {
      return index < 0 ? `count() + ${index}` : index;
    }

    /**
     * Abstract base class for transforming data.
     */
    class Transformable {

      /**
       * Instantiate a new Transformable instance.
       * @param {Params} [params] The parameter values.
       */
      constructor(params) {
        if (params) this._params = params;
      }

      /**
       * Get or set table expression parameter values.
       * If called with no arguments, returns the current parameter values
       * as an object. Otherwise, adds the provided parameters to this
       * table's parameter set and returns the table. Any prior parameters
       * with names matching the input parameters are overridden.
       * @param {Params} [values] The parameter values.
       * @return {this|Params} The current parameters values (if called with
       *  no arguments) or this table.
       */
      params(values) {
        if (arguments.length) {
          if (values) {
            this._params = { ...this._params, ...values };
          }
          return this;
        } else {
          return this._params;
        }
      }

      /**
       * Create a new fully-materialized instance of this table.
       * All filter and orderby settings are removed from the new table.
       * Instead, the backing data itself is filtered and ordered as needed.
       * @param {number[]} [indices] Ordered row indices to materialize.
       *  If unspecified, all rows passing the table filter are used.
       * @return {this} A reified table.
       */
      reify(indices) {
        return this.__reify(this, indices);
      }

      // -- Transformation Verbs ------------------------------------------------

      /**
       * Count the number of values in a group. This method is a shorthand
       * for {@link Transformable#rollup} with a count aggregate function.
       * @param {CountOptions} [options] Options for the count.
       * @return {this} A new table with groupby and count columns.
       * @example table.groupby('colA').count()
       * @example table.groupby('colA').count({ as: 'num' })
       */
      count(options) {
        return this.__count(this, options);
      }

      /**
       * Derive new column values based on the provided expressions. By default,
       * new columns are added after (higher indices than) existing columns. Use
       * the before or after options to place new columns elsewhere.
       * @param {ExprObject} values Object of name-value pairs defining the
       *  columns to derive. The input object should have output column
       *  names for keys and table expressions for values.
       * @param {DeriveOptions} [options] Options for dropping or relocating
       *  derived columns. Use either a before or after property to indicate
       *  where to place derived columns. Specifying both before and after is an
       *  error. Unlike the relocate verb, this option affects only new columns;
       *  updated columns with existing names are excluded from relocation.
       * @return {this} A new table with derived columns added.
       * @example table.derive({ sumXY: d => d.x + d.y })
       * @example table.derive({ z: d => d.x * d.y }, { before: 'x' })
       */
      derive(values, options) {
        return this.__derive(this, values, options);
      }

      /**
       * Filter a table to a subset of rows based on the input criteria.
       * The resulting table provides a filtered view over the original data; no
       * data copy is made. To create a table that copies only filtered data to
       * new data structures, call {@link Transformable#reify} on the output table.
       * @param {TableExpr} criteria Filter criteria as a table expression.
       *  Both aggregate and window functions are permitted, taking into account
       *  {@link Transformable#groupby} or {@link Transformable#orderby} settings.
       * @return {this} A new table with filtered rows.
       * @example table.filter(d => abs(d.value) < 5)
       */
      filter(criteria) {
        return this.__filter(this, criteria);
      }

      /**
       * Extract rows with indices from start to end (end not included), where
       * start and end represent per-group ordered row numbers in the table.
       * @param {number} [start] Zero-based index at which to start extraction.
       *  A negative index indicates an offset from the end of the group.
       *  If start is undefined, slice starts from the index 0.
       * @param {number} [end] Zero-based index before which to end extraction.
       *  A negative index indicates an offset from the end of the group.
       *  If end is omitted, slice extracts through the end of the group.
       * @return {this} A new table with sliced rows.
       * @example table.slice(1, -1)
       */
      slice(start, end) {
        return this.filter(slice(start, end)).reify();
      }

      /**
       * Group table rows based on a set of column values.
       * Subsequent operations that are sensitive to grouping (such as
       * aggregate functions) will operate over the grouped rows.
       * To undo grouping, use {@link Transformable#ungroup}.
       * @param  {...ExprList} keys Key column values to group by.
       *  The keys may be specified using column name strings, column index
       *  numbers, value objects with output column names for keys and table
       *  expressions for values, or selection helper functions.
       * @return {this} A new table with grouped rows.
       * @example table.groupby('colA', 'colB')
       * @example table.groupby({ key: d => d.colA + d.colB })
       */
      groupby(...keys) {
        return this.__groupby(this, keys.flat());
      }

      /**
       * Order table rows based on a set of column values.
       * Subsequent operations sensitive to ordering (such as window functions)
       * will operate over sorted values.
       * The resulting table provides an view over the original data, without
       * any copying. To create a table with sorted data copied to new data
       * strucures, call {@link Transformable#reify} on the result of this method.
       * To undo ordering, use {@link Transformable#unorder}.
       * @param  {...OrderKeys} keys Key values to sort by, in precedence order.
       *  By default, sorting is done in ascending order.
       *  To sort in descending order, wrap values using {@link desc}.
       *  If a string, order by the column with that name.
       *  If a number, order by the column with that index.
       *  If a function, must be a valid table expression; aggregate functions
       *  are permitted, but window functions are not.
       *  If an object, object values must be valid values parameters
       *  with output column names for keys and table expressions
       *  for values (the output names will be ignored).
       *  If an array, array values must be valid key parameters.
       * @return {this} A new ordered table.
       * @example table.orderby('a', desc('b'))
       * @example table.orderby({ a: 'a', b: desc('b') )})
       * @example table.orderby(desc(d => d.a))
       */
      orderby(...keys) {
        return this.__orderby(this, keys.flat());
      }

      /**
       * Relocate a subset of columns to change their positions, also
       * potentially renaming them.
       * @param {Selection} columns An ordered selection of columns to relocate.
       *  The input may consist of column name strings, column integer indices,
       *  rename objects with current column names as keys and new column names
       *  as values, or functions that take a table as input and returns a valid
       *  selection parameter (typically the output of selection helper functions
       *  such as {@link all}, {@link not}, or {@link range}).
       * @param {RelocateOptions} options Options for relocating. Must include
       *  either the before or after property to indicate where to place the
       *  relocated columns. Specifying both before and after is an error.
       * @return {this} A new table with relocated columns.
       * @example table.relocate(['colY', 'colZ'], { after: 'colX' })
       * @example table.relocate(not('colB', 'colC'), { before: 'colA' })
       * @example table.relocate({ colA: 'newA', colB: 'newB' }, { after: 'colC' })
       */
      relocate(columns, options) {
        return this.__relocate(this, toArray(columns), options);
      }

      /**
       * Rename one or more columns, preserving column order.
       * @param {...Select} columns One or more rename objects with current
       *  column names as keys and new column names as values.
       * @return {this} A new table with renamed columns.
       * @example table.rename({ oldName: 'newName' })
       * @example table.rename({ a: 'a2', b: 'b2' })
       */
      rename(...columns) {
        return this.__rename(this, columns.flat());
      }

      /**
       * Rollup a table to produce an aggregate summary.
       * Often used in conjunction with {@link Transformable#groupby}.
       * To produce counts only, {@link Transformable#count} is a shortcut.
       * @param {ExprObject} [values] Object of name-value pairs defining aggregate
       *  output columns. The input object should have output column names for
       *  keys and table expressions for values. The expressions must be valid
       *  aggregate expressions: window functions are not allowed and column
       *  references must be arguments to aggregate functions.
       * @return {this} A new table of aggregate summary values.
       * @example table.groupby('colA').rollup({ mean: d => mean(d.colB) })
       * @example table.groupby('colA').rollup({ mean: op.median('colB') })
       */
      rollup(values) {
        return this.__rollup(this, values);
      }

      /**
       * Generate a table from a random sample of rows.
       * If the table is grouped, performs a stratified sample by
       * sampling from each group separately.
       * @param {number|TableExpr} size The number of samples to draw per group.
       *  If number-valued, the same sample size is used for each group.
       *  If function-valued, the input should be an aggregate table
       *  expression compatible with {@link Transformable#rollup}.
       * @param {SampleOptions} [options] Options for sampling.
       * @return {this} A new table with sampled rows.
       * @example table.sample(50)
       * @example table.sample(100, { replace: true })
       * @example table.groupby('colA').sample(() => op.floor(0.5 * op.count()))
       */
      sample(size, options) {
        return this.__sample(this, size, options);
      }

      /**
       * Select a subset of columns into a new table, potentially renaming them.
       * @param {...Select} columns An ordered selection of columns.
       *  The input may consist of column name strings, column integer indices,
       *  rename objects with current column names as keys and new column names
       *  as values, or functions that take a table as input and returns a valid
       *  selection parameter (typically the output of selection helper functions
       *  such as {@link all}, {@link not}, or {@link range}).
       * @return {this} A new table of selected columns.
       * @example table.select('colA', 'colB')
       * @example table.select(not('colB', 'colC'))
       * @example table.select({ colA: 'newA', colB: 'newB' })
       */
      select(...columns) {
        return this.__select(this, columns.flat());
      }

      /**
       * Ungroup a table, removing any grouping criteria.
       * Undoes the effects of {@link Transformable#groupby}.
       * @return {this} A new ungrouped table, or this table if not grouped.
       * @example table.ungroup()
       */
      ungroup() {
        return this.__ungroup(this);
      }

      /**
       * Unorder a table, removing any sorting criteria.
       * Undoes the effects of {@link Transformable#orderby}.
       * @return {this} A new unordered table, or this table if not ordered.
       * @example table.unorder()
       */
      unorder() {
        return this.__unorder(this);
      }

      // -- Cleaning Verbs ------------------------------------------------------

      /**
       * De-duplicate table rows by removing repeated row values.
       * @param {...ExprList} keys Key columns to check for duplicates.
       *  Two rows are considered duplicates if they have matching values for
       *  all keys. If keys are unspecified, all columns are used.
       *  The keys may be specified using column name strings, column index
       *  numbers, value objects with output column names for keys and table
       *  expressions for values, or selection helper functions.
       * @return {this} A new de-duplicated table.
       * @example table.dedupe()
       * @example table.dedupe('a', 'b')
       * @example table.dedupe({ abs: d => op.abs(d.a) })
       */
      dedupe(...keys) {
        return this.__dedupe(this, keys.flat());
      }

      /**
       * Impute missing values or rows. Accepts a set of column-expression pairs
       * and evaluates the expressions to replace any missing (null, undefined,
       * or NaN) values in the original column.
       * If the expand option is specified, imputes new rows for missing
       * combinations of values. All combinations of key values (a full cross
       * product) are considered for each level of grouping (specified by
       * {@link Transformable#groupby}). New rows will be added for any combination
       * of key and groupby values not already contained in the table. For all
       * non-key and non-group columns the new rows are populated with imputation
       * values (first argument) if specified, otherwise undefined.
       * If the expand option is specified, any filter or orderby settings are
       * removed from the output table, but groupby settings persist.
       * @param {ExprObject} values Object of name-value pairs for the column values
       *  to impute. The input object should have existing column names for keys
       *  and table expressions for values. The expressions will be evaluated to
       *  determine replacements for any missing values.
       * @param {ImputeOptions} [options] Imputation options. The expand
       *  property specifies a set of column values to consider for imputing
       *  missing rows. All combinations of expanded values are considered, and
       *  new rows are added for each combination that does not appear in the
       *  input table.
       * @return {this} A new table with imputed values and/or rows.
       * @example table.impute({ v: () => 0 })
       * @example table.impute({ v: d => op.mean(d.v) })
       * @example table.impute({ v: () => 0 }, { expand: ['x', 'y'] })
       */
      impute(values, options) {
        return this.__impute(this, values, options);
      }

      // -- Reshaping Verbs -----------------------------------------------------

      /**
       * Fold one or more columns into two key-value pair columns.
       * The fold transform is an inverse of the {@link Transformable#pivot} transform.
       * The resulting table has two new columns, one containing the column
       * names (named "key") and the other the column values (named "value").
       * The number of output rows equals the original row count multiplied
       * by the number of folded columns.
       * @param {ExprList} values The columns to fold.
       *  The columns may be specified using column name strings, column index
       *  numbers, value objects with output column names for keys and table
       *  expressions for values, or selection helper functions.
       * @param {FoldOptions} [options] Options for folding.
       * @return {this} A new folded table.
       * @example table.fold('colA')
       * @example table.fold(['colA', 'colB'])
       * @example table.fold(range(5, 8))
       */
      fold(values, options) {
        return this.__fold(this, values, options);
      }

      /**
       * Pivot columns into a cross-tabulation.
       * The pivot transform is an inverse of the {@link Transformable#fold} transform.
       * The resulting table has new columns for each unique combination
       * of the provided *keys*, populated with the provided *values*.
       * The provided *values* must be aggregates, as a single set of keys may
       * include more than one row. If string-valued, the *any* aggregate is used.
       * If only one *values* column is defined, the new pivoted columns will
       * be named using key values directly. Otherwise, input value column names
       * will be included as a component of the output column names.
       * @param {ExprList} keys Key values to map to new column names.
       *  The keys may be specified using column name strings, column index
       *  numbers, value objects with output column names for keys and table
       *  expressions for values, or selection helper functions.
       * @param {ExprList} values Output values for pivoted columns.
       *  Column references will be wrapped in an *any* aggregate.
       *  If object-valued, the input object should have output value
       *  names for keys and aggregate table expressions for values.
       * @param {PivotOptions} [options] Options for pivoting.
       * @return {this} A new pivoted table.
       * @example table.pivot('key', 'value')
       * @example table.pivot(['keyA', 'keyB'], ['valueA', 'valueB'])
       * @example table.pivot({ key: d => d.key }, { value: d => sum(d.value) })
       */
      pivot(keys, values, options) {
        return this.__pivot(this, keys, values, options);
      }

      /**
       * Spread array elements into a set of new columns.
       * Output columns are named based on the value key and array index.
       * @param {ExprList} values The column values to spread.
       *  The values may be specified using column name strings, column index
       *  numbers, value objects with output column names for keys and table
       *  expressions for values, or selection helper functions.
       * @param {SpreadOptions} [options] Options for spreading.
       * @return {this} A new table with the spread columns added.
       * @example table.spread({ a: split(d.text, '') })
       * @example table.spread('arrayCol', { limit: 100 })
       */
      spread(values, options) {
        return this.__spread(this, values, options);
      }

      /**
       * Unroll one or more array-valued columns into new rows.
       * If more than one array value is used, the number of new rows
       * is the smaller of the limit and the largest length.
       * Values for all other columns are copied over.
       * @param {ExprList} values The column values to unroll.
       *  The values may be specified using column name strings, column index
       *  numbers, value objects with output column names for keys and table
       *  expressions for values, or selection helper functions.
       * @param {UnrollOptions} [options] Options for unrolling.
       * @return {this} A new unrolled table.
       * @example table.unroll('colA', { limit: 1000 })
       */
      unroll(values, options) {
        return this.__unroll(this, values, options);
      }

      // -- Joins ---------------------------------------------------------------

      /**
       * Lookup values from a secondary table and add them as new columns.
       * A lookup occurs upon matching key values for rows in both tables.
       * If the secondary table has multiple rows with the same key, only
       * the last observed instance will be considered in the lookup.
       * Lookup is similar to {@link Transformable#join_left}, but with a simpler
       * syntax and the added constraint of allowing at most one match only.
       * @param {TableRef} other The secondary table to look up values from.
       * @param {JoinKeys} [on] Lookup keys (column name strings or table
       *  expressions) for this table and the secondary table, respectively.
       * @param {...ExprList} values The column values to add from the
       *  secondary table. Can be column name strings or objects with column
       *  names as keys and table expressions as values.
       * @return {this} A new table with lookup values added.
       * @example table.lookup(other, ['key1', 'key2'], 'value1', 'value2')
       */
      lookup(other, on, ...values) {
        return this.__lookup(this, other, on, values.flat());
      }

      /**
       * Join two tables, extending the columns of one table with
       * values from the other table. The current table is considered
       * the "left" table in the join, and the new table input is
       * considered the "right" table in the join. By default an inner
       * join is performed, removing all rows that do not match the
       * join criteria. To perform left, right, or full outer joins, use
       * the {@link Transformable#join_left}, {@link Transformable#join_right}, or
       * {@link Transformable#join_full} methods, or provide an options argument.
       * @param {TableRef} other The other (right) table to join with.
       * @param {JoinPredicate} [on] The join criteria for matching table rows.
       *  If unspecified, the values of all columns with matching names
       *  are compared.
       *  If array-valued, a two-element array should be provided, containing
       *  the columns to compare for the left and right tables, respectively.
       *  If a one-element array or a string value is provided, the same
       *  column names will be drawn from both tables.
       *  If function-valued, should be a two-table table expression that
       *  returns a boolean value. When providing a custom predicate, note that
       *  join key values can be arrays or objects, and that normal join
       *  semantics do not consider null or undefined values to be equal (that is,
       *  null !== null). Use the op.equal function to handle these cases.
       * @param {JoinValues} [values] The columns to include in the join output.
       *  If unspecified, all columns from both tables are included; paired
       *  join keys sharing the same column name are included only once.
       *  If array-valued, a two element array should be provided, containing
       *  the columns to include for the left and right tables, respectively.
       *  Array input may consist of column name strings, objects with output
       *  names as keys and single-table table expressions as values, or the
       *  selection helper functions {@link all}, {@link not}, or {@link range}.
       *  If object-valued, specifies the key-value pairs for each output,
       *  defined using two-table table expressions.
       * @param {JoinOptions} [options] Options for the join.
       * @return {this} A new joined table.
       * @example table.join(other, ['keyL', 'keyR'])
       * @example table.join(other, (a, b) => equal(a.keyL, b.keyR))
       */
      join(other, on, values, options) {
        return this.__join(this, other, on, values, options);
      }

      /**
       * Perform a left outer join on two tables. Rows in the left table
       * that do not match a row in the right table will be preserved.
       * This is a convenience method with fixed options for {@link Transformable#join}.
       * @param {TableRef} other The other (right) table to join with.
       * @param {JoinPredicate} [on] The join criteria for matching table rows.
       *  If unspecified, the values of all columns with matching names
       *  are compared.
       *  If array-valued, a two-element array should be provided, containing
       *  the columns to compare for the left and right tables, respectively.
       *  If a one-element array or a string value is provided, the same
       *  column names will be drawn from both tables.
       *  If function-valued, should be a two-table table expression that
       *  returns a boolean value. When providing a custom predicate, note that
       *  join key values can be arrays or objects, and that normal join
       *  semantics do not consider null or undefined values to be equal (that is,
       *  null !== null). Use the op.equal function to handle these cases.
       * @param {JoinValues} [values] The columns to include in the join output.
       *  If unspecified, all columns from both tables are included; paired
       *  join keys sharing the same column name are included only once.
       *  If array-valued, a two element array should be provided, containing
       *  the columns to include for the left and right tables, respectively.
       *  Array input may consist of column name strings, objects with output
       *  names as keys and single-table table expressions as values, or the
       *  selection helper functions {@link all}, {@link not}, or {@link range}.
       *  If object-valued, specifies the key-value pairs for each output,
       *  defined using two-table table expressions.
       * @param {JoinOptions} [options] Options for the join. With this method,
       *  any options will be overridden with {left: true, right: false}.
       * @return {this} A new joined table.
       * @example table.join_left(other, ['keyL', 'keyR'])
       * @example table.join_left(other, (a, b) => equal(a.keyL, b.keyR))
       */
      join_left(other, on, values, options) {
        const opt = { ...options, left: true, right: false };
        return this.__join(this, other, on, values, opt);
      }

      /**
       * Perform a right outer join on two tables. Rows in the right table
       * that do not match a row in the left table will be preserved.
       * This is a convenience method with fixed options for {@link Transformable#join}.
       * @param {TableRef} other The other (right) table to join with.
       * @param {JoinPredicate} [on] The join criteria for matching table rows.
       *  If unspecified, the values of all columns with matching names
       *  are compared.
       *  If array-valued, a two-element array should be provided, containing
       *  the columns to compare for the left and right tables, respectively.
       *  If a one-element array or a string value is provided, the same
       *  column names will be drawn from both tables.
       *  If function-valued, should be a two-table table expression that
       *  returns a boolean value. When providing a custom predicate, note that
       *  join key values can be arrays or objects, and that normal join
       *  semantics do not consider null or undefined values to be equal (that is,
       *  null !== null). Use the op.equal function to handle these cases.
       * @param {JoinValues} [values] The columns to include in the join output.
       *  If unspecified, all columns from both tables are included; paired
       *  join keys sharing the same column name are included only once.
       *  If array-valued, a two element array should be provided, containing
       *  the columns to include for the left and right tables, respectively.
       *  Array input may consist of column name strings, objects with output
       *  names as keys and single-table table expressions as values, or the
       *  selection helper functions {@link all}, {@link not}, or {@link range}.
       *  If object-valued, specifies the key-value pairs for each output,
       *  defined using two-table table expressions.
       * @param {JoinOptions} [options] Options for the join. With this method,
       *  any options will be overridden with {left: false, right: true}.
       * @return {this} A new joined table.
       * @example table.join_right(other, ['keyL', 'keyR'])
       * @example table.join_right(other, (a, b) => equal(a.keyL, b.keyR))
       */
      join_right(other, on, values, options) {
        const opt = { ...options, left: false, right: true };
        return this.__join(this, other, on, values, opt);
      }

      /**
       * Perform a full outer join on two tables. Rows in either the left or
       * right table that do not match a row in the other will be preserved.
       * This is a convenience method with fixed options for {@link Transformable#join}.
       * @param {TableRef} other The other (right) table to join with.
       * @param {JoinPredicate} [on] The join criteria for matching table rows.
       *  If unspecified, the values of all columns with matching names
       *  are compared.
       *  If array-valued, a two-element array should be provided, containing
       *  the columns to compare for the left and right tables, respectively.
       *  If a one-element array or a string value is provided, the same
       *  column names will be drawn from both tables.
       *  If function-valued, should be a two-table table expression that
       *  returns a boolean value. When providing a custom predicate, note that
       *  join key values can be arrays or objects, and that normal join
       *  semantics do not consider null or undefined values to be equal (that is,
       *  null !== null). Use the op.equal function to handle these cases.
       * @param {JoinValues} [values] The columns to include in the join output.
       *  If unspecified, all columns from both tables are included; paired
       *  join keys sharing the same column name are included only once.
       *  If array-valued, a two element array should be provided, containing
       *  the columns to include for the left and right tables, respectively.
       *  Array input may consist of column name strings, objects with output
       *  names as keys and single-table table expressions as values, or the
       *  selection helper functions {@link all}, {@link not}, or {@link range}.
       *  If object-valued, specifies the key-value pairs for each output,
       *  defined using two-table table expressions.
       * @param {JoinOptions} [options] Options for the join. With this method,
       *  any options will be overridden with {left: true, right: true}.
       * @return {this} A new joined table.
       * @example table.join_full(other, ['keyL', 'keyR'])
       * @example table.join_full(other, (a, b) => equal(a.keyL, b.keyR))
       */
      join_full(other, on, values, options) {
        const opt = { ...options, left: true, right: true };
        return this.__join(this, other, on, values, opt);
      }

      /**
       * Produce the Cartesian cross product of two tables. The output table
       * has one row for every pair of input table rows. Beware that outputs
       * may be quite large, as the number of output rows is the product of
       * the input row counts.
       * This is a convenience method for {@link Transformable#join} in which the
       * join criteria is always true.
       * @param {TableRef} other The other (right) table to join with.
       * @param {JoinValues} [values] The columns to include in the output.
       *  If unspecified, all columns from both tables are included.
       *  If array-valued, a two element array should be provided, containing
       *  the columns to include for the left and right tables, respectively.
       *  Array input may consist of column name strings, objects with output
       *  names as keys and single-table table expressions as values, or the
       *  selection helper functions {@link all}, {@link not}, or {@link range}.
       *  If object-valued, specifies the key-value pairs for each output,
       *  defined using two-table table expressions.
       * @param {JoinOptions} [options] Options for the join.
       * @return {this} A new joined table.
       * @example table.cross(other)
       * @example table.cross(other, [['leftKey', 'leftVal'], ['rightVal']])
       */
      cross(other, values, options) {
        return this.__cross(this, other, values, options);
      }

      /**
       * Perform a semi-join, filtering the left table to only rows that
       * match a row in the right table.
       * @param {TableRef} other The other (right) table to join with.
       * @param {JoinPredicate} [on] The join criteria for matching table rows.
       *  If unspecified, the values of all columns with matching names
       *  are compared.
       *  If array-valued, a two-element array should be provided, containing
       *  the columns to compare for the left and right tables, respectively.
       *  If a one-element array or a string value is provided, the same
       *  column names will be drawn from both tables.
       *  If function-valued, should be a two-table table expression that
       *  returns a boolean value. When providing a custom predicate, note that
       *  join key values can be arrays or objects, and that normal join
       *  semantics do not consider null or undefined values to be equal (that is,
       *  null !== null). Use the op.equal function to handle these cases.
       * @return {this} A new filtered table.
       * @example table.semijoin(other)
       * @example table.semijoin(other, ['keyL', 'keyR'])
       * @example table.semijoin(other, (a, b) => equal(a.keyL, b.keyR))
       */
      semijoin(other, on) {
        return this.__semijoin(this, other, on);
      }

      /**
       * Perform an anti-join, filtering the left table to only rows that
       * do *not* match a row in the right table.
       * @param {TableRef} other The other (right) table to join with.
       * @param {JoinPredicate} [on] The join criteria for matching table rows.
       *  If unspecified, the values of all columns with matching names
       *  are compared.
       *  If array-valued, a two-element array should be provided, containing
       *  the columns to compare for the left and right tables, respectively.
       *  If a one-element array or a string value is provided, the same
       *  column names will be drawn from both tables.
       *  If function-valued, should be a two-table table expression that
       *  returns a boolean value. When providing a custom predicate, note that
       *  join key values can be arrays or objects, and that normal join
       *  semantics do not consider null or undefined values to be equal (that is,
       *  null !== null). Use the op.equal function to handle these cases.
       * @return {this} A new filtered table.
       * @example table.antijoin(other)
       * @example table.antijoin(other, ['keyL', 'keyR'])
       * @example table.antijoin(other, (a, b) => equal(a.keyL, b.keyR))
       */
      antijoin(other, on) {
        return this.__antijoin(this, other, on);
      }

      // -- Set Operations ------------------------------------------------------

      /**
       * Concatenate multiple tables into a single table, preserving all rows.
       * This transformation mirrors the UNION_ALL operation in SQL.
       * Only named columns in this table are included in the output.
       * @see Transformable#union
       * @param  {...TableRef} tables A list of tables to concatenate.
       * @return {this} A new concatenated table.
       * @example table.concat(other)
       * @example table.concat(other1, other2)
       * @example table.concat([other1, other2])
       */
      concat(...tables) {
        return this.__concat(this, tables.flat());
      }

      /**
       * Union multiple tables into a single table, deduplicating all rows.
       * This transformation mirrors the UNION operation in SQL. It is
       * similar to {@link Transformable#concat} but suppresses duplicate rows with
       * values identical to another row.
       * Only named columns in this table are included in the output.
       * @see Transformable#concat
       * @param  {...TableRef} tables A list of tables to union.
       * @return {this} A new unioned table.
       * @example table.union(other)
       * @example table.union(other1, other2)
       * @example table.union([other1, other2])
       */
      union(...tables) {
        return this.__union(this, tables.flat());
      }

      /**
       * Intersect multiple tables, keeping only rows whose with identical
       * values for all columns in all tables, and deduplicates the rows.
       * This transformation is similar to a series of {@link Transformable#semijoin}
       * calls, but additionally suppresses duplicate rows.
       * @see Transformable#semijoin
       * @param  {...TableRef} tables A list of tables to intersect.
       * @return {this} A new filtered table.
       * @example table.intersect(other)
       * @example table.intersect(other1, other2)
       * @example table.intersect([other1, other2])
       */
      intersect(...tables) {
        return this.__intersect(this, tables.flat());
      }

      /**
       * Compute the set difference with multiple tables, keeping only rows in
       * this table that whose values do not occur in the other tables.
       * This transformation is similar to a series of {@link Transformable#antijoin}
       * calls, but additionally suppresses duplicate rows.
       * @see Transformable#antijoin
       * @param  {...TableRef} tables A list of tables to difference.
       * @return {this} A new filtered table.
       * @example table.except(other)
       * @example table.except(other1, other2)
       * @example table.except([other1, other2])
       */
      except(...tables) {
        return this.__except(this, tables.flat());
      }
    }

    // -- Parameter Types -------------------------------------------------------

    /**
     * Table expression parameters.
     * @typedef {Object.<string, *>} Params
     */

    /**
     * A reference to a column by string name or integer index.
     * @typedef {string|number} ColumnRef
     */

    /**
     * A value that can be coerced to a string.
     * @typedef {object} Stringable
     * @property {() => string} toString String coercion method.
     */

    /**
     * A table expression provided as a string or string-coercible value.
     * @typedef {string|Stringable} TableExprString
     */

    /**
     * A struct object with arbitraty named properties.
     * @typedef {Object.<string, *>} Struct
     */

    /**
     * A function defined over a table row.
     * @typedef {(d?: Struct, $?: Params) => any} TableExprFunc
     */

    /**
     * A table expression defined over a single table.
     * @typedef {TableExprFunc|TableExprString} TableExpr
     */

    /**
     * A function defined over rows from two tables.
     * @typedef {(a?: Struct, b?: Struct, $?: Params) => any} TableFunc2
     */

    /**
     * A table expression defined over two tables.
     * @typedef {TableExprFunc2|TableExprString} TableExpr2
     */

    /**
     * An object that maps current column names to new column names.
     * @typedef {{ [name: string]: string }} RenameMap
     */

    /**
     * A selection helper function.
     * @typedef {(table: any) => string[]} SelectHelper
     */

    /**
     * One or more column selections, potentially with renaming.
     * The input may consist of a column name string, column integer index, a
     * rename map object with current column names as keys and new column names
     * as values, or a select helper function that takes a table as input and
     * returns a valid selection parameter.
     * @typedef {ColumnRef|RenameMap|SelectHelper} SelectEntry
     */

    /**
     * An ordered set of column selections, potentially with renaming.
     * @typedef {SelectEntry|SelectEntry[]} Select
     */

    /**
     * An object of column name / table expression pairs.
     * @typedef {{ [name: string]: TableExpr }} ExprObject
     */

    /**
     * An object of column name / two-table expression pairs.
     * @typedef {{ [name: string]: TableExpr2 }} Expr2Object
     */

    /**
     * An ordered set of one or more column values.
     * @typedef {ColumnRef|SelectHelper|ExprObject} ListEntry
     */

    /**
     * An ordered set of column values.
     * Entries may be column name strings, column index numbers, value objects
     * with output column names for keys and table expressions for values,
     * or a selection helper function.
     * @typedef {ListEntry|ListEntry[]} ExprList
     */

    /**
     * A reference to a data table or transformable instance.
     * @typedef {Transformable|string} TableRef
     */

    /**
     * One or more orderby sort criteria.
     * If a string, order by the column with that name.
     * If a number, order by the column with that index.
     * If a function, must be a valid table expression; aggregate functions
     *  are permitted, but window functions are not.
     * If an object, object values must be valid values parameters
     *  with output column names for keys and table expressions
     *  for values. The output name keys will subsequently be ignored.
     * @typedef {ColumnRef|TableExpr|ExprObject} OrderKey
     */

    /**
     * An ordered set of orderby sort criteria, in precedence order.
     * @typedef {OrderKey|OrderKey[]} OrderKeys
     */

    /**
     * Column values to use as a join key.
     * @typedef {ColumnRef|TableExprFunc} JoinKey
     */

    /**
     * An ordered set of join keys.
     * @typedef {JoinKey|[JoinKey[]]|[JoinKey[], JoinKey[]]} JoinKeys
     */

    /**
     * A predicate specification for joining two tables.
     * @typedef {JoinKeys|TableExprFunc2|null} JoinPredicate
     */

    /**
     * An array of per-table join values to extract.
     * @typedef {[ExprList]|[ExprList, ExprList]|[ExprList, ExprList, Expr2Object]} JoinList
     */

    /**
     * A specification of join values to extract.
     * @typedef {JoinList|Expr2Object} JoinValues
     */

    // -- Transform Options -----------------------------------------------------

    /**
     * Options for count transformations.
     * @typedef {object} CountOptions
     * @property {string} [as='count'] The name of the output count column.
     */

    /**
     * Options for derive transformations.
     * @typedef {object} DeriveOptions
     * @property {boolean} [drop=false] A flag indicating if the original
     *  columns should be dropped, leaving only the derived columns. If true,
     *  the before and after options are ignored.
     * @property {Select} [before]
     *  An anchor column that relocated columns should be placed before.
     *  The value can be any legal column selection. If multiple columns are
     *  selected, only the first column will be used as an anchor.
     *  It is an error to specify both before and after options.
     * @property {Select} [after]
     *  An anchor column that relocated columns should be placed after.
     *  The value can be any legal column selection. If multiple columns are
     *  selected, only the last column will be used as an anchor.
     *  It is an error to specify both before and after options.
     */

    /**
     * Options for relocate transformations.
     * @typedef {object} RelocateOptions
     * @property {Selection} [before]
     *  An anchor column that relocated columns should be placed before.
     *  The value can be any legal column selection. If multiple columns are
     *  selected, only the first column will be used as an anchor.
     *  It is an error to specify both before and after options.
     * @property {Selection} [after]
     *  An anchor column that relocated columns should be placed after.
     *  The value can be any legal column selection. If multiple columns are
     *  selected, only the last column will be used as an anchor.
     *  It is an error to specify both before and after options.
     */

    /**
     * Options for sample transformations.
     * @typedef {object} SampleOptions
     * @property {boolean} [replace=false] Flag for sampling with replacement.
     * @property {boolean} [shuffle=true] Flag to ensure randomly ordered rows.
     * @property {string|TableExprFunc} [weight] Column values to use as weights
     *  for sampling. Rows will be sampled with probability proportional to
     *  their relative weight. The input should be a column name string or
     *  a table expression compatible with {@link Transformable#derive}.
     */

    /**
     * Options for impute transformations.
     * @typedef {object} ImputeOptions
     * @property {ExprList} [expand] Column values to combine to impute missing
     *  rows. For column names and indices, all unique column values are
     *  considered. Otherwise, each entry should be an object of name-expresion
     *  pairs, with valid table expressions for {@link Transformable#rollup}.
     *  All combinations of values are checked for each set of unique groupby
     *  values.
     */

    /**
     * Options for fold transformations.
     * @typedef {object} FoldOptions
     * @property {string[]} [as=['key', 'value']] An array indicating the
     *  output column names to use for the key and value columns, respectively.
     */

    /**
     * Options for pivot transformations.
     * @typedef {object} PivotOptions
     * @property {number} [limit=Infinity] The maximum number of new columns to generate.
     * @property {string} [keySeparator='_'] A string to place between multiple key names.
     * @property {string} [valueSeparator='_'] A string to place between key and value names.
     * @property {boolean} [sort=true] Flag for alphabetical sorting of new column names.
     */

    /**
     * Options for spread transformations.
     * @typedef {object} SpreadOptions
     * @property {boolean} [drop=true] Flag indicating if input columns to the
     *  spread operation should be dropped in the output table.
     * @property {number} [limit=Infinity] The maximum number of new columns to
     *  generate.
     * @property {string[]} [as] Output column names to use. This option only
     *  applies when a single column is spread. If the given array of names is
     *  shorter than the number of generated columns and no limit option is
     *  specified, the additional generated columns will be dropped.
     */

    /**
     * Options for unroll transformations.
     * @typedef {object} UnrollOptions
     * @property {number} [limit=Infinity] The maximum number of new rows
     *  to generate per array value.
     * @property {boolean|string} [index=false] Flag or column name for adding
     *  zero-based array index values as an output column. If true, a new column
     *  named "index" will be included. If string-valued, a new column with
     *  the given name will be added.
     * @property {Select} [drop] Columns to drop from the output. The input may
     *  consist of column name strings, column integer indices, objects with
     *  column names as keys, or functions that take a table as input and
     *  return a valid selection parameter (typically the output of selection
     *  helper functions such as {@link all}, {@link not}, or {@link range}).
     */

    /**
     * Options for join transformations.
     * @typedef {object} JoinOptions
     * @property {boolean} [left=false] Flag indicating a left outer join.
     *  If both the *left* and *right* are true, indicates a full outer join.
     * @property {boolean} [right=false] Flag indicating a right outer join.
     *  If both the *left* and *right* are true, indicates a full outer join.
     * @property {string[]} [suffix=['_1', '_2']] Column name suffixes to
     *  append if two columns with the same name are produced by the join.
     */

    function error(message) {
      throw Error(message);
    }

    function isNumber(value) {
      return typeof value === 'number';
    }

    function isFunction(value) {
      return typeof value === 'function';
    }

    function repeat(reps, value) {
      const result = Array(reps);
      if (isFunction(value)) {
        for (let i = 0; i < reps; ++i) {
          result[i] = value(i);
        }
      } else {
        result.fill(value);
      }
      return result;
    }

    /**
     * Abstract class representing a data table.
     */
    class Table extends Transformable {

      /**
       * Instantiate a new Table instance.
       * @param {string[]} names An ordered list of column names.
       * @param {number} nrows The number of rows.
       * @param {TableData} data The backing data, which can vary by implementation.
       * @param {BitSet} [filter] A bit mask for which rows to include.
       * @param {GroupBySpec} [groups] A groupby specification for grouping ows.
       * @param {RowComparator} [order] A comparator function for sorting rows.
       * @param {Params} [params] Parameter values for table expressions.
       */
      constructor(names, nrows, data, filter, groups, order, params) {
        super(params);
        this._names = Object.freeze(names);
        this._data = data;
        this._total = nrows;
        this._nrows = filter ? filter.count() : nrows;
        this._mask = (nrows !== this._nrows && filter) || null;
        this._group = groups || null;
        this._order = order || null;
      }

      /**
       * Create a new table with the same type as this table.
       * The new table may have different data, filter, grouping, or ordering
       * based on the values of the optional configuration argument. If a
       * setting is not specified, it is inherited from the current table.
       * @param {CreateOptions} [options] Creation options for the new table.
       * @return {this} A newly created table.
       */
      create(options) { // eslint-disable-line no-unused-vars
        error('Not implemented');
      }

      /**
       * Provide an informative object string tag.
       */
      get [Symbol.toStringTag]() {
        if (!this._names) return 'Object'; // bail if called on prototype
        const nr = this.numRows() + ' row' + (this.numRows() !== 1 ? 's' : '');
        const nc = this.numCols() + ' col' + (this.numCols() !== 1 ? 's' : '');
        return `Table: ${nc} x ${nr}`
          + (this.isFiltered() ? ` (${this.totalRows()} backing)` : '')
          + (this.isGrouped() ? `, ${this._group.size} groups` : '')
          + (this.isOrdered() ? ', ordered' : '');
      }

      /**
       * Indicates if the table has a filter applied.
       * @return {boolean} True if filtered, false otherwise.
       */
      isFiltered() {
        return !!this._mask;
      }

      /**
       * Indicates if the table has a groupby specification.
       * @return {boolean} True if grouped, false otherwise.
       */
      isGrouped() {
        return !!this._group;
      }

      /**
       * Indicates if the table has a row order comparator.
       * @return {boolean} True if ordered, false otherwise.
       */
      isOrdered() {
        return !!this._order;
      }

      /**
       * Returns the internal table storage data structure.
       * @return {TableData} The backing table storage data structure.
       */
      data() {
        return this._data;
      }

      /**
       * Returns the filter bitset mask, if defined.
       * @return {BitSet} The filter bitset mask.
       */
      mask() {
        return this._mask;
      }

      /**
       * Returns the groupby specification, if defined.
       * @return {GroupBySpec} The groupby specification.
       */
      groups() {
        return this._group;
      }

      /**
       * Returns the row order comparator function, if specified.
       * @return {RowComparator} The row order comparator function.
       */
      comparator() {
        return this._order;
      }

      /**
       * The total number of rows in this table, counting both
       * filtered and unfiltered rows.
       * @return {number} The number of total rows.
       */
      totalRows() {
        return this._total;
      }

      /**
       * The number of active rows in this table. This number may be
       * less than the total rows if the table has been filtered.
       * @see Table.totalRows
       * @return {number} The number of rows.
       */
      numRows() {
        return this._nrows;
      }

      /**
       * The number of active rows in this table. This number may be
       * less than the total rows if the table has been filtered.
       * @see Table.totalRows
       * @return {number} The number of rows.
       */
      get size() {
        return this._nrows;
      }

      /**
       * The number of columns in this table.
       * @return {number} The number of columns.
       */
      numCols() {
        return this._names.length;
      }

      /**
       * Filter function invoked for each column name.
       * @callback NameFilter
       * @param {string} name The column name.
       * @param {number} index The column index.
       * @param {string[]} array The array of names.
       * @return {boolean} Returns true to retain the column name.
       */

      /**
       * The table column names, optionally filtered.
       * @param {NameFilter} [filter] An optional filter function.
       *  If unspecified, all column names are returned.
       * @return {string[]} An array of matching column names.
       */
      columnNames(filter) {
        return filter ? this._names.filter(filter) : this._names.slice();
      }

      /**
       * The column name at the given index.
       * @param {number} index The column index.
       * @return {string} The column name,
       *  or undefined if the index is out of range.
       */
      columnName(index) {
        return this._names[index];
      }

      /**
       * The column index for the given name.
       * @param {string} name The column name.
       * @return {number} The column index, or -1 if the name is not found.
       */
      columnIndex(name) {
        return this._names.indexOf(name);
      }

      /**
       * Deprecated alias for the table array() method: use table.array()
       * instead. Get an array of values contained in a column. The resulting
       * array respects any table filter or orderby criteria.
       * @param {string} name The column name.
       * @param {ArrayConstructor|TypedArrayConstructor} [constructor=Array]
       *  The array constructor for instantiating the output array.
       * @return {DataValue[]|TypedArray} The array of column values.
       */
      columnArray(name, constructor) {
        return this.array(name, constructor);
      }

      /**
       * Get an array of values contained in a column. The resulting array
       * respects any table filter or orderby criteria.
       * @param {string} name The column name.
       * @param {ArrayConstructor|TypedArrayConstructor} [constructor=Array]
       *  The array constructor for instantiating the output array.
       * @return {DataValue[]|TypedArray} The array of column values.
       */
      array(name, constructor) { // eslint-disable-line no-unused-vars
        error('Not implemented');
      }

      /**
       * Returns an iterator over column values.
       * @return {Iterator<object>} An iterator over row objects.
       */
      *values(name) {
        const get = this.getter(name);
        const n = this.numRows();
        for (let i = 0; i < n; ++i) {
          yield get(i);
        }
      }

      /**
       * Get the value for the given column and row.
       * @param {string} name The column name.
       * @param {number} [row=0] The row index, defaults to zero if not specified.
       * @return {DataValue} The data value at (column, row).
       */
      get(name, row = 0) { // eslint-disable-line no-unused-vars
        error('Not implemented');
      }

      /**
       * Returns an accessor ("getter") function for a column. The returned
       * function takes a row index as its single argument and returns the
       * corresponding column value.
       * @param {string} name The column name.
       * @return {ColumnGetter} The column getter function.
       */
      getter(name) { // eslint-disable-line no-unused-vars
        error('Not implemented');
      }

      /**
       * Returns an array of objects representing table rows.
       * @param {ObjectsOptions} [options] The options for row object generation.
       * @return {RowObject[]} An array of row objects.
       */
      objects(options) { // eslint-disable-line no-unused-vars
        error('Not implemented');
      }

      /**
       * Returns an object representing a table row.
       * @param {number} [row=0] The row index, defaults to zero if not specified.
       * @return {object} A row object with named properties for each column.
       */
       object(row) { // eslint-disable-line no-unused-vars
        error('Not implemented');
      }

      /**
       * Returns an iterator over objects representing table rows.
       * @return {Iterator<object>} An iterator over row objects.
       */
      [Symbol.iterator]() {
        error('Not implemented');
      }

      /**
       * Print the contents of this table using the console.table() method.
       * @param {PrintOptions|number} options The options for row object
       *  generation, determining which rows and columns are printed. If
       *  number-valued, specifies the row limit.
       * @return {this} The table instance.
       */
      print(options = {}) {
        if (isNumber(options)) {
          options = { limit: options };
        } else if (options.limit == null) {
          options.limit = 10;
        }

        const obj = this.objects({ ...options, grouped: false });
        const msg = `${this[Symbol.toStringTag]}. Showing ${obj.length} rows.`;

        console.log(msg);   // eslint-disable-line no-console
        console.table(obj); // eslint-disable-line no-console
        return this;
      }

      /**
       * Returns an array of indices for all rows passing the table filter.
       * @param {boolean} [order=true] A flag indicating if the returned
       *  indices should be sorted if this table is ordered. If false, the
       *  returned indices may or may not be sorted.
       * @return {Uint32Array} An array of row indices.
       */
      indices(order = true) {
        if (this._index) return this._index;

        const n = this.numRows();
        const index = new Uint32Array(n);
        const ordered = this.isOrdered();
        const bits = this.mask();
        let row = -1;

        // inline the following for performance:
        // this.scan(row => index[++i] = row);
        if (bits) {
          for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {
            index[++row] = i;
          }
        } else {
          for (let i = 0; i < n; ++i) {
            index[++row] = i;
          }
        }

        // sort index vector
        if (order && ordered) {
          const compare = this._order;
          const data = this._data;
          index.sort((a, b) => compare(a, b, data));
        }

        // save indices if they reflect table metadata
        if (order || !ordered) {
          this._index = index;
        }

        return index;
      }

      /**
       * Returns an array of indices for each group in the table.
       * If the table is not grouped, the result is the same as
       * {@link indices}, but wrapped within an array.
       * @param {boolean} [order=true] A flag indicating if the returned
       *  indices should be sorted if this table is ordered. If false, the
       *  returned indices may or may not be sorted.
       * @return {number[][]} An array of row index arrays, one per group.
       *  The indices will be filtered if the table is filtered.
       */
      partitions(order = true) {
        // return partitions if already generated
        if (this._partitions) {
          return this._partitions;
        }

        // if not grouped, return a single partition
        if (!this.isGrouped()) {
          return [ this.indices(order) ];
        }

        // generate partitions
        const { keys, size } = this._group;
        const part = repeat(size, () => []);

        // populate partitions, don't sort if indices don't exist
        // inline the following for performance:
        // this.scan(row => part[keys[row]].push(row), sort);
        const sort = this._index;
        const bits = this.mask();
        const n = this.numRows();
        if (sort && this.isOrdered()) {
          for (let i = 0, r; i < n; ++i) {
            r = sort[i];
            part[keys[r]].push(r);
          }
        } else if (bits) {
          for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {
            part[keys[i]].push(i);
          }
        } else {
          for (let i = 0; i < n; ++i) {
            part[keys[i]].push(i);
          }
        }

        // if ordered but not yet sorted, sort partitions directly
        if (order && !sort && this.isOrdered()) {
          const compare = this._order;
          const data = this._data;
          for (let i = 0; i < size; ++i) {
            part[i].sort((a, b) => compare(a, b, data));
          }
        }

        // save partitions if they reflect table metadata
        if (order || !this.isOrdered()) {
          this._partitions = part;
        }

        return part;
      }

      /**
       * Callback function to cancel a table scan.
       * @callback ScanStop
       * @return {void}
       */

      /**
       * Callback function invoked for each row of a table scan.
       * @callback ScanVisitor
       * @param {number} [row] The table row index.
       * @param {TableData} [data] The backing table data store.
       * @param {ScanStop} [stop] Function to stop the scan early.
       *  Callees can invoke this function to prevent future calls.
       * @return {void}
       */

      /**
       * Perform a table scan, visiting each row of the table.
       * If this table is filtered, only rows passing the filter are visited.
       * @param {ScanVisitor} fn Callback invoked for each row of the table.
       * @param {boolean} [order=false] Indicates if the table should be
       *  scanned in the order determined by {@link Table#orderby}. This
       *  argument has no effect if the table is unordered.
       * @property {number} [limit=Infinity] The maximum number of objects to create.
       * @property {number} [offset=0] The row offset indicating how many initial rows to skip.
       */
      scan(fn, order, limit = Infinity, offset = 0) {
        const filter = this._mask;
        const nrows = this._nrows;
        const data = this._data;

        let i = offset || 0;
        if (i > nrows) return;

        const n = Math.min(nrows, i + limit);
        const stop = () => i = this._total;

        if (order && this.isOrdered() || filter && this._index) {
          const index = this.indices();
          const data = this._data;
          for (; i < n; ++i) {
            fn(index[i], data, stop);
          }
        } else if (filter) {
          let c = n - i + 1;
          for (i = filter.nth(i); --c && i > -1; i = filter.next(i + 1)) {
            fn(i, data, stop);
          }
        } else {
          for (; i < n; ++i) {
            fn(i, data, stop);
          }
        }
      }

      /**
       * Extract rows with indices from start to end (end not included), where
       * start and end represent per-group ordered row numbers in the table.
       * @param {number} [start] Zero-based index at which to start extraction.
       *  A negative index indicates an offset from the end of the group.
       *  If start is undefined, slice starts from the index 0.
       * @param {number} [end] Zero-based index before which to end extraction.
       *  A negative index indicates an offset from the end of the group.
       *  If end is omitted, slice extracts through the end of the group.
       * @return {this} A new table with sliced rows.
       * @example table.slice(1, -1)
       */
      slice(start = 0, end = Infinity) {
        if (this.isGrouped()) return super.slice(start, end);

        // if not grouped, scan table directly
        const indices = [];
        const nrows = this.numRows();
        start = Math.max(0, start + (start < 0 ? nrows : 0));
        end = Math.min(nrows, Math.max(0, end + (end < 0 ? nrows : 0)));
        this.scan(row => indices.push(row), true, end - start, start);
        return this.reify(indices);
      }

      /**
       * Reduce a table, processing all rows to produce a new table.
       * To produce standard aggregate summaries, use {@link rollup}.
       * This method allows the use of custom reducer implementations,
       * for example to produce multiple rows for an aggregate.
       * @param {Reducer} reducer The reducer to apply.
       * @return {Table} A new table of reducer outputs.
       */
      reduce(reducer) {
        return this.__reduce(this, reducer);
      }
    }

    /**
     * A typed array constructor.
     * @typedef {Uint8ArrayConstructor|Uint16ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor|Int8ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|Float32ArrayConstructor|Float64ArrayConstructor} TypedArrayConstructor
     */

    /**
     * A typed array instance.
     * @typedef {Uint8Array|Uint16Array|Uint32Array|BigUint64Array|Int8Array|Int16Array|Int32Array|BigInt64Array|Float32Array|Float64Array} TypedArray
     */

    /**
     * Backing table data.
     * @typedef {object|Array} TableData
     */

    /**
     * Table value.
     * @typedef {*} DataValue
     */

    /**
     * Table row object.
     * @typedef {Object.<string, DataValue>} RowObject
     */

    /**
     * Table expression parameters.
     * @typedef {import('./transformable').Params} Params
     */

    /**
     * Proxy type for BitSet class.
     * @typedef {import('./bit-set').default} BitSet
     */

    /**
     * A table groupby specification.
     * @typedef {object} GroupBySpec
     * @property {number} size The number of groups.
     * @property {string[]} names Column names for each group.
     * @property {RowExpression[]} get Value accessor functions for each group.
     * @property {number[]} rows Indices of an example table row for each group.
     * @property {number[]} keys Per-row group indices, length is total rows of table.
     */

    /**
     * Column value accessor.
     * @callback ColumnGetter
     * @param {number} [row] The table row.
     * @return {DataValue}
     */

    /**
     * An expression evaluated over a table row.
     * @callback RowExpression
     * @param {number} [row] The table row.
     * @param {TableData} [data] The backing table data store.
     * @return {DataValue}
     */

    /**
     * Comparator function for sorting table rows.
     * @callback RowComparator
     * @param {number} rowA The table row index for the first row.
     * @param {number} rowB The table row index for the second row.
     * @param {TableData} data The backing table data store.
     * @return {number} Negative if rowA < rowB, positive if
     *  rowA > rowB, otherwise zero.
     */

    /**
     * Options for derived table creation.
     * @typedef {object} CreateOptions
     * @property {TableData} [data] The backing column data.
     * @property {string[]} [names] An ordered list of column names.
     * @property {BitSet} [filter] An additional filter BitSet to apply.
     * @property {GroupBySpec} [groups] The groupby specification to use, or null for no groups.
     * @property {RowComparator} [order] The orderby comparator function to use, or null for no order.
     */

    /**
     * Options for generating row objects.
     * @typedef {object} PrintOptions
     * @property {number} [limit=Infinity] The maximum number of objects to create.
     * @property {number} [offset=0] The row offset indicating how many initial rows to skip.
     * @property {import('../table/transformable').Select} [columns]
     *  An ordered set of columns to include. The input may consist of column name
     *  strings, column integer indices, objects with current column names as keys
     *  and new column names as values (for renaming), or selection helper
     *  functions such as {@link all}, {@link not}, or {@link range}.
     */

    /**
     * Options for generating row objects.
     * @typedef {object} ObjectsOptions
     * @property {number} [limit=Infinity] The maximum number of objects to create.
     * @property {number} [offset=0] The row offset indicating how many initial rows to skip.
     * @property {import('../table/transformable').Select} [columns]
     *  An ordered set of columns to include. The input may consist of column name
     *  strings, column integer indices, objects with current column names as keys
     *  and new column names as values (for renaming), or selection helper
     *  functions such as {@link all}, {@link not}, or {@link range}.
     * @property {'map'|'entries'|'object'|boolean} [grouped=false]
     *  The export format for groups of rows. The default (false) is to ignore
     *  groups, returning a flat array of objects. The valid values are 'map' or
     *  true (for Map instances), 'object' (for standard objects), or 'entries'
     *  (for arrays in the style of Object.entries). For the 'object' format,
     *  groupby keys are coerced to strings to use as object property names; note
     *  that this can lead to undesirable behavior if the groupby keys are object
     *  values. The 'map' and 'entries' options preserve the groupby key values.
     */

    /**
     * Class representing an array-backed data column.
     */
    class Column {
      /**
       * Create a new column instance.
       * @param {Array} data The backing array (or array-like object)
       *  containing the column data.
       */
      constructor(data) {
        this.data = data;
      }

      /**
       * Get the length (number of rows) of the column.
       * @return {number} The length of the column array.
       */
      get length() {
        return this.data.length;
      }

      /**
       * Get the column value at the given row index.
       * @param {number} row The row index of the value to retrieve.
       * @return {import('./table').DataValue} The column value.
       */
      get(row) {
        return this.data[row];
      }

      /**
       * Returns an iterator over the column values.
       * @return {Iterator<object>} An iterator over column values.
       */
      [Symbol.iterator]() {
        return this.data[Symbol.iterator]();
      }
    }

    /**
     * Column interface. Any object that adheres to this interface
     * can be used as a data column within a {@link ColumnTable}.
     * @typedef {object} ColumnType
     * @property {number} length
     *  The length (number of rows) of the column.
     * @property {import('./table').ColumnGetter} get
     *  Column value getter.
     */

    /**
     * Column factory function interface.
     * @callback ColumnFactory
     * @param {*} data The input column data.
     * @return {ColumnType} A column instance.
     */

    /**
     * Create a new column from the given input data.
     * @param {any} data The backing column data. If the value conforms to
     *  the Column interface it is returned directly. If the value is an
     *  array, it will be wrapped in a new Column instance.
     * @return {ColumnType} A compatible column instance.
     */
    let defaultColumnFactory = function(data) {
      return data && isFunction(data.get) ? data : new Column(data);
    };

    /**
     * Get or set the default factory function for instantiating table columns.
     * @param {ColumnFactory} [factory] The new default factory.
     * @return {ColumnFactory} The current default column factory.
     */
    function columnFactory(factory) {
      return arguments.length
        ? (defaultColumnFactory = factory)
        : defaultColumnFactory;
    }

    function isDate(value) {
      return value instanceof Date;
    }

    function isObject(value) {
      return value === Object(value);
    }

    function isRegExp(value) {
      return value instanceof RegExp;
    }

    function isString(value) {
      return typeof value === 'string';
    }

    function columnsFrom(values, names) {
      const raise = type => error(`Illegal argument type: ${type || typeof values}`);
      return values instanceof Map ? fromKeyValuePairs(values.entries(), names)
        : isDate(values) ? raise('Date')
        : isRegExp(values) ? raise('RegExp')
        : isString(values) ? raise()
        : isArray(values) ? fromArray(values, names)
        : isFunction(values[Symbol.iterator]) ? fromIterable(values, names)
        : isObject(values) ? fromKeyValuePairs(Object.entries(values), names)
        : raise();
    }

    function fromKeyValuePairs(entries, names = ['key', 'value']) {
      const keys = [];
      const vals = [];

      for (const [key, val] of entries) {
        keys.push(key);
        vals.push(val);
      }

      const columns = {};
      if (names[0]) columns[names[0]] = keys;
      if (names[1]) columns[names[1]] = vals;
      return columns;
    }

    function fromArray(values, names) {
      const len = values.length;
      const columns = {};
      const add = name => columns[name] = Array(len);

      if (len) {
        names = names || Object.keys(values[0]);
        const cols = names.map(add);
        const n = cols.length;
        for (let idx = 0; idx < len; ++idx) {
          const row = values[idx];
          for (let i = 0; i < n; ++i) {
            cols[i][idx] = row[names[i]];
          }
        }
      } else if (names) {
        names.forEach(add);
      }

      return columns;
    }

    function fromIterable(values, names) {
      const columns = {};
      const add = name => columns[name] = [];

      let cols;
      let n;
      for (const row of values) {
        if (!cols) {
          names = names || Object.keys(row);
          cols = names.map(add);
          n = cols.length;
        }
        for (let i = 0; i < n; ++i) {
          cols[i].push(row[names[i]]);
        }
      }

      if (!cols && names) {
        names.forEach(add);
      }

      return columns;
    }

    const { hasOwnProperty } = Object.prototype;

    function has(object, property) {
      return hasOwnProperty.call(object, property);
    }

    function columnSet(table) {
      return table
        ? new ColumnSet({ ...table.data() }, table.columnNames())
        : new ColumnSet();
    }

    class ColumnSet {
      constructor(data, names) {
        this.data = data || {};
        this.names = names || [];
      }

      add(name, values) {
        if (!this.has(name)) this.names.push(name + '');
        return this.data[name] = values;
      }

      has(name) {
        return has(this.data, name);
      }

      new() {
        this.filter = null;
        this.groups = this.groups || null;
        this.order = null;
        return this;
      }

      groupby(groups) {
        this.groups = groups;
        return this;
      }
    }

    /**
     * Default NULL (missing) value to use.
     */
    var NULL = undefined;

    const TypedArray = Object.getPrototypeOf(Int8Array);

    function isTypedArray(value) {
      return value instanceof TypedArray;
    }

    function isArrayType(value) {
      return isArray(value) || isTypedArray(value);
    }

    function isValid(value) {
      return value != null && value === value;
    }

    const isSeq = (seq) => isArrayType(seq) || isString(seq);

    var array$1 = {
      compact:      (arr) => isArrayType(arr) ? arr.filter(v => isValid(v)) : arr,
      concat:       (...values) => [].concat(...values),
      includes:     (seq, value, index) => isSeq(seq)
                      ? seq.includes(value, index)
                      : false,
      indexof:      (seq, value) => isSeq(seq) ? seq.indexOf(value) : -1,
      join:         (arr, delim) => isArrayType(arr) ? arr.join(delim) : NULL,
      lastindexof:  (seq, value) => isSeq(seq) ? seq.lastIndexOf(value) : -1,
      length:       (seq) => isSeq(seq) ? seq.length : 0,
      pluck:        (arr, prop) => isArrayType(arr)
                      ? arr.map(v => isValid(v) ? v[prop] : NULL)
                      : NULL,
      reverse:      (seq) => isArrayType(seq) ? seq.slice().reverse()
                      : isString(seq) ? seq.split('').reverse().join('')
                      : NULL,
      slice:        (seq, start, end) => isSeq(seq) ? seq.slice(start, end) : NULL
    };

    /**
     * Truncate a value to a bin boundary.
     * Useful for creating equal-width histograms.
     * Values outside the [min, max] range will be mapped to
     * -Infinity (< min) or +Infinity (> max).
     * @param {number} value - The value to bin.
     * @param {number} min - The minimum bin boundary.
     * @param {number} max - The maximum bin boundary.
     * @param {number} step - The step size between bin boundaries.
     * @param {number} [offset=0] - Offset in steps by which to adjust
     *  the bin value. An offset of 1 will return the next boundary.
     */
    function bin(value, min, max, step, offset) {
      return value == null ? null
        : value < min ? -Infinity
        : value > max ? +Infinity
        : (
            value = Math.max(min, Math.min(value, max)),
            min + step * Math.floor(1e-14 + (value - min) / step + (offset || 0))
          );
    }

    function pad$1(value, width, char = '0') {
      const s = value + '';
      const len = s.length;
      return len < width ? Array(width - len + 1).join(char) + s : s;
    }

    const pad2 = v => (v < 10 ? '0' : '') + v;

    const formatYear$1 = year => year < 0 ? '-' + pad$1(-year, 6)
      : year > 9999 ? '+' + pad$1(year, 6)
      : pad$1(year, 4);

    function formatISO(year, month, date, hours, min, sec, ms, utc, short) {
      const suffix = utc ? 'Z' : '';
      return formatYear$1(year) + '-' + pad2(month + 1) + '-' + pad2(date) + (
        !short || ms ? 'T' + pad2(hours) + ':' + pad2(min) + ':' + pad2(sec) + '.' + pad$1(ms, 3) + suffix
        : sec ? 'T' + pad2(hours) + ':' + pad2(min) + ':' + pad2(sec) + suffix
        : min || hours || !utc ? 'T' + pad2(hours) + ':' + pad2(min) + suffix
        : ''
      );
    }

    function formatDate(d, short) {
      return isNaN(d)
        ? 'Invalid Date'
        : formatISO(
          d.getFullYear(),
          d.getMonth(),
          d.getDate(),
          d.getHours(),
          d.getMinutes(),
          d.getSeconds(),
          d.getMilliseconds(),
          false, short
        );
    }

    function formatUTCDate(d, short) {
      return isNaN(d)
        ? 'Invalid Date'
        : formatISO(
          d.getUTCFullYear(),
          d.getUTCMonth(),
          d.getUTCDate(),
          d.getUTCHours(),
          d.getUTCMinutes(),
          d.getUTCSeconds(),
          d.getUTCMilliseconds(),
          true, short
        );
    }

    const iso_re = /^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/;

    function isISODateString(value) {
      return value.match(iso_re);
    }

    function parseIsoDate(value, parse = Date.parse) {
      return isISODateString(value) ? parse(value) : value;
    }

    const msMinute = 6e4;
    const msDay = 864e5;
    const msWeek = 6048e5;

    const t0$2 = new Date();
    const t1$2 = new Date();
    const t = d => (
      t0$2.setTime(typeof d === 'string' ? parseIsoDate(d) : d),
      t0$2
    );

    /**
     * Function to create a new Date value.
     * If no arguments are provided, the current time is used.
     * @param {number} [year] The year.
     * @param {number} [month=0] The (zero-based) month.
     * @param {number} [date=1] The date within the month.
     * @param {number} [hours=0] The hour within the day.
     * @param {number} [minutes=0] The minute within the hour.
     * @param {number} [seconds=0] The second within the minute.
     * @param {number} [milliseconds=0] The milliseconds within the second.
     * @return {date} The resuting Date value.
     */
    function datetime(year, month, date, hours, minutes, seconds, milliseconds) {
      return !arguments.length
        ? new Date(Date.now())
        : new Date(
            year,
            month || 0,
            date == null ? 1 : date,
            hours || 0,
            minutes || 0,
            seconds || 0,
            milliseconds || 0
          );
    }

    /**
     * Function to create a new Date value according to UTC time.
     * If no arguments are provided, the current time is used.
     * @param {number} [year] The year.
     * @param {number} [month=0] The (zero-based) month.
     * @param {number} [date=1] The date within the month.
     * @param {number} [hours=0] The hour within the day.
     * @param {number} [minutes=0] The minute within the hour.
     * @param {number} [seconds=0] The second within the minute.
     * @param {number} [milliseconds=0] The milliseconds within the second.
     * @return {date} The resuting Date value.
     */
    function utcdatetime(year, month, date, hours, minutes, seconds, milliseconds) {
      return !arguments.length
        ? new Date(Date.now())
        : new Date(Date.UTC(
            year,
            month || 0,
            date == null ? 1 : date,
            hours || 0,
            minutes || 0,
            seconds || 0,
            milliseconds || 0
          ));
    }

    function dayofyear(date) {
      t1$2.setTime(+date);
      t1$2.setHours(0, 0, 0, 0);
      t0$2.setTime(+t1$2);
      t0$2.setMonth(0);
      t0$2.setDate(1);
      const tz = (t1$2.getTimezoneOffset() - t0$2.getTimezoneOffset()) * msMinute;
      return Math.floor(1 + ((t1$2 - t0$2) - tz) / msDay);
    }

    function utcdayofyear(date) {
      t1$2.setTime(+date);
      t1$2.setUTCHours(0, 0, 0, 0);
      const t0 = Date.UTC(t1$2.getUTCFullYear(), 0, 1);
      return Math.floor(1 + (t1$2 - t0) / msDay);
    }

    function week(date, firstday) {
      const i = firstday || 0;
      t1$2.setTime(+date);
      t1$2.setDate(t1$2.getDate() - (t1$2.getDay() + 7 - i) % 7);
      t1$2.setHours(0, 0, 0, 0);
      t0$2.setTime(+date);
      t0$2.setMonth(0);
      t0$2.setDate(1);
      t0$2.setDate(1 - (t0$2.getDay() + 7 - i) % 7);
      t0$2.setHours(0, 0, 0, 0);
      const tz = (t1$2.getTimezoneOffset() - t0$2.getTimezoneOffset()) * msMinute;
      return Math.floor((1 + (t1$2 - t0$2) - tz) / msWeek);
    }

    function utcweek(date, firstday) {
      const i = firstday || 0;
      t1$2.setTime(+date);
      t1$2.setUTCDate(t1$2.getUTCDate() - (t1$2.getUTCDay() + 7 - i) % 7);
      t1$2.setUTCHours(0, 0, 0, 0);
      t0$2.setTime(+date);
      t0$2.setUTCMonth(0);
      t0$2.setUTCDate(1);
      t0$2.setUTCDate(1 - (t0$2.getUTCDay() + 7 - i) % 7);
      t0$2.setUTCHours(0, 0, 0, 0);
      return Math.floor((1 + (t1$2 - t0$2)) / msWeek);
    }

    var date$2 = {
      format_date:     (date, shorten) => formatDate(t(date), !shorten),
      format_utcdate:  (date, shorten) => formatUTCDate(t(date), !shorten),
      timestamp:       (date) => +t(date),
      year:            (date) => t(date).getFullYear(),
      quarter:         (date) => Math.floor(t(date).getMonth() / 3),
      month:           (date) => t(date).getMonth(),
      date:            (date) => t(date).getDate(),
      dayofweek:       (date) => t(date).getDay(),
      hours:           (date) => t(date).getHours(),
      minutes:         (date) => t(date).getMinutes(),
      seconds:         (date) => t(date).getSeconds(),
      milliseconds:    (date) => t(date).getMilliseconds(),
      utcyear:         (date) => t(date).getUTCFullYear(),
      utcquarter:      (date) => Math.floor(t(date).getUTCMonth() / 3),
      utcmonth:        (date) => t(date).getUTCMonth(),
      utcdate:         (date) => t(date).getUTCDate(),
      utcdayofweek:    (date) => t(date).getUTCDay(),
      utchours:        (date) => t(date).getUTCHours(),
      utcminutes:      (date) => t(date).getUTCMinutes(),
      utcseconds:      (date) => t(date).getUTCSeconds(),
      utcmilliseconds: (date) => t(date).getUTCMilliseconds(),
      datetime,
      dayofyear,
      week,
      utcdatetime,
      utcdayofyear,
      utcweek,
      now: Date.now
    };

    /**
     * Compare two values for equality, using join semantics in which null
     * !== null. If the inputs are object-valued, a deep equality check
     * of array entries or object key-value pairs is performed.
     * @param {*} a The first input.
     * @param {*} b The second input.
     * @return {boolean} True if equal, false if not.
     */
    function equal(a, b) {
      return (a == null || b == null || a !== a || b !== b) ? false
        : a === b ? true
        : (isDate(a) || isDate(b)) ? +a === +b
        : (isRegExp(a) && isRegExp(b)) ? a + '' === b + ''
        : (isObject(a) && isObject(b)) ? deepEqual(a, b)
        : false;
    }

    function deepEqual(a, b) {
      if (Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) {
        return false;
      }

      if (a.length || b.length) {
        return arrayEqual(a, b);
      }

      const keysA = Object.keys(a);
      const keysB = Object.keys(b);
      if (keysA.length !== keysB.length) {
        return false;
      }
      keysA.sort();
      keysB.sort();

      if (!arrayEqual(keysA, keysB, (a, b) => a === b)) {
        return false;
      }

      const n = keysA.length;
      for (let i = 0; i < n; ++i) {
        const k = keysA[i];
        if (!equal(a[k], b[k])) {
          return false;
        }
      }

      return true;
    }

    function arrayEqual(a, b, test = equal) {
      const n = a.length;
      if (n !== b.length) return false;

      for (let i = 0; i < n; ++i) {
        if (!test(a[i], b[i])) {
          return false;
        }
      }

      return true;
    }

    var json = {
      parse_json: (str) => JSON.parse(str),
      to_json:    (val) => JSON.stringify(val)
    };

    let source = Math.random;

    function random() {
      return source();
    }

    /**
     * Set a seed value for random number generation.
     * If the seed is a valid number, a 32-bit linear congruential generator
     * with the given seed will be used to generate random values.
     * If the seed is null, undefined, or not a valid number, the random
     * number generator will revert to Math.random.
     * @param {number} seed The random seed value. Should either be an
     *  integer or a fraction between 0 and 1.
     */
    function seed(seed) {
      source = isValid(seed) && isFinite(seed = +seed) ? lcg(seed) : Math.random;
    }

    function lcg(seed) {
      const a = 0x19660D;
      const c = 0x3C6EF35F;
      const m = 1 / 0x100000000;
      seed = (0 <= seed && seed < 1 ? seed / m : Math.abs(seed)) | 0;

      // Random numbers using a Linear Congruential Generator with seed value
      // https://en.wikipedia.org/wiki/Linear_congruential_generator
      return () => (seed = a * seed + c | 0, m * (seed >>> 0));
    }

    var math = {
      random,
      is_nan:    Number.isNaN,
      is_finite: Number.isFinite,

      abs:      Math.abs,
      cbrt:     Math.cbrt,
      ceil:     Math.ceil,
      clz32:    Math.clz32,
      exp:      Math.exp,
      expm1:    Math.expm1,
      floor:    Math.floor,
      fround:   Math.fround,
      greatest: Math.max,
      least:    Math.min,
      log:      Math.log,
      log10:    Math.log10,
      log1p:    Math.log1p,
      log2:     Math.log2,
      pow:      Math.pow,
      round:    Math.round,
      sign:     Math.sign,
      sqrt:     Math.sqrt,
      trunc:    Math.trunc,

      degrees:  (rad) => 180 * rad / Math.PI,
      radians:  (deg) => Math.PI * deg / 180,
      acos:     Math.acos,
      acosh:    Math.acosh,
      asin:     Math.asin,
      asinh:    Math.asinh,
      atan:     Math.atan,
      atan2:    Math.atan2,
      atanh:    Math.atanh,
      cos:      Math.cos,
      cosh:     Math.cosh,
      sin:      Math.sin,
      sinh:     Math.sinh,
      tan:      Math.tan,
      tanh:     Math.tanh
    };

    function isMap(value) {
      return value instanceof Map;
    }

    function isSet(value) {
      return value instanceof Set;
    }

    function isMapOrSet(value) {
      return isMap(value) || isSet(value);
    }

    function array$2(iter) {
      return Array.from(iter);
    }

    var object$1 = {
      has:      (obj, key) => isMapOrSet(obj) ? obj.has(key)
                  : obj != null ? has(obj, key)
                  : false,
      keys:     (obj) => isMap(obj) ? array$2(obj.keys())
                  : obj != null ? Object.keys(obj)
                  : [],
      values:   (obj) => isMapOrSet(obj) ? array$2(obj.values())
                  : obj != null ? Object.values(obj)
                  : [],
      entries:  (obj) => isMapOrSet(obj) ? array$2(obj.entries())
                  : obj != null ? Object.entries(obj)
                  : [],
      object:   (entries) => entries ? Object.fromEntries(entries) : NULL
    };

    /**
     * Recodes an input value to an alternative value, based on a provided
     * value map. If a fallback value is specified, it will be returned when
     * a matching value is not found in the map; otherwise, the input value
     * is returned unchanged.
     * @param {*} value The value to recode. The value must be safely
     *  coercible to a string for lookup against the value map.
     * @param {object|Map} map An object or Map with input values for keys and
     *  output recoded values as values. If a non-Map object, only the object's
     *  own properties will be considered.
     * @param {*} [fallback] A default fallback value to use if the input
     *  value is not found in the value map.
     * @return {*} The recoded value.
     */
    function recode(value, map, fallback) {
      if (map instanceof Map) {
        if (map.has(value)) return map.get(value);
      } else if (has(map, value)) {
        return map[value];
      }
      return fallback !== undefined ? fallback : value;
    }

    /**
     * Returns an array containing an arithmetic sequence from the start value
     * to the stop value, in step increments. If step is positive, the last
     * element is the largest start + i * step less than stop; if step is
     * negative, the last element is the smallest start + i * step greater
     * than stop. If the returned array would contain an infinite number of
     * values, an empty range is returned.
     * @param {number} [start=0] The starting value of the sequence.
     * @param {number} [stop] The stopping value of the sequence.
     *  The stop value is exclusive; it is not included in the result.
     * @param {number} [step=1] The step increment between sequence values.
     * @return {number[]} The generated sequence.
     */
    function sequence(start, stop, step) {
      let n = arguments.length;
      start = +start;
      stop = +stop;
      step = n < 2
        ? (stop = start, start = 0, 1)
        : n < 3 ? 1 : +step;

      n = Math.max(0, Math.ceil((stop - start) / step)) | 0;
      const seq = new Array(n);

      for (let i = 0; i < n; ++i) {
        seq[i] = start + i * step;
      }

      return seq;
    }

    var string$1 = {
      parse_date:   (str) => str == null ? str : new Date(str),
      parse_float:  (str) => str == null ? str : Number.parseFloat(str),
      parse_int:    (str, radix) => str == null ? str : Number.parseInt(str, radix),
      endswith:     (str, search, length) => str == null ? false
                      : String(str).endsWith(search, length),
      match:        (str, regexp, index) => {
                      const m = str == null ? str : String(str).match(regexp);
                      return index == null || m == null ? m
                        : typeof index === 'number' ? m[index]
                        : m.groups ? m.groups[index]
                        : null;
                    },
      normalize:    (str, form) => str == null ? str
                      : String(str).normalize(form),
      padend:       (str, len, fill) => str == null ? str
                      : String(str).padEnd(len, fill),
      padstart:     (str, len, fill) => str == null ? str
                      : String(str).padStart(len, fill),
      upper:        (str) => str == null ? str
                      : String(str).toUpperCase(),
      lower:        (str) => str == null ? str
                      : String(str).toLowerCase(),
      repeat:       (str, num) => str == null ? str
                      : String(str).repeat(num),
      replace:      (str, pattern, replacement) => str == null ? str
                      : String(str).replace(pattern, String(replacement)),
      substring:    (str, start, end) => str == null ? str
                      : String(str).substring(start, end),
      split:        (str, separator, limit) => str == null ? []
                      : String(str).split(separator, limit),
      startswith:   (str, search, length) => str == null ? false
                      : String(str).startsWith(search, length),
      trim:         (str) => str == null ? str
                      : String(str).trim()
    };

    var functions = {
      bin,
      equal,
      recode,
      sequence,
      ...array$1,
      ...date$2,
      ...json,
      ...math,
      ...object$1,
      ...string$1
    };

    function isBigInt(value) {
      return typeof value === 'bigint';
    }

    function toString(v) {
      return v === undefined ? v + ''
        : isBigInt(v) ? v + 'n'
        : JSON.stringify(v);
    }

    function op(name, fields = [], params = []) {
      return new Op(name, toArray(fields), toArray(params));
    }

    class Op {
      constructor(name, fields, params) {
        this.name = name;
        this.fields = fields;
        this.params = params;
      }
      toString() {
        const args = [
          ...this.fields.map(f => `d[${toString(f)}]`),
          ...this.params.map(toString)
        ];
        return `d => op.${this.name}(${args})`;
      }
      toObject() {
        return { expr: this.toString(), func: true };
      }
    }

    const any = (field) => op('any', field);
    const count = () => op('count');
    const array_agg = (field) => op('array_agg', field);
    const array_agg_distinct = (field) => op('array_agg_distinct', field);
    const map_agg = (key, value) => op('map_agg', [key, value]);
    const object_agg = (key, value) => op('object_agg', [key, value]);
    const entries_agg = (key, value) => op('entries_agg', [key, value]);

    /**
     * @typedef {import('../table/transformable').Struct} Struct
     */

    /**
     * All table expression operations including normal functions,
     * aggregate functions, and window functions.
     */
    var ops = {
      ...functions,

      /**
       * Generate an object representing the current table row.
       * @param {...string} names The column names to include in the object.
       *  If unspecified, all columns are included.
       * @return {Struct} The generated row object.
       */
      row_object: (...names) => op('row_object', null, names.flat()),

      /**
       * Aggregate function to count the number of records (rows).
       * @returns {number} The count of records.
       */
      count,

      /**
       * Aggregate function returning an arbitrary observed value.
       * @param {*} field The data field.
       * @return {*} An arbitrary observed value.
       */
      any,

      /**
       * Aggregate function to collect an array of values.
       * @param {*} field The data field.
       * @return {Array} A list of values.
       */
      array_agg,

      /**
       * Aggregate function to collect an array of distinct (unique) values.
       * @param {*} field The data field.
       * @return {Array} An array of unique values.
       */
      array_agg_distinct,

      /**
       * Aggregate function to create an object given input key and value fields.
       * @param {*} key The object key field.
       * @param {*} value The object value field.
       * @return {Struct} An object of key-value pairs.
       */
      object_agg,

      /**
       * Aggregate function to create a Map given input key and value fields.
       * @param {*} key The object key field.
       * @param {*} value The object value field.
       * @return {Map} A Map of key-value pairs.
       */
      map_agg,

      /**
       * Aggregate function to create an array in the style of Object.entries()
       * given input key and value fields.
       * @param {*} key The object key field.
       * @param {*} value The object value field.
       * @return {[[any, any]]} An array of [key, value] arrays.
       */
      entries_agg,

      /**
       * Aggregate function to count the number of valid values.
       * Invalid values are null, undefined, or NaN.
       * @param {*} field The data field.
       * @return {number} The count of valid values.
       */
      valid: (field) => op('valid', field),

      /**
       * Aggregate function to count the number of invalid values.
       * Invalid values are null, undefined, or NaN.
       * @param {*} field The data field.
       * @return {number} The count of invalid values.
       */
      invalid: (field) => op('invalid', field),

      /**
       * Aggregate function to count the number of distinct values.
       * @param {*} field The data field.
       * @return {number} The count of distinct values.
       */
      distinct: (field) => op('distinct', field),

      /**
       * Aggregate function to determine the mode (most frequent) value.
       * @param {*} field The data field.
       * @return {number} The mode value.
       */
      mode: (field) => op('mode', field),

      /**
       * Aggregate function to sum values.
       * @param {string} field The data field.
       * @return {number} The sum of the values.
       */
      sum: (field) => op('sum', field),

      /**
       * Aggregate function to multiply values.
       * @param {*} field The data field.
       * @return {number} The product of the values.
       */
      product: (field) => op('product', field),

      /**
       * Aggregate function for the mean (average) value.
       * @param {*} field The data field.
       * @return {number} The mean (average) of the values.
       */
      mean: (field) => op('mean', field),

      /**
       * Aggregate function for the average (mean) value.
       * @param {*} field The data field.
       * @return {number} The average (mean) of the values.
       */
      average: (field) => op('average', field),

      /**
       * Aggregate function for the sample variance.
       * @param {*} field The data field.
       * @return {number} The sample variance of the values.
       */
      variance: (field) => op('variance', field),

      /**
       * Aggregate function for the population variance.
       * @param {*} field The data field.
       * @return {number} The population variance of the values.
       */
      variancep: (field) => op('variancep', field),

      /**
       * Aggregate function for the sample standard deviation.
       * @param {*} field The data field.
       * @return {number} The sample standard deviation of the values.
       */
      stdev: (field) => op('stdev', field),

      /**
       * Aggregate function for the population standard deviation.
       * @param {*} field The data field.
       * @return {number} The population standard deviation of the values.
       */
      stdevp: (field) => op('stdevp', field),

      /**
       * Aggregate function for the minimum value.
       * @param {*} field The data field.
       * @return {number} The minimum value.
       */
      min: (field) => op('min', field),

      /**
       * Aggregate function for the maximum value.
       * @param {*} field The data field.
       * @return {number} The maximum value.
       */
      max: (field) => op('max', field),

      /**
       * Aggregate function to compute the quantile boundary
       * of a data field for a probability threshold.
       * @param {*} field The data field.
       * @param {number} p The probability threshold.
       * @return {number} The quantile value.
       */
      quantile: (field, p) => op('quantile', field, p),

      /**
       * Aggregate function for the median value.
       * This is a shorthand for the 0.5 quantile value.
       * @param {*} field The data field.
       * @return {number} The median value.
       */
      median: (field) => op('median', field),

      /**
       * Aggregate function for the sample covariance between two variables.
       * @param {*} field1 The first data field.
       * @param {*} field2 The second data field.
       * @return {number} The sample covariance of the values.
       */
      covariance: (field1, field2) => op('covariance', [field1, field2]),

      /**
       * Aggregate function for the population covariance between two variables.
       * @param {*} field1 The first data field.
       * @param {*} field2 The second data field.
       * @return {number} The population covariance of the values.
       */
      covariancep: (field1, field2) => op('covariancep', [field1, field2]),

      /**
       * Aggregate function for the product-moment correlation between two variables.
       * To instead compute a rank correlation, compute the average ranks for each
       * variable and then apply this function to the result.
       * @param {*} field1 The first data field.
       * @param {*} field2 The second data field.
       * @return {number} The correlation between the field values.
       */
      corr: (field1, field2) => op('corr', [field1, field2]),

      /**
       * Aggregate function for calculating a binning scheme in terms of
       * the minimum bin boundary, maximum bin boundary, and step size.
       * @param {*} field The data field.
       * @param {number} [maxbins=15] The maximum number of allowed bins.
       * @param {boolean} [nice=true] Flag indicating if the bin min and max
       *  should snap to "nice" human-friendly values.
       * @param {number} [minstep] The minimum allowed step size between bins.
       * @param {number} [step] The exact step size to use between bins.
       *  If specified, the maxbins and minstep arguments are ignored.
       * @return {[number, number, number]} The bin [min, max, and step] values.
       */
      bins: (field, maxbins, nice, minstep) =>
        op('bins', field, [maxbins, nice, minstep]),

      /**
       * Window function to assign consecutive row numbers, starting from 1.
       * @return {number} The row number value.
       */
      row_number: () => op('row_number'),

      /**
       * Window function to assign a rank to each value in a group, starting
       * from 1. Peer values are assigned the same rank. Subsequent ranks
       * reflect the number of prior values: if the first two values tie for
       * rank 1, the third value is assigned rank 3.
       * @return {number} The rank value.
       */
      rank: () => op('rank'),

      /**
       * Window function to assign a fractional (average) rank to each value in
       * a group, starting from 1. Peer values are assigned the average of their
       * indices: if the first two values tie, both will be assigned rank 1.5.
       * @return {number} The peer-averaged rank value.
       */
      avg_rank: () => op('avg_rank'),

      /**
       * Window function to assign a dense rank to each value in a group,
       * starting from 1. Peer values are assigned the same rank. Subsequent
       * ranks do not reflect the number of prior values: if the first two
       * values tie for rank 1, the third value is assigned rank 2.
       * @return {number} The dense rank value.
       */
      dense_rank: () => op('dense_rank'),

      /**
       * Window function to assign a percentage rank to each value in a group.
       * The percent is calculated as (rank - 1) / (group_size - 1).
       * @return {number} The percentage rank value.
       */
      percent_rank: () => op('percent_rank'),

      /**
       * Window function to assign a cumulative distribution value between 0 and 1
       * to each value in a group.
       * @return {number} The cumulative distribution value.
       */
      cume_dist: () => op('cume_dist'),

      /**
       * Window function to assign a quantile (e.g., percentile) value to each
       * value in a group. Accepts an integer parameter indicating the number of
       * buckets to use (e.g., 100 for percentiles, 5 for quintiles).
       * @param {number} num The number of buckets for ntile calculation.
       * @return {number} The quantile value.
       */
      ntile: (num) => op('ntile', null, num),

      /**
       * Window function to assign a value that precedes the current value by
       * a specified number of positions. If no such value exists, returns a
       * default value instead.
       * @param {*} field The data field.
       * @param {number} [offset=1] The lag offset from the current value.
       * @param {*} [defaultValue=undefined] The default value.
       * @return {*} The lagging value.
       */
      lag: (field, offset, defaultValue) => op('lag', field, [offset, defaultValue]),

      /**
       * Window function to assign a value that follows the current value by
       * a specified number of positions. If no such value exists, returns a
       * default value instead.
       * @param {*} field The data field.
       * @param {number} [offset=1] The lead offset from the current value.
       * @param {*} [defaultValue=undefined] The default value.
       * @return {*} The leading value.
       */
      lead: (field, offset, defaultValue) => op('lead', field, [offset, defaultValue]),

      /**
       * Window function to assign the first value in a sliding window frame.
       * @param {*} field The data field.
       * @return {*} The first value in the current frame.
       */
      first_value: (field) => op('first_value', field),

      /**
       * Window function to assign the last value in a sliding window frame.
       * @param {*} field The data field.
       * @return {*} The last value in the current frame.
       */
      last_value: (field) => op('last_value', field),

      /**
       * Window function to assign the nth value in a sliding window frame
       * (counting from 1), or undefined if no such value exists.
       * @param {*} field The data field.
       * @param {number} nth The nth position, starting from 1.
       * @return {*} The nth value in the current frame.
       */
      nth_value: (field, nth) => op('nth_value', field, nth),

      /**
       * Window function to fill in missing values with preceding values.
       * @param {*} field The data field.
       * @param {*} [defaultValue=undefined] The default value.
       * @return {*} The current value if valid, otherwise the first preceding
       *  valid value. If no such value exists, returns the default value.
       */
      fill_down: (field, defaultValue) => op('fill_down', field, defaultValue),

      /**
       * Window function to fill in missing values with subsequent values.
       * @param {*} field The data field.
       * @param {*} [defaultValue=undefined] The default value.
       * @return {*} The current value if valid, otherwise the first subsequent
       *  valid value. If no such value exists, returns the default value.
       */
      fill_up: (field, defaultValue) => op('fill_up', field, defaultValue)
    };

    function uniqueName(names, name) {
      names = isMapOrSet(names) ? names : new Set(names);
      let uname = name;
      let index = 0;

      while (names.has(uname)) {
        uname = name + ++index;
      }

      return uname;
    }

    /**
     * Regroup table rows in response to a BitSet filter.
     * @param {GroupBySpec} groups The current groupby specification.
     * @param {BitSet} filter The filter to apply.
     */
    function regroup(groups, filter) {
      if (!groups || !filter) return groups;

      // check for presence of rows for each group
      const { keys, rows, size } = groups;
      const map = new Int32Array(size);
      filter.scan(row => map[keys[row]] = 1);

      // check sum, exit early if all groups occur
      const sum = map.reduce((sum, val) => sum + val, 0);
      if (sum === size) return groups;

      // create group index map, filter exemplar rows
      const _rows = Array(sum);
      let _size = 0;
      for (let i = 0; i < size; ++i) {
        if (map[i]) _rows[map[i] = _size++] = rows[i];
      }

      // re-index the group keys
      const _keys = new Uint32Array(keys.length);
      filter.scan(row => _keys[row] = map[keys[row]]);

      return { ...groups, keys: _keys, rows: _rows, size: _size };
    }

    /**
     * Regroup table rows in response to a re-indexing.
     * This operation may or may not involve filtering of rows.
     * @param {GroupBySpec} groups The current groupby specification.
     * @param {Function} scan Function to scan new row indices.
     * @param {boolean} filter Flag indicating if filtering may occur.
     * @param {number} nrows The number of rows in the new table.
     */
    function reindex(groups, scan, filter, nrows) {
      const { keys, rows, size } = groups;
      let _rows = rows;
      let _size = size;
      let map = null;

      if (filter) {
        // check for presence of rows for each group
        map = new Int32Array(size);
        scan(row => map[keys[row]] = 1);

        // check sum, regroup if not all groups occur
        const sum = map.reduce((sum, val) => sum + val, 0);
        if (sum !== size) {
          // create group index map, filter exemplar rows
          _rows = Array(sum);
          _size = 0;
          for (let i = 0; i < size; ++i) {
            if (map[i]) _rows[map[i] = _size++] = rows[i];
          }
        }
      }

      // re-index the group keys
      let r = -1;
      const _keys = new Uint32Array(nrows);
      const fn = _size !== size
        ? row => _keys[++r] = map[keys[row]]
        : row => _keys[++r] = keys[row];
      scan(fn);

      return { ...groups, keys: _keys, rows: _rows, size: _size };
    }

    function nest(table, idx, obj, type) {
      const agg = type === 'map' || type === true ? map_agg
        : type === 'entries' ? entries_agg
        : type === 'object' ? object_agg
        : error('groups option must be "map", "entries", or "object".');

      const { names } = table.groups();
      const col = uniqueName(table.columnNames(), '_');

      // create table with one column of row objects
      // then aggregate into per-group arrays
      let t = table
        .select()
        .reify(idx)
        .create({ data: { [col]: obj } })
        .rollup({ [col]: array_agg(col) });

      // create nested structures for each level of grouping
      for (let i = names.length; --i >= 0;) {
        t = t
          .groupby(names.slice(0, i))
          .rollup({ [col]: agg(names[i], col) });
      }

      // return the final aggregated structure
      return t.get(col);
    }

    const ArrayPattern = 'ArrayPattern';
    const ArrowFunctionExpression = 'ArrowFunctionExpression';
    const FunctionExpression = 'FunctionExpression';
    const Identifier = 'Identifier';
    const Literal = 'Literal';
    const MemberExpression = 'MemberExpression';
    const ObjectExpression = 'ObjectExpression';
    const ObjectPattern = 'ObjectPattern';
    const Property = 'Property';

    const Column$1 = 'Column';
    const Constant = 'Constant';
    const Dictionary = 'Dictionary';
    const Function$1 = 'Function';
    const Parameter = 'Parameter';
    const Op$1 = 'Op';

    const visit = (node, opt) => {
      const f = visitors[node.type];
      return f
        ? f(node, opt)
        : error(`Unsupported expression construct: ${node.type}`);
    };

    const binary = (node, opt) => {
      return '(' + visit(node.left, opt) + ' ' + node.operator + ' ' + visit(node.right, opt) + ')';
    };

    const func = (node, opt) => {
      return '(' + list(node.params, opt) + ')=>' + visit(node.body, opt);
    };

    const call = (node, opt) => {
      return visit(node.callee, opt) + '(' + list(node.arguments, opt) + ')';
    };

    const list = (array, opt, delim = ',') => {
      return array.map(node => visit(node, opt)).join(delim);
    };

    const name = node => node.computed
      ? `[${toString(node.name)}]`
      : `.${node.name}`;

    const ref = (node, opt, method) => {
      const table = node.table || '';
      return `data${table}${name(node)}.${method}(${opt.index}${table})`;
    };

    const visitors = {
      Constant: node => node.raw,
      Column: (node, opt) => ref(node, opt, 'get'),
      Dictionary: (node, opt) => ref(node, opt, 'key'),
      Function: node => `fn.${node.name}`,
      Parameter: node => `$${name(node)}`,
      Op: (node, opt) => `op(${toString(node.name)},${opt.op || opt.index})`,
      Literal: node => node.raw,
      Identifier: node => node.name,
      TemplateLiteral: (node, opt) => {
        const { quasis, expressions } = node;
        const n = expressions.length;
        let t = quasis[0].value.raw;
        for (let i = 0; i < n;) {
          t += '${' + visit(expressions[i], opt) + '}' + quasis[++i].value.raw;
        }
        return '`' + t + '`';
      },
      MemberExpression: (node, opt) => {
        const d = !node.computed;
        const o = visit(node.object, opt);
        const p = visit(node.property, opt);
        return o + (d ? '.' + p : '[' + p + ']');
      },
      CallExpression: call,
      NewExpression: (node, opt) => {
        return 'new ' + call(node, opt);
      },
      ArrayExpression: (node, opt) => {
        return '[' + list(node.elements, opt) + ']';
      },
      AssignmentExpression: binary,
      BinaryExpression: binary,
      LogicalExpression: binary,
      UnaryExpression: (node, opt) => {
        return '(' + node.operator + visit(node.argument, opt) + ')';
      },
      ConditionalExpression: (node, opt) => {
        return '(' + visit(node.test, opt) +
          '?' + visit(node.consequent, opt) +
          ':' + visit(node.alternate, opt) + ')';
      },
      ObjectExpression: (node, opt) => {
        return '({' + list(node.properties, opt) + '})';
      },
      Property: (node, opt) => {
        const key = visit(node.key, opt);
        return (node.computed ? `[${key}]` : key) + ':' + visit(node.value, opt);
      },

      ArrowFunctionExpression: func,
      FunctionExpression: func,
      FunctionDeclaration: func,

      ArrayPattern: (node, opt) => {
        return '[' + list(node.elements, opt) + ']';
      },
      ObjectPattern: (node, opt) => {
        return '{' + list(node.properties, opt) + '}';
      },
      VariableDeclaration: (node, opt) => {
        return node.kind + ' ' + list(node.declarations, opt, ',');
      },
      VariableDeclarator: (node, opt) => {
        return visit(node.id, opt) + '=' + visit(node.init, opt);
      },
      SpreadElement: (node, opt) => {
        return '...' + visit(node.argument, opt);
      },

      BlockStatement: (node, opt) => {
        return '{' + list(node.body, opt, ';') + ';}';
      },
      BreakStatement: () => {
        return 'break';
      },
      ExpressionStatement: (node, opt) => {
        return visit(node.expression, opt);
      },
      IfStatement: (node, opt) => {
        return 'if (' + visit(node.test, opt) + ')'
          + visit(node.consequent, opt)
          + (node.alternate ? ' else ' + visit(node.alternate, opt) : '');
      },
      SwitchStatement: (node, opt) => {
        return 'switch (' + visit(node.discriminant, opt) + ') {'
         + list(node.cases, opt, '')
         + '}';
      },
      SwitchCase: (node, opt) => {
        return (node.test ? 'case ' + visit(node.test, opt) : 'default')
          + ': '
          + list(node.consequent, opt, ';') + ';';
      },
      ReturnStatement: (node, opt) => {
        return 'return ' + visit(node.argument, opt);
      },
      Program: (node, opt) => visit(node.body[0], opt)
    };

    function codegen(node, opt = { index: 'row' }) {
      return visit(node, opt);
    }

    function bins(min, max, maxbins = 15, nice = true, minstep = 0, step) {
      const base = 10;
      const logb = Math.LN10;

      if (step == null) {
        const level = Math.ceil(Math.log(maxbins) / logb);
        const span = (max - min) || Math.abs(min) || 1;
        const div = [5, 2];

        step = Math.max(
          minstep,
          Math.pow(base, Math.round(Math.log(span) / logb) - level)
        );

        // increase step size if too many bins
        while (Math.ceil(span / step) > maxbins) {
          step *= base;
        }

        // decrease step size if it stays within maxbins
        const n = div.length;
        for (let i = 0; i < n; ++i) {
          const v = step / div[i];
          if (v >= minstep && span / v <= maxbins) {
            step = v;
          }
        }
      }

      // snap to "nice" boundaries
      if (nice) {
        let v = Math.log(step);
        const precision = v >= 0 ? 0 : ~~(-v / logb) + 1;
        const eps = Math.pow(base, -precision - 1);
        v = Math.floor(min / step + eps) * step;
        min = min < v ? v - step : v;
        max = Math.ceil(max / step) * step;
      }

      return [
        min,
        max === min ? min + step : max,
        step
      ];
    }

    function key(value) {
      const type = typeof value;
      return type === 'string' ? `"${value}"`
        : type !== 'object' || !value ? value
        : isDate(value) ? +value
        : isArray(value) || isTypedArray(value) ? `[${value.map(key)}]`
        : isRegExp(value) ? value + ''
        : objectKey(value);
    }

    function objectKey(value) {
      let s = '{';
      let i = -1;
      for (const k in value) {
        if (++i > 0) s += ',';
        s += `"${k}":${key(value[k])}`;
      }
      s += '}';
      return s;
    }

    function keyFunction(get, nulls) {
      const n = get.length;
      return n === 1
        ? (row, data) => key(get[0](row, data))
        : (row, data) => {
            let s = '';
            for (let i = 0; i < n; ++i) {
              if (i > 0) s += '|';
              const v = get[i](row, data);
              if (nulls && (v == null || v !== v)) return null;
              s += key(v);
            }
            return s;
          };
    }

    function distinctMap() {
      const map = new Map();
      return {
        count() {
          return map.size;
        },
        values() {
          return Array.from(map.values(), _ => _.v);
        },
        increment(v) {
          const k = key(v);
          const e = map.get(k);
          e ? ++e.n : map.set(k, { v, n: 1 });
        },
        decrement(v) {
          const k = key(v);
          const e = map.get(k);
          e.n === 1 ? map.delete(k) : --e.n;
        },
        forEach(fn) {
          map.forEach(({ v, n }) => fn(v, n));
        }
      };
    }

    function noop$1() {}

    function product(values, start = 0, stop = values.length) {
      let prod = values[start++];

      for (let i = start; i < stop; ++i) {
        prod *= values[i];
      }

      return prod;
    }

    /**
     * Initialize an aggregate operator.
     */
    function initOp(op) {
      op.init = op.init || noop$1;
      op.add = op.add || noop$1;
      op.rem = op.rem || noop$1;
      return op;
    }

    function initProduct(s, value) {
      s.product_v = false;
      return s.product = value;
    }

    /**
     * Initialize an aggregate operator.
     * @callback AggregateInit
     * @param {object} state The aggregate state object.
     * @return {void}
     */

    /**
     * Add a value to an aggregate operator.
     * @callback AggregateAdd
     * @param {object} state The aggregate state object.
     * @param {*} value The value to add.
     * @return {void}
     */

    /**
     * Remove a value from an aggregate operator.
     * @callback AggregateRem
     * @param {object} state The aggregate state object.
     * @param {*} value The value to remove.
     * @return {void}
     */

    /**
     * Retrive an output value from an aggregate operator.
     * @callback AggregateValue
     * @param {object} state The aggregate state object.
     * @return {*} The output value.
     */

    /**
     * An operator instance for an aggregate function.
     * @typedef {object} AggregateOperator
     * @property {AggregateInit} init Initialize the operator.
     * @property {AggregateAdd} add Add a value to the operator state.
     * @property {AggregateRem} rem Remove a value from the operator state.
     * @property {AggregateValue} value Retrieve an output value.
     */

    /**
     * Create a new aggregate operator instance.
     * @callback AggregateCreate
     * @param {...any} params The aggregate operator parameters.
     * @return {AggregateOperator} The instantiated aggregate operator.
     */

    /**
     * An operator definition for an aggregate function.
     * @typedef {object} AggregateDef
     * @property {AggregateCreate} create Create a new operator instance.
     * @property {number[]} param Two-element array containing the
     *  counts of input fields and additional parameters.
     * @property {string[]} [req] Names of operators required by this one.
     * @property {string[]} [stream] Names of operators required by this one
     *  for streaming operations (value removes).
     */

    /**
     * Aggregate operator definitions.
     */
    var aggregateFunctions = {
      /** @type {AggregateDef} */
      count: {
        create: () => initOp({
          value: s => s.count
        }),
        param: []
      },

      /** @type {AggregateDef} */
      array_agg: {
        create: () => initOp({
          init: s => s.values = true,
          value: s => s.list.values(s.stream)
        }),
        param: [1]
      },

      /** @type {AggregateDef} */
      object_agg: {
        create: () => initOp({
          init:  s => s.values = true,
          value: s => Object.fromEntries(s.list.values())
        }),
        param: [2]
      },

      /** @type {AggregateDef} */
      map_agg: {
        create: () => initOp({
          init:  s => s.values = true,
          value: s => new Map(s.list.values())
        }),
        param: [2]
      },

      /** @type {AggregateDef} */
      entries_agg: {
        create: () => initOp({
          init:  s => s.values = true,
          value: s => s.list.values(s.stream)
        }),
        param: [2]
      },

      /** @type {AggregateDef} */
      any: {
        create: () => initOp({
          add: (s, v) => { if (s.any == null) s.any = v; },
          value: s => s.valid ? s.any : NULL
        }),
        param: [1]
      },

      /** @type {AggregateDef} */
      valid: {
        create: () => initOp({
          value: s => s.valid
        }),
        param: [1]
      },

      /** @type {AggregateDef} */
      invalid: {
        create: () => initOp({
          value: s => s.count - s.valid
        }),
        param: [1]
      },

      /** @type {AggregateDef} */
      distinct: {
        create: () => ({
          init: s => s.distinct = distinctMap(),
          value: s => s.distinct.count() + (s.valid === s.count ? 0 : 1),
          add: (s, v) => s.distinct.increment(v),
          rem: (s, v) => s.distinct.decrement(v)
        }),
        param: [1]
      },

      /** @type {AggregateDef} */
      array_agg_distinct: {
        create: () => initOp({
          value: s => s.distinct.values()
        }),
        param: [1],
        req: ['distinct']
      },

      /** @type {AggregateDef} */
      mode: {
        create: () => initOp({
          value: s => {
            let mode = NULL;
            let max = 0;
            s.distinct.forEach((value, count) => {
              if (count > max) {
                max = count;
                mode = value;
              }
            });
            return mode;
          }
        }),
        param: [1],
        req: ['distinct']
      },

      /** @type {AggregateDef} */
      sum: {
        create: () => ({
          init:  s => s.sum = 0,
          value: s => s.valid ? s.sum : NULL,
          add: (s, v) => isBigInt(v)
            ? (s.sum === 0 ? s.sum = v : s.sum += v)
            : s.sum += +v,
          rem: (s, v) => s.sum -= v
        }),
        param: [1]
      },

      /** @type {AggregateDef} */
      product: {
        create: () => ({
          init:  s => initProduct(s, 1),
          value: s => s.valid
            ? (
                s.product_v
                  ? initProduct(s, product(s.list.values()))
                  : s.product
              )
            : undefined,
          add: (s, v) => isBigInt(v)
            ? (s.product === 1 ? s.product = v : s.product *= v)
            : s.product *= v,
          rem: (s, v) => (v == 0 || v === Infinity || v === -Infinity)
            ? s.product_v = true
            : s.product /= v
        }),
        param: [1],
        stream: ['array_agg']
      },

      /** @type {AggregateDef} */
      mean: {
        create: () => ({
          init: s => s.mean = 0,
          value: s => s.valid ? s.mean : NULL,
          add: (s, v) => {
            s.mean_d = v - s.mean;
            s.mean += s.mean_d / s.valid;
          },
          rem: (s, v) => {
            s.mean_d = v - s.mean;
            s.mean -= s.valid ? s.mean_d / s.valid : s.mean;
          }
        }),
        param: [1]
      },

      /** @type {AggregateDef} */
      average: {
        create: () => initOp({
          value: s => s.valid ? s.mean : NULL
        }),
        param: [1],
        req: ['mean']
      },

      /** @type {AggregateDef} */
      variance: {
        create: () => ({
          init:  s => s.dev = 0,
          value: s => s.valid > 1 ? s.dev / (s.valid - 1) : NULL,
          add: (s, v) => s.dev += s.mean_d * (v - s.mean),
          rem: (s, v) => s.dev -= s.mean_d * (v - s.mean)
        }),
        param: [1],
        req: ['mean']
      },

      /** @type {AggregateDef} */
      variancep: {
        create: () => initOp({
          value: s => s.valid > 1 ? s.dev / s.valid : NULL
        }),
        param: [1],
        req: ['variance']
      },

      /** @type {AggregateDef} */
      stdev: {
        create: () => initOp({
          value: s => s.valid > 1 ? Math.sqrt(s.dev / (s.valid - 1)) : NULL
        }),
        param: [1],
        req: ['variance']
      },

      /** @type {AggregateDef} */
      stdevp: {
        create: () => initOp({
          value: s => s.valid > 1 ? Math.sqrt(s.dev / s.valid) : NULL
        }),
        param: [1],
        req: ['variance']
      },

      /** @type {AggregateDef} */
      min: {
        create: () => ({
          init:  s => s.min = NULL,
          value: s => s.min = (Number.isNaN(s.min) ? s.list.min() : s.min),
          add: (s, v) => { if (v < s.min || s.min === NULL) s.min = v; },
          rem: (s, v) => { if (v <= s.min) s.min = NaN; }
        }),
        param: [1],
        stream: ['array_agg']
      },

      /** @type {AggregateDef} */
      max: {
        create: () => ({
          init:  s => s.max = NULL,
          value: s => s.max = (Number.isNaN(s.max) ? s.list.max() : s.max),
          add: (s, v) => { if (v > s.max || s.max === NULL) s.max = v; },
          rem: (s, v) => { if (v >= s.max) s.max = NaN; }
        }),
        param: [1],
        stream: ['array_agg']
      },

      /** @type {AggregateDef} */
      quantile: {
        create: (p) => initOp({
          value: s => s.list.quantile(p)
        }),
        param: [1, 1],
        req: ['array_agg']
      },

      /** @type {AggregateDef} */
      median: {
        create: () => initOp({
          value: s => s.list.quantile(0.5)
        }),
        param: [1],
        req: ['array_agg']
      },

      /** @type {AggregateDef} */
      covariance: {
        create: () => ({
          init:  s => {
            s.cov = s.mean_x = s.mean_y = s.dev_x = s.dev_y = 0;
          },
          value: s => s.valid > 1 ? s.cov / (s.valid - 1) : NULL,
          add: (s, x, y) => {
            const dx = x - s.mean_x;
            const dy = y - s.mean_y;
            s.mean_x += dx / s.valid;
            s.mean_y += dy / s.valid;
            const dy2 = y - s.mean_y;
            s.dev_x += dx * (x - s.mean_x);
            s.dev_y += dy * dy2;
            s.cov += dx * dy2;
          },
          rem: (s, x, y) => {
            const dx = x - s.mean_x;
            const dy = y - s.mean_y;
            s.mean_x -= s.valid ? dx / s.valid : s.mean_x;
            s.mean_y -= s.valid ? dy / s.valid : s.mean_y;
            const dy2 = y - s.mean_y;
            s.dev_x -= dx * (x - s.mean_x);
            s.dev_y -= dy * dy2;
            s.cov -= dx * dy2;
          }
        }),
        param: [2]
      },

      /** @type {AggregateDef} */
      covariancep: {
        create: () => initOp({
          value: s => s.valid > 1 ? s.cov / s.valid : NULL
        }),
        param: [2],
        req: ['covariance']
      },

      /** @type {AggregateDef} */
      corr: {
        create: () => initOp({
          value: s => s.valid > 1
            ? s.cov / (Math.sqrt(s.dev_x) * Math.sqrt(s.dev_y))
            : NULL
        }),
        param: [2],
        req: ['covariance']
      },

      /** @type {AggregateDef} */
      bins: {
        create: (maxbins, nice, minstep, step) => initOp({
          value: s => bins(s.min, s.max, maxbins, nice, minstep, step)
        }),
        param: [1, 4],
        req: ['min', 'max']
      }
    };

    /**
     * Initialize a window operator.
     * @callback WindowInit
     * @return {void}
     */

    /**
     * Retrieve an output value from a window operator.
     * @callback WindowValue
     * @param {WindowState} state The window state object.
     * @return {*} The output value.
     */

    /**
     * An operator instance for a window function.
     * @typedef {object} WindowOperator
     * @property {AggregateInit} init Initialize the operator.
     * @property {AggregateValue} value Retrieve an output value.
     */

    /**
     * Create a new window operator instance.
     * @callback WindowCreate
     * @param {...any} params The aggregate operator parameters.
     * @return {WindowOperator} The instantiated window operator.
     */

    /**
     * An operator definition for a window function.
     * @typedef {object} WindowDef
     * @property {AggregateCreate} create Create a new operator instance.
     * @property {number[]} param Two-element array containing the
     *  counts of input fields and additional parameters.
     */

    const rank = {
      create() {
        let rank;
        return {
          init: () => rank = 1,
          value: w => {
            const i = w.index;
            return (i && !w.peer(i)) ? (rank = i + 1) : rank;
          }
        };
      },
      param: []
    };

    const cume_dist = {
      create() {
        let cume;
        return {
          init: () => cume = 0,
          value: w => {
            const { index, peer, size } = w;
            let i = index;
            if (cume < i) {
              while (i + 1 < size && peer(i + 1)) ++i;
              cume = i;
            }
            return (1 + cume) / size;
          }
        };
      },
      param: []
    };

    /**
     * Window operator definitions.
     */
    var windowFunctions = {
      /** @type {WindowDef} */
      row_number: {
        create() {
          return {
            init: noop$1,
            value: w => w.index + 1
          };
        },
        param: []
      },

      /** @type {WindowDef} */
      rank,

      /** @type {WindowDef} */
      avg_rank: {
        create() {
          let j, rank;
          return {
            init: () => (j = -1, rank = 1),
            value: w => {
              const i = w.index;
              if (i >= j) {
                for (rank = j = i + 1; w.peer(j); rank += ++j);
                rank /= (j - i);
              }
              return rank;
            }
          };
        },
        param: []
      },

      /** @type {WindowDef} */
      dense_rank: {
        create() {
          let drank;
          return {
            init: () => drank = 1,
            value: w => {
              const i = w.index;
              return (i && !w.peer(i)) ? ++drank : drank;
            }
          };
        },
        param: []
      },

      /** @type {WindowDef} */
      percent_rank: {
        create() {
          const { init, value } = rank.create();
          return {
            init,
            value: w => (value(w) - 1) / (w.size - 1)
          };
        },
        param: []
      },

      /** @type {WindowDef} */
      cume_dist,

      /** @type {WindowDef} */
      ntile: {
        create(num) {
          num = +num;
          if (!(num > 0)) error('ntile num must be greater than zero.');
          const { init, value } = cume_dist.create();
          return {
            init,
            value: w => Math.ceil(num * value(w))
          };
        },
        param: [0, 1]
      },

      /** @type {WindowDef} */
      lag: {
        create(offset, defaultValue = NULL) {
          offset = +offset || 1;
          return {
            init: noop$1,
            value: (w, f) => {
              const i = w.index - offset;
              return i >= 0 ? w.value(i, f) : defaultValue;
            }
          };
        },
        param: [1, 2]
      },

      /** @type {WindowDef} */
      lead: {
        create(offset, defaultValue = NULL) {
          offset = +offset || 1;
          return {
            init: noop$1,
            value: (w, f) => {
              const i = w.index + offset;
              return i < w.size ? w.value(i, f) : defaultValue;
            }
          };
        },
        param: [1, 2]
      },

      /** @type {WindowDef} */
      first_value: {
        create() {
          return {
            init: noop$1,
            value: (w, f) => w.value(w.i0, f)
          };
        },
        param: [1]
      },

      /** @type {WindowDef} */
      last_value: {
        create() {
          return {
            init: noop$1,
            value: (w, f) => w.value(w.i1 - 1, f)
          };
        },
        param: [1]
      },

      /** @type {WindowDef} */
      nth_value: {
        create(nth) {
          nth = +nth;
          if (!(nth > 0)) error('nth_value nth must be greater than zero.');
          return {
            init: noop$1,
            value: (w, f) => {
              const i = w.i0 + (nth - 1);
              return i < w.i1 ? w.value(i, f) : NULL;
            }
          };
        },
        param: [1, 1]
      },

      /** @type {WindowDef} */
      fill_down: {
        create(defaultValue = NULL) {
          let value;
          return {
            init: () => value = defaultValue,
            value: (w, f) => {
              const v = w.value(w.index, f);
              return isValid(v) ? (value = v) : value;
            }
          };
        },
        param: [1, 1]
      },

      /** @type {WindowDef} */
      fill_up: {
        create(defaultValue = NULL) {
          let value, idx;
          return {
            init: () => (value = defaultValue, idx = -1),
            value: (w, f) => w.index <= idx ? value
              : (idx = find(w, f, w.index)) >= 0 ? (value = w.value(idx, f))
              : (idx = w.size, value = defaultValue)
          };
        },
        param: [1, 1]
      }
    };

    function find(w, f, i) {
      for (const n = w.size; i < n; ++i) {
        if (isValid(w.value(i, f))) return i;
      }
      return -1;
    }

    /**
     * Check if an aggregate function with the given name exists.
     * @param {string} name The name of the aggregate function.
     * @return {boolean} True if found, false otherwise.
     */
    function hasAggregate(name) {
      return has(aggregateFunctions, name);
    }

    /**
     * Check if a window function with the given name exists.
     * @param {string} name The name of the window function.
     * @return {boolean} True if found, false otherwise.
     */
    function hasWindow(name) {
      return has(windowFunctions, name);
    }

    /**
     * Check if an expression function with the given name exists.
     * @param {string} name The name of the function.
     * @return {boolean} True if found, false otherwise.
     */
     function hasFunction(name) {
      return has(functions, name) || name === 'row_object';
    }

    /**
     * Get an aggregate function definition.
     * @param {string} name The name of the aggregate function.
     * @return {AggregateDef} The aggregate function definition,
     *  or undefined if not found.
     */
    function getAggregate(name) {
      return hasAggregate(name) && aggregateFunctions[name];
    }

    /**
     * Get a window function definition.
     * @param {string} name The name of the window function.
     * @return {WindowDef} The window function definition,
     *  or undefined if not found.
     */
    function getWindow(name) {
      return hasWindow(name) && windowFunctions[name];
    }

    function compile(code, fn, params) {
      code = `"use strict"; return ${code};`;
      return (Function('fn', '$', code))(fn, params);
    }

    var compile$1 = {
      escape: (code, func, params) => compile(code, func, params),
      expr:   (code, params) => compile(`(row,data,op)=>${code}`, functions, params),
      expr2:  (code, params) => compile(`(row0,data0,row,data)=>${code}`, functions, params),
      join:   (code, params) => compile(`(row1,data1,row2,data2)=>${code}`, functions, params),
      param:  (code, params) => compile(code, functions, params)
    };

    const dictOps = {
      '==': 1,
      '!=': 1,
      '===': 1,
      '!==': 1
    };

    /**
     * Rewrite AST node to be a table column reference.
     * Additionally optimizes dictionary column operations.
     * @param {object} ref AST node to rewrite to a column reference.
     * @param {string} name The name of the column.
     * @param {number} index The table index of the column.
     * @param {object} col The actual table column instance.
     * @param {object} op Parent AST node operating on the column reference.
     */
    function rewrite(ref, name, index = 0, col, op) {
      ref.type = Column$1;
      ref.name = name;
      ref.table = index;

      // proceed only if has parent op and is a dictionary column
      if (op && col && isFunction(col.keyFor)) {
        // get other arg if op is an optimizeable operation
        const lit = dictOps[op.operator]
          ? op.left === ref ? op.right : op.left
          : op.callee && op.callee.name === 'equal'
          ? op.arguments[op.arguments[0] === ref ? 1 : 0]
          : null;

        // rewrite as dictionary lookup if other arg is a literal
        if (lit && lit.type === Literal) {
          rewriteDictionary(op, ref, lit, col.keyFor(lit.value));
        }
      }

      return ref;
    }

    function rewriteDictionary(op, ref, lit, key) {
      if (key < 0) {
        // value not in dictionary, rewrite op as false literal
        op.type = Literal;
        op.value = false;
        op.raw = 'false';
      } else {
        // rewrite ref as dict key access
        ref.type = Dictionary;

        // rewrite literal as target dict key
        lit.value = key;
        lit.raw = key + '';
      }

      return true;
    }

    function entries(value) {
      return isArray(value) ? value
        : isMap(value) ? value.entries()
        : value ? Object.entries(value)
        : [];
    }

    const ROW_OBJECT = 'row_object';

    function rowObjectExpression(node, props) {
      node.type = ObjectExpression;

      const p = node.properties = [];
      for (const prop of entries(props)) {
        const [name, key] = isArray(prop) ? prop : [prop, prop];
        p.push({
          type: Property,
          key: { type: Literal, raw: toString(key) },
          value: rewrite({ computed: true }, name)
        });
      }

      return node;
    }

    function rowObjectCode(props) {
      return codegen(rowObjectExpression({}, props));
    }

    function rowObjectBuilder(props) {
      return compile$1.expr(rowObjectCode(props));
    }

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    // or more contributor license agreements.  See the NOTICE file
    // distributed with this work for additional information
    // regarding copyright ownership.  The ASF licenses this file
    // to you under the Apache License, Version 2.0 (the
    // "License"); you may not use this file except in compliance
    // with the License.  You may obtain a copy of the License at
    //
    //   http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing,
    // software distributed under the License is distributed on an
    // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    // KIND, either express or implied.  See the License for the
    // specific language governing permissions and limitations
    // under the License.
    const decoder = new TextDecoder('utf-8');
    /** @ignore */
    const decodeUtf8 = (buffer) => decoder.decode(buffer);
    const encoder = new TextEncoder();
    /** @ignore */
    const encodeUtf8 = (value) => encoder.encode(value);

    // Licensed to the Apache Software Foundation (ASF) under one
    // or more contributor license agreements.  See the NOTICE file
    // distributed with this work for additional information
    // regarding copyright ownership.  The ASF licenses this file
    // to you under the Apache License, Version 2.0 (the
    // "License"); you may not use this file except in compliance
    // with the License.  You may obtain a copy of the License at
    //
    //   http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing,
    // software distributed under the License is distributed on an
    // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    // KIND, either express or implied.  See the License for the
    // specific language governing permissions and limitations
    // under the License.
    /** @ignore */
    const [BigIntCtor, BigIntAvailable] = (() => {
        const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };
        function BigIntUnavailable() { throw BigIntUnavailableError(); }
        BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };
        BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };
        return typeof BigInt !== 'undefined' ? [BigInt, true] : [BigIntUnavailable, false];
    })();
    /** @ignore */
    const [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {
        const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };
        class BigInt64ArrayUnavailable {
            static get BYTES_PER_ELEMENT() { return 8; }
            static of() { throw BigInt64ArrayUnavailableError(); }
            static from() { throw BigInt64ArrayUnavailableError(); }
            constructor() { throw BigInt64ArrayUnavailableError(); }
        }
        return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [BigInt64ArrayUnavailable, false];
    })();
    /** @ignore */
    const [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {
        const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };
        class BigUint64ArrayUnavailable {
            static get BYTES_PER_ELEMENT() { return 8; }
            static of() { throw BigUint64ArrayUnavailableError(); }
            static from() { throw BigUint64ArrayUnavailableError(); }
            constructor() { throw BigUint64ArrayUnavailableError(); }
        }
        return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [BigUint64ArrayUnavailable, false];
    })();
    /** @ignore */ const isNumber$1 = (x) => typeof x === 'number';
    /** @ignore */ const isBoolean = (x) => typeof x === 'boolean';
    /** @ignore */ const isFunction$1 = (x) => typeof x === 'function';
    /** @ignore */
    // eslint-disable-next-line @typescript-eslint/ban-types
    const isObject$1 = (x) => x != null && Object(x) === x;
    /** @ignore */
    const isPromise = (x) => {
        return isObject$1(x) && isFunction$1(x.then);
    };
    /** @ignore */
    const isIterable = (x) => {
        return isObject$1(x) && isFunction$1(x[Symbol.iterator]);
    };
    /** @ignore */
    const isAsyncIterable = (x) => {
        return isObject$1(x) && isFunction$1(x[Symbol.asyncIterator]);
    };
    /** @ignore */
    const isArrowJSON = (x) => {
        return isObject$1(x) && isObject$1(x['schema']);
    };
    /** @ignore */
    const isIteratorResult = (x) => {
        return isObject$1(x) && ('done' in x) && ('value' in x);
    };
    /** @ignore */
    const isFileHandle = (x) => {
        return isObject$1(x) && isFunction$1(x['stat']) && isNumber$1(x['fd']);
    };
    /** @ignore */
    const isFetchResponse = (x) => {
        return isObject$1(x) && isReadableDOMStream(x['body']);
    };
    const isReadableInterop = (x) => ('_getDOMStream' in x && '_getNodeStream' in x);
    /** @ignore */
    const isWritableDOMStream = (x) => {
        return isObject$1(x) &&
            isFunction$1(x['abort']) &&
            isFunction$1(x['getWriter']) &&
            !isReadableInterop(x);
    };
    /** @ignore */
    const isReadableDOMStream = (x) => {
        return isObject$1(x) &&
            isFunction$1(x['cancel']) &&
            isFunction$1(x['getReader']) &&
            !isReadableInterop(x);
    };
    /** @ignore */
    const isWritableNodeStream = (x) => {
        return isObject$1(x) &&
            isFunction$1(x['end']) &&
            isFunction$1(x['write']) &&
            isBoolean(x['writable']) &&
            !isReadableInterop(x);
    };
    /** @ignore */
    const isReadableNodeStream = (x) => {
        return isObject$1(x) &&
            isFunction$1(x['read']) &&
            isFunction$1(x['pipe']) &&
            isBoolean(x['readable']) &&
            !isReadableInterop(x);
    };
    /** @ignore */
    const isFlatbuffersByteBuffer = (x) => {
        return isObject$1(x) &&
            isFunction$1(x['clear']) &&
            isFunction$1(x['bytes']) &&
            isFunction$1(x['position']) &&
            isFunction$1(x['setPosition']) &&
            isFunction$1(x['capacity']) &&
            isFunction$1(x['getBufferIdentifier']) &&
            isFunction$1(x['createLong']);
    };

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    const SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);
    /** @ignore */
    function collapseContiguousByteRanges(chunks) {
        const result = chunks[0] ? [chunks[0]] : [];
        let xOffset, yOffset, xLen, yLen;
        for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {
            x = result[j];
            y = chunks[i];
            // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y
            if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {
                y && (result[++j] = y);
                continue;
            }
            ({ byteOffset: xOffset, byteLength: xLen } = x);
            ({ byteOffset: yOffset, byteLength: yLen } = y);
            // continue if the byte ranges of x and y aren't contiguous
            if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {
                y && (result[++j] = y);
                continue;
            }
            result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);
        }
        return result;
    }
    /** @ignore */
    function memcpy(target, source, targetByteOffset = 0, sourceByteLength = source.byteLength) {
        const targetByteLength = target.byteLength;
        const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);
        const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));
        dst.set(src, targetByteOffset);
        return target;
    }
    /** @ignore */
    function joinUint8Arrays(chunks, size) {
        // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,
        // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during
        // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer
        const result = collapseContiguousByteRanges(chunks);
        const byteLength = result.reduce((x, b) => x + b.byteLength, 0);
        let source, sliced, buffer;
        let offset = 0, index = -1;
        const length = Math.min(size || Number.POSITIVE_INFINITY, byteLength);
        for (const n = result.length; ++index < n;) {
            source = result[index];
            sliced = source.subarray(0, Math.min(source.length, length - offset));
            if (length <= (offset + sliced.length)) {
                if (sliced.length < source.length) {
                    result[index] = source.subarray(sliced.length);
                }
                else if (sliced.length === source.length) {
                    index++;
                }
                buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);
                break;
            }
            memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);
            offset += sliced.length;
        }
        return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];
    }
    /** @ignore */
    function toArrayBufferView(ArrayBufferViewCtor, input) {
        let value = isIteratorResult(input) ? input.value : input;
        if (value instanceof ArrayBufferViewCtor) {
            if (ArrayBufferViewCtor === Uint8Array) {
                // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need
                // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/
                return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);
            }
            return value;
        }
        if (!value) {
            return new ArrayBufferViewCtor(0);
        }
        if (typeof value === 'string') {
            value = encodeUtf8(value);
        }
        if (value instanceof ArrayBuffer) {
            return new ArrayBufferViewCtor(value);
        }
        if (value instanceof SharedArrayBuf) {
            return new ArrayBufferViewCtor(value);
        }
        if (isFlatbuffersByteBuffer(value)) {
            return toArrayBufferView(ArrayBufferViewCtor, value.bytes());
        }
        return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : (value.byteLength <= 0 ? new ArrayBufferViewCtor(0)
            : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT));
    }
    /** @ignore */ const toInt32Array = (input) => toArrayBufferView(Int32Array, input);
    /** @ignore */ const toUint8Array = (input) => toArrayBufferView(Uint8Array, input);
    /** @ignore */
    const pump = (iterator) => { iterator.next(); return iterator; };
    /** @ignore */
    function* toArrayBufferViewIterator(ArrayCtor, source) {
        const wrap = function* (x) { yield x; };
        const buffers = (typeof source === 'string') ? wrap(source)
            : (ArrayBuffer.isView(source)) ? wrap(source)
                : (source instanceof ArrayBuffer) ? wrap(source)
                    : (source instanceof SharedArrayBuf) ? wrap(source)
                        : !isIterable(source) ? wrap(source) : source;
        yield* pump((function* (it) {
            let r = null;
            do {
                r = it.next(yield toArrayBufferView(ArrayCtor, r));
            } while (!r.done);
        })(buffers[Symbol.iterator]()));
        return new ArrayCtor();
    }
    /** @ignore */ const toUint8ArrayIterator = (input) => toArrayBufferViewIterator(Uint8Array, input);
    /** @ignore */
    function toArrayBufferViewAsyncIterator(ArrayCtor, source) {
        return __asyncGenerator(this, arguments, function* toArrayBufferViewAsyncIterator_1() {
            // if a Promise, unwrap the Promise and iterate the resolved value
            if (isPromise(source)) {
                return yield __await(yield __await(yield* __asyncDelegator(__asyncValues(toArrayBufferViewAsyncIterator(ArrayCtor, yield __await(source))))));
            }
            const wrap = function (x) { return __asyncGenerator(this, arguments, function* () { yield yield __await(yield __await(x)); }); };
            const emit = function (source) {
                return __asyncGenerator(this, arguments, function* () {
                    yield __await(yield* __asyncDelegator(__asyncValues(pump((function* (it) {
                        let r = null;
                        do {
                            r = it.next(yield r === null || r === void 0 ? void 0 : r.value);
                        } while (!r.done);
                    })(source[Symbol.iterator]())))));
                });
            };
            const buffers = (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator
                : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator
                    : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator
                        : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator
                            : isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values
                                : !isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator
                                    : source; // otherwise if AsyncIterable, use it
            yield __await(// otherwise if AsyncIterable, use it
            yield* __asyncDelegator(__asyncValues(pump((function (it) {
                return __asyncGenerator(this, arguments, function* () {
                    let r = null;
                    do {
                        r = yield __await(it.next(yield yield __await(toArrayBufferView(ArrayCtor, r))));
                    } while (!r.done);
                });
            })(buffers[Symbol.asyncIterator]())))));
            return yield __await(new ArrayCtor());
        });
    }
    /** @ignore */ const toUint8ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint8Array, input);
    /** @ignore */
    function rebaseValueOffsets(offset, length, valueOffsets) {
        // If we have a non-zero offset, create a new offsets array with the values
        // shifted by the start offset, such that the new start offset is 0
        if (offset !== 0) {
            valueOffsets = valueOffsets.slice(0, length + 1);
            for (let i = -1; ++i <= length;) {
                valueOffsets[i] += offset;
            }
        }
        return valueOffsets;
    }
    /** @ignore */
    function compareArrayLike(a, b) {
        let i = 0;
        const n = a.length;
        if (n !== b.length) {
            return false;
        }
        if (n > 0) {
            do {
                if (a[i] !== b[i]) {
                    return false;
                }
            } while (++i < n);
        }
        return true;
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    var streamAdapters = {
        fromIterable(source) {
            return pump$1(fromIterable$1(source));
        },
        fromAsyncIterable(source) {
            return pump$1(fromAsyncIterable(source));
        },
        fromDOMStream(source) {
            return pump$1(fromDOMStream(source));
        },
        fromNodeStream(stream) {
            return pump$1(fromNodeStream(stream));
        },
        // @ts-ignore
        toDOMStream(source, options) {
            throw new Error(`"toDOMStream" not available in this environment`);
        },
        // @ts-ignore
        toNodeStream(source, options) {
            throw new Error(`"toNodeStream" not available in this environment`);
        },
    };
    /** @ignore */
    const pump$1 = (iterator) => { iterator.next(); return iterator; };
    /** @ignore */
    function* fromIterable$1(source) {
        let done, threw = false;
        let buffers = [], buffer;
        let cmd, size, bufferLength = 0;
        function byteRange() {
            if (cmd === 'peek') {
                return joinUint8Arrays(buffers, size)[0];
            }
            [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);
            return buffer;
        }
        // Yield so the caller can inject the read command before creating the source Iterator
        ({ cmd, size } = yield null);
        // initialize the iterator
        const it = toUint8ArrayIterator(source)[Symbol.iterator]();
        try {
            do {
                // read the next value
                ({ done, value: buffer } = Number.isNaN(size - bufferLength) ?
                    it.next() : it.next(size - bufferLength));
                // if chunk is not null or empty, push it onto the queue
                if (!done && buffer.byteLength > 0) {
                    buffers.push(buffer);
                    bufferLength += buffer.byteLength;
                }
                // If we have enough bytes in our buffer, yield chunks until we don't
                if (done || size <= bufferLength) {
                    do {
                        ({ cmd, size } = yield byteRange());
                    } while (size < bufferLength);
                }
            } while (!done);
        }
        catch (e) {
            (threw = true) && (typeof it.throw === 'function') && (it.throw(e));
        }
        finally {
            (threw === false) && (typeof it.return === 'function') && (it.return(null));
        }
        return null;
    }
    /** @ignore */
    function fromAsyncIterable(source) {
        return __asyncGenerator(this, arguments, function* fromAsyncIterable_1() {
            let done, threw = false;
            let buffers = [], buffer;
            let cmd, size, bufferLength = 0;
            function byteRange() {
                if (cmd === 'peek') {
                    return joinUint8Arrays(buffers, size)[0];
                }
                [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);
                return buffer;
            }
            // Yield so the caller can inject the read command before creating the source AsyncIterator
            ({ cmd, size } = (yield yield __await(null)));
            // initialize the iterator
            const it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();
            try {
                do {
                    // read the next value
                    ({ done, value: buffer } = Number.isNaN(size - bufferLength)
                        ? yield __await(it.next())
                        : yield __await(it.next(size - bufferLength)));
                    // if chunk is not null or empty, push it onto the queue
                    if (!done && buffer.byteLength > 0) {
                        buffers.push(buffer);
                        bufferLength += buffer.byteLength;
                    }
                    // If we have enough bytes in our buffer, yield chunks until we don't
                    if (done || size <= bufferLength) {
                        do {
                            ({ cmd, size } = yield yield __await(byteRange()));
                        } while (size < bufferLength);
                    }
                } while (!done);
            }
            catch (e) {
                (threw = true) && (typeof it.throw === 'function') && (yield __await(it.throw(e)));
            }
            finally {
                (threw === false) && (typeof it.return === 'function') && (yield __await(it.return(new Uint8Array(0))));
            }
            return yield __await(null);
        });
    }
    // All this manual Uint8Array chunk management can be avoided if/when engines
    // add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():
    // https://github.com/domenic/proposal-arraybuffer-transfer
    /** @ignore */
    function fromDOMStream(source) {
        return __asyncGenerator(this, arguments, function* fromDOMStream_1() {
            let done = false, threw = false;
            let buffers = [], buffer;
            let cmd, size, bufferLength = 0;
            function byteRange() {
                if (cmd === 'peek') {
                    return joinUint8Arrays(buffers, size)[0];
                }
                [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);
                return buffer;
            }
            // Yield so the caller can inject the read command before we establish the ReadableStream lock
            ({ cmd, size } = yield yield __await(null));
            // initialize the reader and lock the stream
            const it = new AdaptiveByteReader(source);
            try {
                do {
                    // read the next value
                    ({ done, value: buffer } = Number.isNaN(size - bufferLength)
                        ? yield __await(it['read']())
                        : yield __await(it['read'](size - bufferLength)));
                    // if chunk is not null or empty, push it onto the queue
                    if (!done && buffer.byteLength > 0) {
                        buffers.push(toUint8Array(buffer));
                        bufferLength += buffer.byteLength;
                    }
                    // If we have enough bytes in our buffer, yield chunks until we don't
                    if (done || size <= bufferLength) {
                        do {
                            ({ cmd, size } = yield yield __await(byteRange()));
                        } while (size < bufferLength);
                    }
                } while (!done);
            }
            catch (e) {
                (threw = true) && (yield __await(it['cancel'](e)));
            }
            finally {
                (threw === false) ? (yield __await(it['cancel']()))
                    : source['locked'] && it.releaseLock();
            }
            return yield __await(null);
        });
    }
    /** @ignore */
    class AdaptiveByteReader {
        constructor(source) {
            this.source = source;
            this.reader = null;
            this.reader = this.source['getReader']();
            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions
            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified
            // about why these errors are raised, but I'm sure there's some important spec reason that
            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the
            // only solution in this case :/
            this.reader['closed'].catch(() => { });
        }
        get closed() {
            return this.reader ? this.reader['closed'].catch(() => { }) : Promise.resolve();
        }
        releaseLock() {
            if (this.reader) {
                this.reader.releaseLock();
            }
            this.reader = null;
        }
        cancel(reason) {
            return __awaiter(this, void 0, void 0, function* () {
                const { reader, source } = this;
                reader && (yield reader['cancel'](reason).catch(() => { }));
                source && (source['locked'] && this.releaseLock());
            });
        }
        read(size) {
            return __awaiter(this, void 0, void 0, function* () {
                if (size === 0) {
                    return { done: this.reader == null, value: new Uint8Array(0) };
                }
                const result = yield this.reader.read();
                !result.done && (result.value = toUint8Array(result));
                return result;
            });
        }
    }
    /** @ignore */
    const onEvent = (stream, event) => {
        const handler = (_) => resolve([event, _]);
        let resolve;
        return [event, handler, new Promise((r) => (resolve = r) && stream['once'](event, handler))];
    };
    /** @ignore */
    function fromNodeStream(stream) {
        return __asyncGenerator(this, arguments, function* fromNodeStream_1() {
            const events = [];
            let event = 'error';
            let done = false, err = null;
            let cmd, size, bufferLength = 0;
            let buffers = [], buffer;
            function byteRange() {
                if (cmd === 'peek') {
                    return joinUint8Arrays(buffers, size)[0];
                }
                [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);
                return buffer;
            }
            // Yield so the caller can inject the read command before we
            // add the listener for the source stream's 'readable' event.
            ({ cmd, size } = yield yield __await(null));
            // ignore stdin if it's a TTY
            if (stream['isTTY']) {
                yield yield __await(new Uint8Array(0));
                return yield __await(null);
            }
            try {
                // initialize the stream event handlers
                events[0] = onEvent(stream, 'end');
                events[1] = onEvent(stream, 'error');
                do {
                    events[2] = onEvent(stream, 'readable');
                    // wait on the first message event from the stream
                    [event, err] = yield __await(Promise.race(events.map((x) => x[2])));
                    // if the stream emitted an Error, rethrow it
                    if (event === 'error') {
                        break;
                    }
                    if (!(done = event === 'end')) {
                        // If the size is NaN, request to read everything in the stream's internal buffer
                        if (!Number.isFinite(size - bufferLength)) {
                            buffer = toUint8Array(stream['read']());
                        }
                        else {
                            buffer = toUint8Array(stream['read'](size - bufferLength));
                            // If the byteLength is 0, then the requested amount is more than the stream has
                            // in its internal buffer. In this case the stream needs a "kick" to tell it to
                            // continue emitting readable events, so request to read everything the stream
                            // has in its internal buffer right now.
                            if (buffer.byteLength < (size - bufferLength)) {
                                buffer = toUint8Array(stream['read']());
                            }
                        }
                        // if chunk is not null or empty, push it onto the queue
                        if (buffer.byteLength > 0) {
                            buffers.push(buffer);
                            bufferLength += buffer.byteLength;
                        }
                    }
                    // If we have enough bytes in our buffer, yield chunks until we don't
                    if (done || size <= bufferLength) {
                        do {
                            ({ cmd, size } = yield yield __await(byteRange()));
                        } while (size < bufferLength);
                    }
                } while (!done);
            }
            finally {
                yield __await(cleanup(events, event === 'error' ? err : null));
            }
            return yield __await(null);
            function cleanup(events, err) {
                buffer = buffers = null;
                return new Promise((resolve, reject) => {
                    for (const [evt, fn] of events) {
                        stream['off'](evt, fn);
                    }
                    try {
                        // Some stream implementations don't call the destroy callback,
                        // because it's really a node-internal API. Just calling `destroy`
                        // here should be enough to conform to the ReadableStream contract
                        const destroy = stream['destroy'];
                        destroy && destroy.call(stream, err);
                        err = undefined;
                    }
                    catch (e) {
                        err = e || err;
                    }
                    finally {
                        err != null ? reject(err) : resolve();
                    }
                });
            }
        });
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    // or more contributor license agreements.  See the NOTICE file
    // distributed with this work for additional information
    // regarding copyright ownership.  The ASF licenses this file
    // to you under the Apache License, Version 2.0 (the
    // "License"); you may not use this file except in compliance
    // with the License.  You may obtain a copy of the License at
    //
    //   http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing,
    // software distributed under the License is distributed on an
    // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    // KIND, either express or implied.  See the License for the
    // specific language governing permissions and limitations
    // under the License.
    ////
    //
    // A few enums copied from `fb/Schema.ts` and `fb/Message.ts` because Webpack
    // v4 doesn't seem to be able to tree-shake the rest of those exports.
    //
    // We will have to keep these enums in sync when we re-generate the flatbuffers
    // code from the shchemas. See js/DEVELOP.md for info on how to run flatbuffers
    // code generation.
    //
    ////
    /**
     * Logical types, vector layouts, and schemas
     *
     * @enum {number}
     */
    var MetadataVersion;
    (function (MetadataVersion) {
        /**
         * 0.1.0 (October 2016).
         */
        MetadataVersion[MetadataVersion["V1"] = 0] = "V1";
        /**
         * 0.2.0 (February 2017). Non-backwards compatible with V1.
         */
        MetadataVersion[MetadataVersion["V2"] = 1] = "V2";
        /**
         * 0.3.0 -> 0.7.1 (May - December 2017). Non-backwards compatible with V2.
         */
        MetadataVersion[MetadataVersion["V3"] = 2] = "V3";
        /**
         * >= 0.8.0 (December 2017). Non-backwards compatible with V3.
         */
        MetadataVersion[MetadataVersion["V4"] = 3] = "V4";
        /**
         * >= 1.0.0 (July 2020. Backwards compatible with V4 (V5 readers can read V4
         * metadata and IPC messages). Implementations are recommended to provide a
         * V4 compatibility mode with V5 format changes disabled.
         *
         * Incompatible changes between V4 and V5:
         * - Union buffer layout has changed. In V5, Unions don't have a validity
         *   bitmap buffer.
         */
        MetadataVersion[MetadataVersion["V5"] = 4] = "V5";
    })(MetadataVersion || (MetadataVersion = {}));
    /**
     * @enum {number}
     */
    var UnionMode;
    (function (UnionMode) {
        UnionMode[UnionMode["Sparse"] = 0] = "Sparse";
        UnionMode[UnionMode["Dense"] = 1] = "Dense";
    })(UnionMode || (UnionMode = {}));
    /**
     * @enum {number}
     */
    var Precision;
    (function (Precision) {
        Precision[Precision["HALF"] = 0] = "HALF";
        Precision[Precision["SINGLE"] = 1] = "SINGLE";
        Precision[Precision["DOUBLE"] = 2] = "DOUBLE";
    })(Precision || (Precision = {}));
    /**
     * @enum {number}
     */
    var DateUnit;
    (function (DateUnit) {
        DateUnit[DateUnit["DAY"] = 0] = "DAY";
        DateUnit[DateUnit["MILLISECOND"] = 1] = "MILLISECOND";
    })(DateUnit || (DateUnit = {}));
    /**
     * @enum {number}
     */
    var TimeUnit;
    (function (TimeUnit) {
        TimeUnit[TimeUnit["SECOND"] = 0] = "SECOND";
        TimeUnit[TimeUnit["MILLISECOND"] = 1] = "MILLISECOND";
        TimeUnit[TimeUnit["MICROSECOND"] = 2] = "MICROSECOND";
        TimeUnit[TimeUnit["NANOSECOND"] = 3] = "NANOSECOND";
    })(TimeUnit || (TimeUnit = {}));
    /**
     * @enum {number}
     */
    var IntervalUnit;
    (function (IntervalUnit) {
        IntervalUnit[IntervalUnit["YEAR_MONTH"] = 0] = "YEAR_MONTH";
        IntervalUnit[IntervalUnit["DAY_TIME"] = 1] = "DAY_TIME";
        IntervalUnit[IntervalUnit["MONTH_DAY_NANO"] = 2] = "MONTH_DAY_NANO";
    })(IntervalUnit || (IntervalUnit = {}));
    /**
     * ----------------------------------------------------------------------
     * The root Message type
     * This union enables us to easily send different message types without
     * redundant storage, and in the future we can easily add new message types.
     *
     * Arrow implementations do not need to implement all of the message types,
     * which may include experimental metadata types. For maximum compatibility,
     * it is best to send data using RecordBatch
     *
     * @enum {number}
     */
    var MessageHeader;
    (function (MessageHeader) {
        MessageHeader[MessageHeader["NONE"] = 0] = "NONE";
        MessageHeader[MessageHeader["Schema"] = 1] = "Schema";
        MessageHeader[MessageHeader["DictionaryBatch"] = 2] = "DictionaryBatch";
        MessageHeader[MessageHeader["RecordBatch"] = 3] = "RecordBatch";
        MessageHeader[MessageHeader["Tensor"] = 4] = "Tensor";
        MessageHeader[MessageHeader["SparseTensor"] = 5] = "SparseTensor";
    })(MessageHeader || (MessageHeader = {}));
    /**
     * Main data type enumeration.
     *
     * Data types in this library are all *logical*. They can be expressed as
     * either a primitive physical type (bytes or bits of some fixed size), a
     * nested type consisting of other data types, or another data type (e.g. a
     * timestamp encoded as an int64).
     *
     * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow
     * IPC payload.
     *
     * The rest of the values are specified here so TypeScript can narrow the type
     * signatures further beyond the base Arrow Types. The Arrow DataTypes include
     * metadata like `bitWidth` that impact the type signatures of the values we
     * accept and return.
     *
     * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an
     * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`
     * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the
     * underlying `Int32Array`.
     *
     * Library consumers benefit by knowing the narrowest type, since we can ensure
     * the types across all public methods are propagated, and never bail to `any`.
     * These values are _never_ used at runtime, and they will _never_ be written
     * to the flatbuffers metadata of serialized Arrow IPC payloads.
     */
    var Type;
    (function (Type) {
        Type[Type["NONE"] = 0] = "NONE";
        Type[Type["Null"] = 1] = "Null";
        Type[Type["Int"] = 2] = "Int";
        Type[Type["Float"] = 3] = "Float";
        Type[Type["Binary"] = 4] = "Binary";
        Type[Type["Utf8"] = 5] = "Utf8";
        Type[Type["Bool"] = 6] = "Bool";
        Type[Type["Decimal"] = 7] = "Decimal";
        Type[Type["Date"] = 8] = "Date";
        Type[Type["Time"] = 9] = "Time";
        Type[Type["Timestamp"] = 10] = "Timestamp";
        Type[Type["Interval"] = 11] = "Interval";
        Type[Type["List"] = 12] = "List";
        Type[Type["Struct"] = 13] = "Struct";
        Type[Type["Union"] = 14] = "Union";
        Type[Type["FixedSizeBinary"] = 15] = "FixedSizeBinary";
        Type[Type["FixedSizeList"] = 16] = "FixedSizeList";
        Type[Type["Map"] = 17] = "Map";
        Type[Type["Dictionary"] = -1] = "Dictionary";
        Type[Type["Int8"] = -2] = "Int8";
        Type[Type["Int16"] = -3] = "Int16";
        Type[Type["Int32"] = -4] = "Int32";
        Type[Type["Int64"] = -5] = "Int64";
        Type[Type["Uint8"] = -6] = "Uint8";
        Type[Type["Uint16"] = -7] = "Uint16";
        Type[Type["Uint32"] = -8] = "Uint32";
        Type[Type["Uint64"] = -9] = "Uint64";
        Type[Type["Float16"] = -10] = "Float16";
        Type[Type["Float32"] = -11] = "Float32";
        Type[Type["Float64"] = -12] = "Float64";
        Type[Type["DateDay"] = -13] = "DateDay";
        Type[Type["DateMillisecond"] = -14] = "DateMillisecond";
        Type[Type["TimestampSecond"] = -15] = "TimestampSecond";
        Type[Type["TimestampMillisecond"] = -16] = "TimestampMillisecond";
        Type[Type["TimestampMicrosecond"] = -17] = "TimestampMicrosecond";
        Type[Type["TimestampNanosecond"] = -18] = "TimestampNanosecond";
        Type[Type["TimeSecond"] = -19] = "TimeSecond";
        Type[Type["TimeMillisecond"] = -20] = "TimeMillisecond";
        Type[Type["TimeMicrosecond"] = -21] = "TimeMicrosecond";
        Type[Type["TimeNanosecond"] = -22] = "TimeNanosecond";
        Type[Type["DenseUnion"] = -23] = "DenseUnion";
        Type[Type["SparseUnion"] = -24] = "SparseUnion";
        Type[Type["IntervalDayTime"] = -25] = "IntervalDayTime";
        Type[Type["IntervalYearMonth"] = -26] = "IntervalYearMonth";
    })(Type || (Type = {}));
    var BufferType;
    (function (BufferType) {
        /**
         * used in List type, Dense Union and variable length primitive types (String, Binary)
         */
        BufferType[BufferType["OFFSET"] = 0] = "OFFSET";
        /**
         * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector
         */
        BufferType[BufferType["DATA"] = 1] = "DATA";
        /**
         * Bit vector indicating if each value is null
         */
        BufferType[BufferType["VALIDITY"] = 2] = "VALIDITY";
        /**
         * Type vector used in Union type
         */
        BufferType[BufferType["TYPE"] = 3] = "TYPE";
    })(BufferType || (BufferType = {}));

    // Licensed to the Apache Software Foundation (ASF) under one
    // or more contributor license agreements.  See the NOTICE file
    // distributed with this work for additional information
    // regarding copyright ownership.  The ASF licenses this file
    // to you under the Apache License, Version 2.0 (the
    // "License"); you may not use this file except in compliance
    // with the License.  You may obtain a copy of the License at
    //
    //   http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing,
    // software distributed under the License is distributed on an
    // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    // KIND, either express or implied.  See the License for the
    // specific language governing permissions and limitations
    // under the License.
    /** @ignore */ const undf = void (0);
    /** @ignore */
    function valueToString(x) {
        if (x === null) {
            return 'null';
        }
        if (x === undf) {
            return 'undefined';
        }
        switch (typeof x) {
            case 'number': return `${x}`;
            case 'bigint': return `${x}`;
            case 'string': return `"${x}"`;
        }
        // If [Symbol.toPrimitive] is implemented (like in BN)
        // use it instead of JSON.stringify(). This ensures we
        // print BigInts, Decimals, and Binary in their native
        // representation
        if (typeof x[Symbol.toPrimitive] === 'function') {
            return x[Symbol.toPrimitive]('string');
        }
        if (ArrayBuffer.isView(x)) {
            if (x instanceof BigInt64Array || x instanceof BigUint64Array) {
                return `[${[...x].map(x => valueToString(x))}]`;
            }
            return `[${x}]`;
        }
        return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x, (_, y) => typeof y === 'bigint' ? `${y}` : y);
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');
    /** @ignore */
    function BigNum(x, ...xs) {
        if (xs.length === 0) {
            return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);
        }
        return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);
    }
    BigNum.prototype[isArrowBigNumSymbol] = true;
    BigNum.prototype.toJSON = function () { return `"${bignumToString(this)}"`; };
    BigNum.prototype.valueOf = function () { return bignumToNumber(this); };
    BigNum.prototype.toString = function () { return bignumToString(this); };
    BigNum.prototype[Symbol.toPrimitive] = function (hint = 'default') {
        switch (hint) {
            case 'number': return bignumToNumber(this);
            case 'string': return bignumToString(this);
            case 'default': return bignumToBigInt(this);
        }
        // @ts-ignore
        return bignumToString(this);
    };
    /** @ignore */
    function SignedBigNum(...args) { return BigNum.apply(this, args); }
    /** @ignore */
    function UnsignedBigNum(...args) { return BigNum.apply(this, args); }
    /** @ignore */
    function DecimalBigNum(...args) { return BigNum.apply(this, args); }
    Object.setPrototypeOf(SignedBigNum.prototype, Object.create(Int32Array.prototype));
    Object.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));
    Object.setPrototypeOf(DecimalBigNum.prototype, Object.create(Uint32Array.prototype));
    Object.assign(SignedBigNum.prototype, BigNum.prototype, { 'constructor': SignedBigNum, 'signed': true, 'TypedArray': Int32Array, 'BigIntArray': BigInt64ArrayCtor });
    Object.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64ArrayCtor });
    Object.assign(DecimalBigNum.prototype, BigNum.prototype, { 'constructor': DecimalBigNum, 'signed': true, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64ArrayCtor });
    /** @ignore */
    function bignumToNumber(bn) {
        const { buffer, byteOffset, length, 'signed': signed } = bn;
        const words = new BigUint64ArrayCtor(buffer, byteOffset, length);
        const negative = signed && words[words.length - 1] & (BigInt(1) << BigInt(63));
        let number = negative ? BigInt(1) : BigInt(0);
        let i = BigInt(0);
        if (!negative) {
            for (const word of words) {
                number += word * (BigInt(1) << (BigInt(32) * i++));
            }
        }
        else {
            for (const word of words) {
                number += ~word * (BigInt(1) << (BigInt(32) * i++));
            }
            number *= BigInt(-1);
        }
        return number;
    }
    /** @ignore */
    let bignumToString;
    /** @ignore */
    let bignumToBigInt;
    if (!BigIntAvailable) {
        bignumToString = decimalToString;
        bignumToBigInt = bignumToString;
    }
    else {
        bignumToBigInt = ((a) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : decimalToString(a));
        bignumToString = ((a) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));
    }
    /** @ignore */
    function decimalToString(a) {
        let digits = '';
        const base64 = new Uint32Array(2);
        let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);
        const checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);
        let i = -1;
        const n = base32.length - 1;
        do {
            for (base64[0] = base32[i = 0]; i < n;) {
                base32[i++] = base64[1] = base64[0] / 10;
                base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];
            }
            base32[i] = base64[1] = base64[0] / 10;
            base64[0] = base64[0] - base64[1] * 10;
            digits = `${base64[0]}${digits}`;
        } while (checks[0] || checks[1] || checks[2] || checks[3]);
        return digits ? digits : `0`;
    }
    /** @ignore */
    class BN {
        /** @nocollapse */
        static new(num, isSigned) {
            switch (isSigned) {
                case true: return new SignedBigNum(num);
                case false: return new UnsignedBigNum(num);
            }
            switch (num.constructor) {
                case Int8Array:
                case Int16Array:
                case Int32Array:
                case BigInt64ArrayCtor:
                    return new SignedBigNum(num);
            }
            if (num.byteLength === 16) {
                return new DecimalBigNum(num);
            }
            return new UnsignedBigNum(num);
        }
        /** @nocollapse */
        static signed(num) {
            return new SignedBigNum(num);
        }
        /** @nocollapse */
        static unsigned(num) {
            return new UnsignedBigNum(num);
        }
        /** @nocollapse */
        static decimal(num) {
            return new DecimalBigNum(num);
        }
        constructor(num, isSigned) {
            return BN.new(num, isSigned);
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    // or more contributor license agreements.  See the NOTICE file
    // distributed with this work for additional information
    // regarding copyright ownership.  The ASF licenses this file
    // to you under the Apache License, Version 2.0 (the
    // "License"); you may not use this file except in compliance
    // with the License.  You may obtain a copy of the License at
    //
    //   http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing,
    // software distributed under the License is distributed on an
    // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    // KIND, either express or implied.  See the License for the
    // specific language governing permissions and limitations
    // under the License.
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    /**
     * An abstract base class for classes that encapsulate metadata about each of
     * the logical types that Arrow can represent.
     */
    class DataType {
        /** @nocollapse */ static isNull(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Null; }
        /** @nocollapse */ static isInt(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Int; }
        /** @nocollapse */ static isFloat(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Float; }
        /** @nocollapse */ static isBinary(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Binary; }
        /** @nocollapse */ static isUtf8(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Utf8; }
        /** @nocollapse */ static isBool(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Bool; }
        /** @nocollapse */ static isDecimal(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Decimal; }
        /** @nocollapse */ static isDate(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Date; }
        /** @nocollapse */ static isTime(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Time; }
        /** @nocollapse */ static isTimestamp(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Timestamp; }
        /** @nocollapse */ static isInterval(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Interval; }
        /** @nocollapse */ static isList(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.List; }
        /** @nocollapse */ static isStruct(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Struct; }
        /** @nocollapse */ static isUnion(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Union; }
        /** @nocollapse */ static isFixedSizeBinary(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.FixedSizeBinary; }
        /** @nocollapse */ static isFixedSizeList(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.FixedSizeList; }
        /** @nocollapse */ static isMap(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Map; }
        /** @nocollapse */ static isDictionary(x) { return (x === null || x === void 0 ? void 0 : x.typeId) === Type.Dictionary; }
        /** @nocollapse */ static isDenseUnion(x) { return DataType.isUnion(x) && x.mode === UnionMode.Dense; }
        /** @nocollapse */ static isSparseUnion(x) { return DataType.isUnion(x) && x.mode === UnionMode.Sparse; }
        get typeId() { return Type.NONE; }
    }
    _a = Symbol.toStringTag;
    DataType[_a] = ((proto) => {
        proto.children = null;
        proto.ArrayType = Array;
        return proto[Symbol.toStringTag] = 'DataType';
    })(DataType.prototype);
    /** @ignore */
    class Null extends DataType {
        toString() { return `Null`; }
        get typeId() { return Type.Null; }
    }
    _b = Symbol.toStringTag;
    Null[_b] = ((proto) => proto[Symbol.toStringTag] = 'Null')(Null.prototype);
    /** @ignore */
    class Int_ extends DataType {
        constructor(isSigned, bitWidth) {
            super();
            this.isSigned = isSigned;
            this.bitWidth = bitWidth;
        }
        get typeId() { return Type.Int; }
        get ArrayType() {
            switch (this.bitWidth) {
                case 8: return this.isSigned ? Int8Array : Uint8Array;
                case 16: return this.isSigned ? Int16Array : Uint16Array;
                case 32: return this.isSigned ? Int32Array : Uint32Array;
                case 64: return this.isSigned ? BigInt64Array : BigUint64Array;
            }
            throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
        }
        toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }
    }
    _c = Symbol.toStringTag;
    Int_[_c] = ((proto) => {
        proto.isSigned = null;
        proto.bitWidth = null;
        return proto[Symbol.toStringTag] = 'Int';
    })(Int_.prototype);
    /** @ignore */
    class Int8 extends Int_ {
        constructor() { super(true, 8); }
        get ArrayType() { return Int8Array; }
    }
    /** @ignore */
    class Int16 extends Int_ {
        constructor() { super(true, 16); }
        get ArrayType() { return Int16Array; }
    }
    /** @ignore */
    class Int32 extends Int_ {
        constructor() { super(true, 32); }
        get ArrayType() { return Int32Array; }
    }
    /** @ignore */
    class Int64 extends Int_ {
        constructor() { super(true, 64); }
        get ArrayType() { return BigInt64Array; }
    }
    /** @ignore */
    class Uint8 extends Int_ {
        constructor() { super(false, 8); }
        get ArrayType() { return Uint8Array; }
    }
    /** @ignore */
    class Uint16 extends Int_ {
        constructor() { super(false, 16); }
        get ArrayType() { return Uint16Array; }
    }
    /** @ignore */
    class Uint32 extends Int_ {
        constructor() { super(false, 32); }
        get ArrayType() { return Uint32Array; }
    }
    /** @ignore */
    class Uint64 extends Int_ {
        constructor() { super(false, 64); }
        get ArrayType() { return BigUint64Array; }
    }
    Object.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });
    Object.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });
    Object.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });
    Object.defineProperty(Int64.prototype, 'ArrayType', { value: BigInt64Array });
    Object.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });
    Object.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });
    Object.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });
    Object.defineProperty(Uint64.prototype, 'ArrayType', { value: BigUint64Array });
    /** @ignore */
    class Float extends DataType {
        constructor(precision) {
            super();
            this.precision = precision;
        }
        get typeId() { return Type.Float; }
        get ArrayType() {
            switch (this.precision) {
                case Precision.HALF: return Uint16Array;
                case Precision.SINGLE: return Float32Array;
                case Precision.DOUBLE: return Float64Array;
            }
            // @ts-ignore
            throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
        }
        toString() { return `Float${(this.precision << 5) || 16}`; }
    }
    _d = Symbol.toStringTag;
    Float[_d] = ((proto) => {
        proto.precision = null;
        return proto[Symbol.toStringTag] = 'Float';
    })(Float.prototype);
    /** @ignore */
    class Float16 extends Float {
        constructor() { super(Precision.HALF); }
    }
    /** @ignore */
    class Float32 extends Float {
        constructor() { super(Precision.SINGLE); }
    }
    /** @ignore */
    class Float64 extends Float {
        constructor() { super(Precision.DOUBLE); }
    }
    Object.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });
    Object.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });
    Object.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });
    /** @ignore */
    class Binary extends DataType {
        constructor() {
            super();
        }
        get typeId() { return Type.Binary; }
        toString() { return `Binary`; }
    }
    _e = Symbol.toStringTag;
    Binary[_e] = ((proto) => {
        proto.ArrayType = Uint8Array;
        return proto[Symbol.toStringTag] = 'Binary';
    })(Binary.prototype);
    /** @ignore */
    class Utf8 extends DataType {
        constructor() {
            super();
        }
        get typeId() { return Type.Utf8; }
        toString() { return `Utf8`; }
    }
    _f = Symbol.toStringTag;
    Utf8[_f] = ((proto) => {
        proto.ArrayType = Uint8Array;
        return proto[Symbol.toStringTag] = 'Utf8';
    })(Utf8.prototype);
    /** @ignore */
    class Bool extends DataType {
        constructor() {
            super();
        }
        get typeId() { return Type.Bool; }
        toString() { return `Bool`; }
    }
    _g = Symbol.toStringTag;
    Bool[_g] = ((proto) => {
        proto.ArrayType = Uint8Array;
        return proto[Symbol.toStringTag] = 'Bool';
    })(Bool.prototype);
    /** @ignore */
    class Decimal extends DataType {
        constructor(scale, precision, bitWidth = 128) {
            super();
            this.scale = scale;
            this.precision = precision;
            this.bitWidth = bitWidth;
        }
        get typeId() { return Type.Decimal; }
        toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }
    }
    _h = Symbol.toStringTag;
    Decimal[_h] = ((proto) => {
        proto.scale = null;
        proto.precision = null;
        proto.ArrayType = Uint32Array;
        return proto[Symbol.toStringTag] = 'Decimal';
    })(Decimal.prototype);
    /** @ignore */
    class Date_ extends DataType {
        constructor(unit) {
            super();
            this.unit = unit;
        }
        get typeId() { return Type.Date; }
        toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }
    }
    _j = Symbol.toStringTag;
    Date_[_j] = ((proto) => {
        proto.unit = null;
        proto.ArrayType = Int32Array;
        return proto[Symbol.toStringTag] = 'Date';
    })(Date_.prototype);
    /** @ignore */
    class DateDay extends Date_ {
        constructor() { super(DateUnit.DAY); }
    }
    /** @ignore */
    class DateMillisecond extends Date_ {
        constructor() { super(DateUnit.MILLISECOND); }
    }
    /** @ignore */
    class Time_ extends DataType {
        constructor(unit, bitWidth) {
            super();
            this.unit = unit;
            this.bitWidth = bitWidth;
        }
        get typeId() { return Type.Time; }
        toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }
        get ArrayType() {
            switch (this.bitWidth) {
                case 32: return Int32Array;
                case 64: return BigInt64Array;
            }
            // @ts-ignore
            throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
        }
    }
    _k = Symbol.toStringTag;
    Time_[_k] = ((proto) => {
        proto.unit = null;
        proto.bitWidth = null;
        return proto[Symbol.toStringTag] = 'Time';
    })(Time_.prototype);
    /** @ignore */
    class TimeSecond extends Time_ {
        constructor() { super(TimeUnit.SECOND, 32); }
    }
    /** @ignore */
    class TimeMillisecond extends Time_ {
        constructor() { super(TimeUnit.MILLISECOND, 32); }
    }
    /** @ignore */
    class TimeMicrosecond extends Time_ {
        constructor() { super(TimeUnit.MICROSECOND, 64); }
    }
    /** @ignore */
    class TimeNanosecond extends Time_ {
        constructor() { super(TimeUnit.NANOSECOND, 64); }
    }
    /** @ignore */
    class Timestamp_ extends DataType {
        constructor(unit, timezone) {
            super();
            this.unit = unit;
            this.timezone = timezone;
        }
        get typeId() { return Type.Timestamp; }
        toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }
    }
    _l = Symbol.toStringTag;
    Timestamp_[_l] = ((proto) => {
        proto.unit = null;
        proto.timezone = null;
        proto.ArrayType = Int32Array;
        return proto[Symbol.toStringTag] = 'Timestamp';
    })(Timestamp_.prototype);
    /** @ignore */
    class Interval_ extends DataType {
        constructor(unit) {
            super();
            this.unit = unit;
        }
        get typeId() { return Type.Interval; }
        toString() { return `Interval<${IntervalUnit[this.unit]}>`; }
    }
    _m = Symbol.toStringTag;
    Interval_[_m] = ((proto) => {
        proto.unit = null;
        proto.ArrayType = Int32Array;
        return proto[Symbol.toStringTag] = 'Interval';
    })(Interval_.prototype);
    /** @ignore */
    class IntervalDayTime extends Interval_ {
        constructor() { super(IntervalUnit.DAY_TIME); }
    }
    /** @ignore */
    class IntervalYearMonth extends Interval_ {
        constructor() { super(IntervalUnit.YEAR_MONTH); }
    }
    /** @ignore */
    class List extends DataType {
        constructor(child) {
            super();
            this.children = [child];
        }
        get typeId() { return Type.List; }
        toString() { return `List<${this.valueType}>`; }
        get valueType() { return this.children[0].type; }
        get valueField() { return this.children[0]; }
        get ArrayType() { return this.valueType.ArrayType; }
    }
    _o = Symbol.toStringTag;
    List[_o] = ((proto) => {
        proto.children = null;
        return proto[Symbol.toStringTag] = 'List';
    })(List.prototype);
    /** @ignore */
    class Struct extends DataType {
        constructor(children) {
            super();
            this.children = children;
        }
        get typeId() { return Type.Struct; }
        toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }
    }
    _p = Symbol.toStringTag;
    Struct[_p] = ((proto) => {
        proto.children = null;
        return proto[Symbol.toStringTag] = 'Struct';
    })(Struct.prototype);
    /** @ignore */
    class Union_ extends DataType {
        constructor(mode, typeIds, children) {
            super();
            this.mode = mode;
            this.children = children;
            this.typeIds = typeIds = Int32Array.from(typeIds);
            this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex, Object.create(null));
        }
        get typeId() { return Type.Union; }
        toString() {
            return `${this[Symbol.toStringTag]}<${this.children.map((x) => `${x.type}`).join(` | `)}>`;
        }
    }
    _q = Symbol.toStringTag;
    Union_[_q] = ((proto) => {
        proto.mode = null;
        proto.typeIds = null;
        proto.children = null;
        proto.typeIdToChildIndex = null;
        proto.ArrayType = Int8Array;
        return proto[Symbol.toStringTag] = 'Union';
    })(Union_.prototype);
    /** @ignore */
    class FixedSizeBinary extends DataType {
        constructor(byteWidth) {
            super();
            this.byteWidth = byteWidth;
        }
        get typeId() { return Type.FixedSizeBinary; }
        toString() { return `FixedSizeBinary[${this.byteWidth}]`; }
    }
    _r = Symbol.toStringTag;
    FixedSizeBinary[_r] = ((proto) => {
        proto.byteWidth = null;
        proto.ArrayType = Uint8Array;
        return proto[Symbol.toStringTag] = 'FixedSizeBinary';
    })(FixedSizeBinary.prototype);
    /** @ignore */
    class FixedSizeList extends DataType {
        constructor(listSize, child) {
            super();
            this.listSize = listSize;
            this.children = [child];
        }
        get typeId() { return Type.FixedSizeList; }
        get valueType() { return this.children[0].type; }
        get valueField() { return this.children[0]; }
        get ArrayType() { return this.valueType.ArrayType; }
        toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }
    }
    _s = Symbol.toStringTag;
    FixedSizeList[_s] = ((proto) => {
        proto.children = null;
        proto.listSize = null;
        return proto[Symbol.toStringTag] = 'FixedSizeList';
    })(FixedSizeList.prototype);
    /** @ignore */
    class Map_ extends DataType {
        constructor(child, keysSorted = false) {
            super();
            this.children = [child];
            this.keysSorted = keysSorted;
        }
        get typeId() { return Type.Map; }
        get keyType() { return this.children[0].type.children[0].type; }
        get valueType() { return this.children[0].type.children[1].type; }
        get childType() { return this.children[0].type; }
        toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }
    }
    _t = Symbol.toStringTag;
    Map_[_t] = ((proto) => {
        proto.children = null;
        proto.keysSorted = null;
        return proto[Symbol.toStringTag] = 'Map_';
    })(Map_.prototype);
    /** @ignore */
    const getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);
    /** @ignore */
    class Dictionary$1 extends DataType {
        constructor(dictionary, indices, id, isOrdered) {
            super();
            this.indices = indices;
            this.dictionary = dictionary;
            this.isOrdered = isOrdered || false;
            this.id = id == null ? getId() : (typeof id === 'number' ? id : id.low);
        }
        get typeId() { return Type.Dictionary; }
        get children() { return this.dictionary.children; }
        get valueType() { return this.dictionary; }
        get ArrayType() { return this.dictionary.ArrayType; }
        toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }
    }
    _u = Symbol.toStringTag;
    Dictionary$1[_u] = ((proto) => {
        proto.id = null;
        proto.indices = null;
        proto.isOrdered = null;
        proto.dictionary = null;
        return proto[Symbol.toStringTag] = 'Dictionary';
    })(Dictionary$1.prototype);
    /** @ignore */
    function strideForType(type) {
        const t = type;
        switch (type.typeId) {
            case Type.Decimal: return type.bitWidth / 32;
            case Type.Timestamp: return 2;
            case Type.Date: return 1 + t.unit;
            case Type.Interval: return 1 + t.unit;
            // case Type.Int: return 1 + +((t as Int_).bitWidth > 32);
            // case Type.Time: return 1 + +((t as Time_).bitWidth > 32);
            case Type.FixedSizeList: return t.listSize;
            case Type.FixedSizeBinary: return t.byteWidth;
            default: return 1;
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    class Visitor {
        visitMany(nodes, ...args) {
            return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));
        }
        visit(...args) {
            return this.getVisitFn(args[0], false).apply(this, args);
        }
        getVisitFn(node, throwIfNotFound = true) {
            return getVisitFn(this, node, throwIfNotFound);
        }
        getVisitFnByTypeId(typeId, throwIfNotFound = true) {
            return getVisitFnByTypeId(this, typeId, throwIfNotFound);
        }
        visitNull(_node, ..._args) { return null; }
        visitBool(_node, ..._args) { return null; }
        visitInt(_node, ..._args) { return null; }
        visitFloat(_node, ..._args) { return null; }
        visitUtf8(_node, ..._args) { return null; }
        visitBinary(_node, ..._args) { return null; }
        visitFixedSizeBinary(_node, ..._args) { return null; }
        visitDate(_node, ..._args) { return null; }
        visitTimestamp(_node, ..._args) { return null; }
        visitTime(_node, ..._args) { return null; }
        visitDecimal(_node, ..._args) { return null; }
        visitList(_node, ..._args) { return null; }
        visitStruct(_node, ..._args) { return null; }
        visitUnion(_node, ..._args) { return null; }
        visitDictionary(_node, ..._args) { return null; }
        visitInterval(_node, ..._args) { return null; }
        visitFixedSizeList(_node, ..._args) { return null; }
        visitMap(_node, ..._args) { return null; }
    }
    /** @ignore */
    function getVisitFn(visitor, node, throwIfNotFound = true) {
        if (typeof node === 'number') {
            return getVisitFnByTypeId(visitor, node, throwIfNotFound);
        }
        if (typeof node === 'string' && (node in Type)) {
            return getVisitFnByTypeId(visitor, Type[node], throwIfNotFound);
        }
        if (node && (node instanceof DataType)) {
            return getVisitFnByTypeId(visitor, inferDType(node), throwIfNotFound);
        }
        if ((node === null || node === void 0 ? void 0 : node.type) && (node.type instanceof DataType)) {
            return getVisitFnByTypeId(visitor, inferDType(node.type), throwIfNotFound);
        }
        return getVisitFnByTypeId(visitor, Type.NONE, throwIfNotFound);
    }
    /** @ignore */
    function getVisitFnByTypeId(visitor, dtype, throwIfNotFound = true) {
        let fn = null;
        switch (dtype) {
            case Type.Null:
                fn = visitor.visitNull;
                break;
            case Type.Bool:
                fn = visitor.visitBool;
                break;
            case Type.Int:
                fn = visitor.visitInt;
                break;
            case Type.Int8:
                fn = visitor.visitInt8 || visitor.visitInt;
                break;
            case Type.Int16:
                fn = visitor.visitInt16 || visitor.visitInt;
                break;
            case Type.Int32:
                fn = visitor.visitInt32 || visitor.visitInt;
                break;
            case Type.Int64:
                fn = visitor.visitInt64 || visitor.visitInt;
                break;
            case Type.Uint8:
                fn = visitor.visitUint8 || visitor.visitInt;
                break;
            case Type.Uint16:
                fn = visitor.visitUint16 || visitor.visitInt;
                break;
            case Type.Uint32:
                fn = visitor.visitUint32 || visitor.visitInt;
                break;
            case Type.Uint64:
                fn = visitor.visitUint64 || visitor.visitInt;
                break;
            case Type.Float:
                fn = visitor.visitFloat;
                break;
            case Type.Float16:
                fn = visitor.visitFloat16 || visitor.visitFloat;
                break;
            case Type.Float32:
                fn = visitor.visitFloat32 || visitor.visitFloat;
                break;
            case Type.Float64:
                fn = visitor.visitFloat64 || visitor.visitFloat;
                break;
            case Type.Utf8:
                fn = visitor.visitUtf8;
                break;
            case Type.Binary:
                fn = visitor.visitBinary;
                break;
            case Type.FixedSizeBinary:
                fn = visitor.visitFixedSizeBinary;
                break;
            case Type.Date:
                fn = visitor.visitDate;
                break;
            case Type.DateDay:
                fn = visitor.visitDateDay || visitor.visitDate;
                break;
            case Type.DateMillisecond:
                fn = visitor.visitDateMillisecond || visitor.visitDate;
                break;
            case Type.Timestamp:
                fn = visitor.visitTimestamp;
                break;
            case Type.TimestampSecond:
                fn = visitor.visitTimestampSecond || visitor.visitTimestamp;
                break;
            case Type.TimestampMillisecond:
                fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;
                break;
            case Type.TimestampMicrosecond:
                fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;
                break;
            case Type.TimestampNanosecond:
                fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;
                break;
            case Type.Time:
                fn = visitor.visitTime;
                break;
            case Type.TimeSecond:
                fn = visitor.visitTimeSecond || visitor.visitTime;
                break;
            case Type.TimeMillisecond:
                fn = visitor.visitTimeMillisecond || visitor.visitTime;
                break;
            case Type.TimeMicrosecond:
                fn = visitor.visitTimeMicrosecond || visitor.visitTime;
                break;
            case Type.TimeNanosecond:
                fn = visitor.visitTimeNanosecond || visitor.visitTime;
                break;
            case Type.Decimal:
                fn = visitor.visitDecimal;
                break;
            case Type.List:
                fn = visitor.visitList;
                break;
            case Type.Struct:
                fn = visitor.visitStruct;
                break;
            case Type.Union:
                fn = visitor.visitUnion;
                break;
            case Type.DenseUnion:
                fn = visitor.visitDenseUnion || visitor.visitUnion;
                break;
            case Type.SparseUnion:
                fn = visitor.visitSparseUnion || visitor.visitUnion;
                break;
            case Type.Dictionary:
                fn = visitor.visitDictionary;
                break;
            case Type.Interval:
                fn = visitor.visitInterval;
                break;
            case Type.IntervalDayTime:
                fn = visitor.visitIntervalDayTime || visitor.visitInterval;
                break;
            case Type.IntervalYearMonth:
                fn = visitor.visitIntervalYearMonth || visitor.visitInterval;
                break;
            case Type.FixedSizeList:
                fn = visitor.visitFixedSizeList;
                break;
            case Type.Map:
                fn = visitor.visitMap;
                break;
        }
        if (typeof fn === 'function')
            return fn;
        if (!throwIfNotFound)
            return () => null;
        throw new Error(`Unrecognized type '${Type[dtype]}'`);
    }
    /** @ignore */
    function inferDType(type) {
        switch (type.typeId) {
            case Type.Null: return Type.Null;
            case Type.Int: {
                const { bitWidth, isSigned } = type;
                switch (bitWidth) {
                    case 8: return isSigned ? Type.Int8 : Type.Uint8;
                    case 16: return isSigned ? Type.Int16 : Type.Uint16;
                    case 32: return isSigned ? Type.Int32 : Type.Uint32;
                    case 64: return isSigned ? Type.Int64 : Type.Uint64;
                }
                // @ts-ignore
                return Type.Int;
            }
            case Type.Float:
                switch (type.precision) {
                    case Precision.HALF: return Type.Float16;
                    case Precision.SINGLE: return Type.Float32;
                    case Precision.DOUBLE: return Type.Float64;
                }
                // @ts-ignore
                return Type.Float;
            case Type.Binary: return Type.Binary;
            case Type.Utf8: return Type.Utf8;
            case Type.Bool: return Type.Bool;
            case Type.Decimal: return Type.Decimal;
            case Type.Time:
                switch (type.unit) {
                    case TimeUnit.SECOND: return Type.TimeSecond;
                    case TimeUnit.MILLISECOND: return Type.TimeMillisecond;
                    case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;
                    case TimeUnit.NANOSECOND: return Type.TimeNanosecond;
                }
                // @ts-ignore
                return Type.Time;
            case Type.Timestamp:
                switch (type.unit) {
                    case TimeUnit.SECOND: return Type.TimestampSecond;
                    case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;
                    case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;
                    case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;
                }
                // @ts-ignore
                return Type.Timestamp;
            case Type.Date:
                switch (type.unit) {
                    case DateUnit.DAY: return Type.DateDay;
                    case DateUnit.MILLISECOND: return Type.DateMillisecond;
                }
                // @ts-ignore
                return Type.Date;
            case Type.Interval:
                switch (type.unit) {
                    case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;
                    case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;
                }
                // @ts-ignore
                return Type.Interval;
            case Type.Map: return Type.Map;
            case Type.List: return Type.List;
            case Type.Struct: return Type.Struct;
            case Type.Union:
                switch (type.mode) {
                    case UnionMode.Dense: return Type.DenseUnion;
                    case UnionMode.Sparse: return Type.SparseUnion;
                }
                // @ts-ignore
                return Type.Union;
            case Type.FixedSizeBinary: return Type.FixedSizeBinary;
            case Type.FixedSizeList: return Type.FixedSizeList;
            case Type.Dictionary: return Type.Dictionary;
        }
        throw new Error(`Unrecognized type '${Type[type.typeId]}'`);
    }
    // Add these here so they're picked up by the externs creator
    // in the build, and closure-compiler doesn't minify them away
    Visitor.prototype.visitInt8 = null;
    Visitor.prototype.visitInt16 = null;
    Visitor.prototype.visitInt32 = null;
    Visitor.prototype.visitInt64 = null;
    Visitor.prototype.visitUint8 = null;
    Visitor.prototype.visitUint16 = null;
    Visitor.prototype.visitUint32 = null;
    Visitor.prototype.visitUint64 = null;
    Visitor.prototype.visitFloat16 = null;
    Visitor.prototype.visitFloat32 = null;
    Visitor.prototype.visitFloat64 = null;
    Visitor.prototype.visitDateDay = null;
    Visitor.prototype.visitDateMillisecond = null;
    Visitor.prototype.visitTimestampSecond = null;
    Visitor.prototype.visitTimestampMillisecond = null;
    Visitor.prototype.visitTimestampMicrosecond = null;
    Visitor.prototype.visitTimestampNanosecond = null;
    Visitor.prototype.visitTimeSecond = null;
    Visitor.prototype.visitTimeMillisecond = null;
    Visitor.prototype.visitTimeMicrosecond = null;
    Visitor.prototype.visitTimeNanosecond = null;
    Visitor.prototype.visitDenseUnion = null;
    Visitor.prototype.visitSparseUnion = null;
    Visitor.prototype.visitIntervalDayTime = null;
    Visitor.prototype.visitIntervalYearMonth = null;

    // Licensed to the Apache Software Foundation (ASF) under one
    // or more contributor license agreements.  See the NOTICE file
    // distributed with this work for additional information
    // regarding copyright ownership.  The ASF licenses this file
    // to you under the Apache License, Version 2.0 (the
    // "License"); you may not use this file except in compliance
    // with the License.  You may obtain a copy of the License at
    //
    //   http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing,
    // software distributed under the License is distributed on an
    // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    // KIND, either express or implied.  See the License for the
    // specific language governing permissions and limitations
    // under the License.
    const f64 = new Float64Array(1);
    const u32 = new Uint32Array(f64.buffer);
    /**
     * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:
     * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29
     * @param h {number} the uint16 to convert
     * @private
     * @ignore
     */
    function uint16ToFloat64(h) {
        const expo = (h & 0x7C00) >> 10;
        const sigf = (h & 0x03FF) / 1024;
        const sign = Math.pow((-1), ((h & 0x8000) >> 15));
        switch (expo) {
            case 0x1F: return sign * (sigf ? Number.NaN : 1 / 0);
            case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);
        }
        return sign * (Math.pow(2, (expo - 15))) * (1 + sigf);
    }
    /**
     * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:
     * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43
     * @param d {number} The float64 to convert
     * @private
     * @ignore
     */
    function float64ToUint16(d) {
        if (d !== d) {
            return 0x7E00;
        } // NaN
        f64[0] = d;
        // Magic numbers:
        // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit
        // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits
        // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit
        const sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;
        let expo = (u32[1] & 0x7FF00000), sigf = 0x0000;
        if (expo >= 0x40F00000) {
            //
            // If exponent overflowed, the float16 is either NaN or Infinity.
            // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity
            //
            // Magic numbers:
            // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow
            // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits
            //
            // returns:
            // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary
            // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary
            // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary
            // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary
            //
            // If mantissa is greater than 23 bits, set to +Infinity like numpy
            if (u32[0] > 0) {
                expo = 0x7C00;
            }
            else {
                expo = (expo & 0x7C000000) >> 16;
                sigf = (u32[1] & 0x000FFFFF) >> 10;
            }
        }
        else if (expo <= 0x3F000000) {
            //
            // If exponent underflowed, the float is either signed zero or subnormal.
            //
            // Magic numbers:
            // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow
            //
            sigf = 0x100000 + (u32[1] & 0x000FFFFF);
            sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;
            expo = 0;
        }
        else {
            //
            // No overflow or underflow, rebase the exponent and round the mantissa
            // Magic numbers:
            // 0x200 = 00000010 00000000 -- masks off the 10th bit
            //
            // Ensure the first mantissa bit (the 10th one) is 1 and round
            expo = (expo - 0x3F000000) >> 10;
            sigf = ((u32[1] & 0x000FFFFF) + 0x200) >> 10;
        }
        return sign | expo | sigf & 0xFFFF;
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class SetVisitor extends Visitor {
    }
    /** @ignore */
    function wrapSet(fn) {
        return (data, _1, _2) => {
            if (data.setValid(_1, _2 != null)) {
                return fn(data, _1, _2);
            }
        };
    }
    /** @ignore */
    const setEpochMsToDays = (data, index, epochMs) => { data[index] = Math.trunc(epochMs / 86400000); };
    /** @ignore */
    const setEpochMsToMillisecondsLong = (data, index, epochMs) => {
        data[index] = Math.trunc(epochMs % 4294967296);
        data[index + 1] = Math.trunc(epochMs / 4294967296);
    };
    /** @ignore */
    const setEpochMsToMicrosecondsLong = (data, index, epochMs) => {
        data[index] = Math.trunc((epochMs * 1000) % 4294967296);
        data[index + 1] = Math.trunc((epochMs * 1000) / 4294967296);
    };
    /** @ignore */
    const setEpochMsToNanosecondsLong = (data, index, epochMs) => {
        data[index] = Math.trunc((epochMs * 1000000) % 4294967296);
        data[index + 1] = Math.trunc((epochMs * 1000000) / 4294967296);
    };
    /** @ignore */
    const setVariableWidthBytes = (values, valueOffsets, index, value) => {
        if (index + 1 < valueOffsets.length) {
            const { [index]: x, [index + 1]: y } = valueOffsets;
            values.set(value.subarray(0, y - x), x);
        }
    };
    /** @ignore */
    const setBool = ({ offset, values }, index, val) => {
        const idx = offset + index;
        val ? (values[idx >> 3] |= (1 << (idx % 8))) // true
            : (values[idx >> 3] &= ~(1 << (idx % 8))); // false
    };
    /** @ignore */
    const setInt = ({ values }, index, value) => { values[index] = value; };
    /** @ignore */
    const setFloat = ({ values }, index, value) => { values[index] = value; };
    /** @ignore */
    const setFloat16 = ({ values }, index, value) => { values[index] = float64ToUint16(value); };
    /* istanbul ignore next */
    /** @ignore */
    const setAnyFloat = (data, index, value) => {
        switch (data.type.precision) {
            case Precision.HALF:
                return setFloat16(data, index, value);
            case Precision.SINGLE:
            case Precision.DOUBLE:
                return setFloat(data, index, value);
        }
    };
    /** @ignore */
    const setDateDay = ({ values }, index, value) => { setEpochMsToDays(values, index, value.valueOf()); };
    /** @ignore */
    const setDateMillisecond = ({ values }, index, value) => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };
    /** @ignore */
    const setFixedSizeBinary = ({ stride, values }, index, value) => { values.set(value.subarray(0, stride), stride * index); };
    /** @ignore */
    const setBinary = ({ values, valueOffsets }, index, value) => setVariableWidthBytes(values, valueOffsets, index, value);
    /** @ignore */
    const setUtf8 = ({ values, valueOffsets }, index, value) => {
        setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));
    };
    /* istanbul ignore next */
    const setDate = (data, index, value) => {
        data.type.unit === DateUnit.DAY
            ? setDateDay(data, index, value)
            : setDateMillisecond(data, index, value);
    };
    /** @ignore */
    const setTimestampSecond = ({ values }, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);
    /** @ignore */
    const setTimestampMillisecond = ({ values }, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value);
    /** @ignore */
    const setTimestampMicrosecond = ({ values }, index, value) => setEpochMsToMicrosecondsLong(values, index * 2, value);
    /** @ignore */
    const setTimestampNanosecond = ({ values }, index, value) => setEpochMsToNanosecondsLong(values, index * 2, value);
    /* istanbul ignore next */
    /** @ignore */
    const setTimestamp = (data, index, value) => {
        switch (data.type.unit) {
            case TimeUnit.SECOND: return setTimestampSecond(data, index, value);
            case TimeUnit.MILLISECOND: return setTimestampMillisecond(data, index, value);
            case TimeUnit.MICROSECOND: return setTimestampMicrosecond(data, index, value);
            case TimeUnit.NANOSECOND: return setTimestampNanosecond(data, index, value);
        }
    };
    /** @ignore */
    const setTimeSecond = ({ values }, index, value) => { values[index] = value; };
    /** @ignore */
    const setTimeMillisecond = ({ values }, index, value) => { values[index] = value; };
    /** @ignore */
    const setTimeMicrosecond = ({ values }, index, value) => { values[index] = value; };
    /** @ignore */
    const setTimeNanosecond = ({ values }, index, value) => { values[index] = value; };
    /* istanbul ignore next */
    /** @ignore */
    const setTime = (data, index, value) => {
        switch (data.type.unit) {
            case TimeUnit.SECOND: return setTimeSecond(data, index, value);
            case TimeUnit.MILLISECOND: return setTimeMillisecond(data, index, value);
            case TimeUnit.MICROSECOND: return setTimeMicrosecond(data, index, value);
            case TimeUnit.NANOSECOND: return setTimeNanosecond(data, index, value);
        }
    };
    /** @ignore */
    const setDecimal = ({ values, stride }, index, value) => { values.set(value.subarray(0, stride), stride * index); };
    /** @ignore */
    const setList = (data, index, value) => {
        const values = data.children[0];
        const valueOffsets = data.valueOffsets;
        const set = instance$3.getVisitFn(values);
        if (Array.isArray(value)) {
            for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {
                set(values, itr++, value[++idx]);
            }
        }
        else {
            for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {
                set(values, itr++, value.get(++idx));
            }
        }
    };
    /** @ignore */
    const setMap = (data, index, value) => {
        const values = data.children[0];
        const { valueOffsets } = data;
        const set = instance$3.getVisitFn(values);
        let { [index]: idx, [index + 1]: end } = valueOffsets;
        const entries = value instanceof Map ? value.entries() : Object.entries(value);
        for (const val of entries) {
            set(values, idx, val);
            if (++idx >= end)
                break;
        }
    };
    /** @ignore */ const _setStructArrayValue = (o, v) => (set, c, _, i) => c && set(c, o, v[i]);
    /** @ignore */ const _setStructVectorValue = (o, v) => (set, c, _, i) => c && set(c, o, v.get(i));
    /** @ignore */ const _setStructMapValue = (o, v) => (set, c, f, _) => c && set(c, o, v.get(f.name));
    /** @ignore */ const _setStructObjectValue = (o, v) => (set, c, f, _) => c && set(c, o, v[f.name]);
    /** @ignore */
    const setStruct = (data, index, value) => {
        const childSetters = data.type.children.map((f) => instance$3.getVisitFn(f.type));
        const set = value instanceof Map ? _setStructMapValue(index, value) :
            value instanceof Vector ? _setStructVectorValue(index, value) :
                Array.isArray(value) ? _setStructArrayValue(index, value) :
                    _setStructObjectValue(index, value);
        // eslint-disable-next-line unicorn/no-array-for-each
        data.type.children.forEach((f, i) => set(childSetters[i], data.children[i], f, i));
    };
    /* istanbul ignore next */
    /** @ignore */
    const setUnion = (data, index, value) => {
        data.type.mode === UnionMode.Dense ?
            setDenseUnion(data, index, value) :
            setSparseUnion(data, index, value);
    };
    /** @ignore */
    const setDenseUnion = (data, index, value) => {
        const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];
        const child = data.children[childIndex];
        instance$3.visit(child, data.valueOffsets[index], value);
    };
    /** @ignore */
    const setSparseUnion = (data, index, value) => {
        const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];
        const child = data.children[childIndex];
        instance$3.visit(child, index, value);
    };
    /** @ignore */
    const setDictionary = (data, index, value) => {
        var _a;
        (_a = data.dictionary) === null || _a === void 0 ? void 0 : _a.set(data.values[index], value);
    };
    /* istanbul ignore next */
    /** @ignore */
    const setIntervalValue = (data, index, value) => {
        (data.type.unit === IntervalUnit.DAY_TIME)
            ? setIntervalDayTime(data, index, value)
            : setIntervalYearMonth(data, index, value);
    };
    /** @ignore */
    const setIntervalDayTime = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };
    /** @ignore */
    const setIntervalYearMonth = ({ values }, index, value) => { values[index] = (value[0] * 12) + (value[1] % 12); };
    /** @ignore */
    const setFixedSizeList = (data, index, value) => {
        const { stride } = data;
        const child = data.children[0];
        const set = instance$3.getVisitFn(child);
        if (Array.isArray(value)) {
            for (let idx = -1, offset = index * stride; ++idx < stride;) {
                set(child, offset + idx, value[idx]);
            }
        }
        else {
            for (let idx = -1, offset = index * stride; ++idx < stride;) {
                set(child, offset + idx, value.get(idx));
            }
        }
    };
    SetVisitor.prototype.visitBool = wrapSet(setBool);
    SetVisitor.prototype.visitInt = wrapSet(setInt);
    SetVisitor.prototype.visitInt8 = wrapSet(setInt);
    SetVisitor.prototype.visitInt16 = wrapSet(setInt);
    SetVisitor.prototype.visitInt32 = wrapSet(setInt);
    SetVisitor.prototype.visitInt64 = wrapSet(setInt);
    SetVisitor.prototype.visitUint8 = wrapSet(setInt);
    SetVisitor.prototype.visitUint16 = wrapSet(setInt);
    SetVisitor.prototype.visitUint32 = wrapSet(setInt);
    SetVisitor.prototype.visitUint64 = wrapSet(setInt);
    SetVisitor.prototype.visitFloat = wrapSet(setAnyFloat);
    SetVisitor.prototype.visitFloat16 = wrapSet(setFloat16);
    SetVisitor.prototype.visitFloat32 = wrapSet(setFloat);
    SetVisitor.prototype.visitFloat64 = wrapSet(setFloat);
    SetVisitor.prototype.visitUtf8 = wrapSet(setUtf8);
    SetVisitor.prototype.visitBinary = wrapSet(setBinary);
    SetVisitor.prototype.visitFixedSizeBinary = wrapSet(setFixedSizeBinary);
    SetVisitor.prototype.visitDate = wrapSet(setDate);
    SetVisitor.prototype.visitDateDay = wrapSet(setDateDay);
    SetVisitor.prototype.visitDateMillisecond = wrapSet(setDateMillisecond);
    SetVisitor.prototype.visitTimestamp = wrapSet(setTimestamp);
    SetVisitor.prototype.visitTimestampSecond = wrapSet(setTimestampSecond);
    SetVisitor.prototype.visitTimestampMillisecond = wrapSet(setTimestampMillisecond);
    SetVisitor.prototype.visitTimestampMicrosecond = wrapSet(setTimestampMicrosecond);
    SetVisitor.prototype.visitTimestampNanosecond = wrapSet(setTimestampNanosecond);
    SetVisitor.prototype.visitTime = wrapSet(setTime);
    SetVisitor.prototype.visitTimeSecond = wrapSet(setTimeSecond);
    SetVisitor.prototype.visitTimeMillisecond = wrapSet(setTimeMillisecond);
    SetVisitor.prototype.visitTimeMicrosecond = wrapSet(setTimeMicrosecond);
    SetVisitor.prototype.visitTimeNanosecond = wrapSet(setTimeNanosecond);
    SetVisitor.prototype.visitDecimal = wrapSet(setDecimal);
    SetVisitor.prototype.visitList = wrapSet(setList);
    SetVisitor.prototype.visitStruct = wrapSet(setStruct);
    SetVisitor.prototype.visitUnion = wrapSet(setUnion);
    SetVisitor.prototype.visitDenseUnion = wrapSet(setDenseUnion);
    SetVisitor.prototype.visitSparseUnion = wrapSet(setSparseUnion);
    SetVisitor.prototype.visitDictionary = wrapSet(setDictionary);
    SetVisitor.prototype.visitInterval = wrapSet(setIntervalValue);
    SetVisitor.prototype.visitIntervalDayTime = wrapSet(setIntervalDayTime);
    SetVisitor.prototype.visitIntervalYearMonth = wrapSet(setIntervalYearMonth);
    SetVisitor.prototype.visitFixedSizeList = wrapSet(setFixedSizeList);
    SetVisitor.prototype.visitMap = wrapSet(setMap);
    /** @ignore */
    const instance$3 = new SetVisitor();

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */ const kParent = Symbol.for('parent');
    /** @ignore */ const kRowIndex = Symbol.for('rowIndex');
    class StructRow {
        constructor(parent, rowIndex) {
            this[kParent] = parent;
            this[kRowIndex] = rowIndex;
            return new Proxy(this, new StructRowProxyHandler());
        }
        toArray() { return Object.values(this.toJSON()); }
        toJSON() {
            const i = this[kRowIndex];
            const parent = this[kParent];
            const keys = parent.type.children;
            const json = {};
            for (let j = -1, n = keys.length; ++j < n;) {
                json[keys[j].name] = instance$4.visit(parent.children[j], i);
            }
            return json;
        }
        toString() {
            return `{${[...this].map(([key, val]) => `${valueToString(key)}: ${valueToString(val)}`).join(', ')}}`;
        }
        [Symbol.for('nodejs.util.inspect.custom')]() {
            return this.toString();
        }
        [Symbol.iterator]() {
            return new StructRowIterator(this[kParent], this[kRowIndex]);
        }
    }
    class StructRowIterator {
        constructor(data, rowIndex) {
            this.childIndex = 0;
            this.children = data.children;
            this.rowIndex = rowIndex;
            this.childFields = data.type.children;
            this.numChildren = this.childFields.length;
        }
        [Symbol.iterator]() { return this; }
        next() {
            const i = this.childIndex;
            if (i < this.numChildren) {
                this.childIndex = i + 1;
                return {
                    done: false,
                    value: [
                        this.childFields[i].name,
                        instance$4.visit(this.children[i], this.rowIndex)
                    ]
                };
            }
            return { done: true, value: null };
        }
    }
    Object.defineProperties(StructRow.prototype, {
        [Symbol.toStringTag]: { enumerable: false, configurable: false, value: 'Row' },
        [kParent]: { writable: true, enumerable: false, configurable: false, value: null },
        [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },
    });
    class StructRowProxyHandler {
        isExtensible() { return false; }
        deleteProperty() { return false; }
        preventExtensions() { return true; }
        ownKeys(row) {
            return row[kParent].type.children.map((f) => f.name);
        }
        has(row, key) {
            return row[kParent].type.children.findIndex((f) => f.name === key) !== -1;
        }
        getOwnPropertyDescriptor(row, key) {
            if (row[kParent].type.children.findIndex((f) => f.name === key) !== -1) {
                return { writable: true, enumerable: true, configurable: true };
            }
            return;
        }
        get(row, key) {
            // Look up key in row first
            if (Reflect.has(row, key)) {
                return row[key];
            }
            const idx = row[kParent].type.children.findIndex((f) => f.name === key);
            if (idx !== -1) {
                const val = instance$4.visit(row[kParent].children[idx], row[kRowIndex]);
                // Cache key/val lookups
                Reflect.set(row, key, val);
                return val;
            }
        }
        set(row, key, val) {
            const idx = row[kParent].type.children.findIndex((f) => f.name === key);
            if (idx !== -1) {
                instance$3.visit(row[kParent].children[idx], row[kRowIndex], val);
                // Cache key/val lookups
                return Reflect.set(row, key, val);
            }
            else if (Reflect.has(row, key) || typeof key === 'symbol') {
                return Reflect.set(row, key, val);
            }
            return false;
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class GetVisitor extends Visitor {
    }
    /** @ignore */
    function wrapGet(fn) {
        return (data, _1) => data.getValid(_1) ? fn(data, _1) : null;
    }
    /** @ignore */ const epochDaysToMs = (data, index) => 86400000 * data[index];
    /** @ignore */ const epochMillisecondsLongToMs = (data, index) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);
    /** @ignore */ const epochMicrosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);
    /** @ignore */ const epochNanosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);
    /** @ignore */ const epochMillisecondsToDate = (epochMs) => new Date(epochMs);
    /** @ignore */ const epochDaysToDate = (data, index) => epochMillisecondsToDate(epochDaysToMs(data, index));
    /** @ignore */ const epochMillisecondsLongToDate = (data, index) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));
    /** @ignore */
    const getNull = (_data, _index) => null;
    /** @ignore */
    const getVariableWidthBytes = (values, valueOffsets, index) => {
        if (index + 1 >= valueOffsets.length) {
            return null;
        }
        const x = valueOffsets[index];
        const y = valueOffsets[index + 1];
        return values.subarray(x, y);
    };
    /** @ignore */
    const getBool = ({ offset, values }, index) => {
        const idx = offset + index;
        const byte = values[idx >> 3];
        return (byte & 1 << (idx % 8)) !== 0;
    };
    /** @ignore */
    const getDateDay = ({ values }, index) => epochDaysToDate(values, index);
    /** @ignore */
    const getDateMillisecond = ({ values }, index) => epochMillisecondsLongToDate(values, index * 2);
    /** @ignore */
    const getNumeric = ({ stride, values }, index) => values[stride * index];
    /** @ignore */
    const getFloat16 = ({ stride, values }, index) => uint16ToFloat64(values[stride * index]);
    /** @ignore */
    const getBigInts = ({ values }, index) => values[index];
    /** @ignore */
    const getFixedSizeBinary = ({ stride, values }, index) => values.subarray(stride * index, stride * (index + 1));
    /** @ignore */
    const getBinary = ({ values, valueOffsets }, index) => getVariableWidthBytes(values, valueOffsets, index);
    /** @ignore */
    const getUtf8 = ({ values, valueOffsets }, index) => {
        const bytes = getVariableWidthBytes(values, valueOffsets, index);
        return bytes !== null ? decodeUtf8(bytes) : null;
    };
    /* istanbul ignore next */
    /** @ignore */
    const getInt = ({ values }, index) => values[index];
    /* istanbul ignore next */
    /** @ignore */
    const getFloat = ({ type, values }, index) => (type.precision !== Precision.HALF ? values[index] : uint16ToFloat64(values[index]));
    /* istanbul ignore next */
    /** @ignore */
    const getDate = (data, index) => (data.type.unit === DateUnit.DAY
        ? getDateDay(data, index)
        : getDateMillisecond(data, index));
    /** @ignore */
    const getTimestampSecond = ({ values }, index) => 1000 * epochMillisecondsLongToMs(values, index * 2);
    /** @ignore */
    const getTimestampMillisecond = ({ values }, index) => epochMillisecondsLongToMs(values, index * 2);
    /** @ignore */
    const getTimestampMicrosecond = ({ values }, index) => epochMicrosecondsLongToMs(values, index * 2);
    /** @ignore */
    const getTimestampNanosecond = ({ values }, index) => epochNanosecondsLongToMs(values, index * 2);
    /* istanbul ignore next */
    /** @ignore */
    const getTimestamp = (data, index) => {
        switch (data.type.unit) {
            case TimeUnit.SECOND: return getTimestampSecond(data, index);
            case TimeUnit.MILLISECOND: return getTimestampMillisecond(data, index);
            case TimeUnit.MICROSECOND: return getTimestampMicrosecond(data, index);
            case TimeUnit.NANOSECOND: return getTimestampNanosecond(data, index);
        }
    };
    /** @ignore */
    const getTimeSecond = ({ values }, index) => values[index];
    /** @ignore */
    const getTimeMillisecond = ({ values }, index) => values[index];
    /** @ignore */
    const getTimeMicrosecond = ({ values }, index) => values[index];
    /** @ignore */
    const getTimeNanosecond = ({ values }, index) => values[index];
    /* istanbul ignore next */
    /** @ignore */
    const getTime = (data, index) => {
        switch (data.type.unit) {
            case TimeUnit.SECOND: return getTimeSecond(data, index);
            case TimeUnit.MILLISECOND: return getTimeMillisecond(data, index);
            case TimeUnit.MICROSECOND: return getTimeMicrosecond(data, index);
            case TimeUnit.NANOSECOND: return getTimeNanosecond(data, index);
        }
    };
    /** @ignore */
    const getDecimal = ({ values, stride }, index) => BN.decimal(values.subarray(stride * index, stride * (index + 1)));
    /** @ignore */
    const getList = (data, index) => {
        const { valueOffsets, stride, children } = data;
        const { [index * stride]: begin, [index * stride + 1]: end } = valueOffsets;
        const child = children[0];
        const slice = child.slice(begin, end - begin);
        return new Vector([slice]);
    };
    /** @ignore */
    const getMap = (data, index) => {
        const { valueOffsets, children } = data;
        const { [index]: begin, [index + 1]: end } = valueOffsets;
        const child = children[0];
        return new MapRow(child.slice(begin, end - begin));
    };
    /** @ignore */
    const getStruct = (data, index) => {
        return new StructRow(data, index);
    };
    /* istanbul ignore next */
    /** @ignore */
    const getUnion = (data, index) => {
        return data.type.mode === UnionMode.Dense ?
            getDenseUnion(data, index) :
            getSparseUnion(data, index);
    };
    /** @ignore */
    const getDenseUnion = (data, index) => {
        const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];
        const child = data.children[childIndex];
        return instance$4.visit(child, data.valueOffsets[index]);
    };
    /** @ignore */
    const getSparseUnion = (data, index) => {
        const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];
        const child = data.children[childIndex];
        return instance$4.visit(child, index);
    };
    /** @ignore */
    const getDictionary = (data, index) => {
        var _a;
        return (_a = data.dictionary) === null || _a === void 0 ? void 0 : _a.get(data.values[index]);
    };
    /* istanbul ignore next */
    /** @ignore */
    const getInterval = (data, index) => (data.type.unit === IntervalUnit.DAY_TIME)
        ? getIntervalDayTime(data, index)
        : getIntervalYearMonth(data, index);
    /** @ignore */
    const getIntervalDayTime = ({ values }, index) => values.subarray(2 * index, 2 * (index + 1));
    /** @ignore */
    const getIntervalYearMonth = ({ values }, index) => {
        const interval = values[index];
        const int32s = new Int32Array(2);
        int32s[0] = Math.trunc(interval / 12); /* years */
        int32s[1] = Math.trunc(interval % 12); /* months */
        return int32s;
    };
    /** @ignore */
    const getFixedSizeList = (data, index) => {
        const { stride, children } = data;
        const child = children[0];
        const slice = child.slice(index * stride, stride);
        return new Vector([slice]);
    };
    GetVisitor.prototype.visitNull = wrapGet(getNull);
    GetVisitor.prototype.visitBool = wrapGet(getBool);
    GetVisitor.prototype.visitInt = wrapGet(getInt);
    GetVisitor.prototype.visitInt8 = wrapGet(getNumeric);
    GetVisitor.prototype.visitInt16 = wrapGet(getNumeric);
    GetVisitor.prototype.visitInt32 = wrapGet(getNumeric);
    GetVisitor.prototype.visitInt64 = wrapGet(getBigInts);
    GetVisitor.prototype.visitUint8 = wrapGet(getNumeric);
    GetVisitor.prototype.visitUint16 = wrapGet(getNumeric);
    GetVisitor.prototype.visitUint32 = wrapGet(getNumeric);
    GetVisitor.prototype.visitUint64 = wrapGet(getBigInts);
    GetVisitor.prototype.visitFloat = wrapGet(getFloat);
    GetVisitor.prototype.visitFloat16 = wrapGet(getFloat16);
    GetVisitor.prototype.visitFloat32 = wrapGet(getNumeric);
    GetVisitor.prototype.visitFloat64 = wrapGet(getNumeric);
    GetVisitor.prototype.visitUtf8 = wrapGet(getUtf8);
    GetVisitor.prototype.visitBinary = wrapGet(getBinary);
    GetVisitor.prototype.visitFixedSizeBinary = wrapGet(getFixedSizeBinary);
    GetVisitor.prototype.visitDate = wrapGet(getDate);
    GetVisitor.prototype.visitDateDay = wrapGet(getDateDay);
    GetVisitor.prototype.visitDateMillisecond = wrapGet(getDateMillisecond);
    GetVisitor.prototype.visitTimestamp = wrapGet(getTimestamp);
    GetVisitor.prototype.visitTimestampSecond = wrapGet(getTimestampSecond);
    GetVisitor.prototype.visitTimestampMillisecond = wrapGet(getTimestampMillisecond);
    GetVisitor.prototype.visitTimestampMicrosecond = wrapGet(getTimestampMicrosecond);
    GetVisitor.prototype.visitTimestampNanosecond = wrapGet(getTimestampNanosecond);
    GetVisitor.prototype.visitTime = wrapGet(getTime);
    GetVisitor.prototype.visitTimeSecond = wrapGet(getTimeSecond);
    GetVisitor.prototype.visitTimeMillisecond = wrapGet(getTimeMillisecond);
    GetVisitor.prototype.visitTimeMicrosecond = wrapGet(getTimeMicrosecond);
    GetVisitor.prototype.visitTimeNanosecond = wrapGet(getTimeNanosecond);
    GetVisitor.prototype.visitDecimal = wrapGet(getDecimal);
    GetVisitor.prototype.visitList = wrapGet(getList);
    GetVisitor.prototype.visitStruct = wrapGet(getStruct);
    GetVisitor.prototype.visitUnion = wrapGet(getUnion);
    GetVisitor.prototype.visitDenseUnion = wrapGet(getDenseUnion);
    GetVisitor.prototype.visitSparseUnion = wrapGet(getSparseUnion);
    GetVisitor.prototype.visitDictionary = wrapGet(getDictionary);
    GetVisitor.prototype.visitInterval = wrapGet(getInterval);
    GetVisitor.prototype.visitIntervalDayTime = wrapGet(getIntervalDayTime);
    GetVisitor.prototype.visitIntervalYearMonth = wrapGet(getIntervalYearMonth);
    GetVisitor.prototype.visitFixedSizeList = wrapGet(getFixedSizeList);
    GetVisitor.prototype.visitMap = wrapGet(getMap);
    /** @ignore */
    const instance$4 = new GetVisitor();

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */ const kKeys = Symbol.for('keys');
    /** @ignore */ const kVals = Symbol.for('vals');
    class MapRow {
        constructor(slice) {
            this[kKeys] = new Vector([slice.children[0]]).memoize();
            this[kVals] = slice.children[1];
            return new Proxy(this, new MapRowProxyHandler());
        }
        [Symbol.iterator]() {
            return new MapRowIterator(this[kKeys], this[kVals]);
        }
        get size() { return this[kKeys].length; }
        toArray() { return Object.values(this.toJSON()); }
        toJSON() {
            const keys = this[kKeys];
            const vals = this[kVals];
            const json = {};
            for (let i = -1, n = keys.length; ++i < n;) {
                json[keys.get(i)] = instance$4.visit(vals, i);
            }
            return json;
        }
        toString() {
            return `{${[...this].map(([key, val]) => `${valueToString(key)}: ${valueToString(val)}`).join(', ')}}`;
        }
        [Symbol.for('nodejs.util.inspect.custom')]() {
            return this.toString();
        }
    }
    class MapRowIterator {
        constructor(keys, vals) {
            this.keys = keys;
            this.vals = vals;
            this.keyIndex = 0;
            this.numKeys = keys.length;
        }
        [Symbol.iterator]() { return this; }
        next() {
            const i = this.keyIndex;
            if (i === this.numKeys) {
                return { done: true, value: null };
            }
            this.keyIndex++;
            return {
                done: false,
                value: [
                    this.keys.get(i),
                    instance$4.visit(this.vals, i),
                ]
            };
        }
    }
    /** @ignore */
    class MapRowProxyHandler {
        isExtensible() { return false; }
        deleteProperty() { return false; }
        preventExtensions() { return true; }
        ownKeys(row) {
            return row[kKeys].toArray().map(String);
        }
        has(row, key) {
            return row[kKeys].includes(key);
        }
        getOwnPropertyDescriptor(row, key) {
            const idx = row[kKeys].indexOf(key);
            if (idx !== -1) {
                return { writable: true, enumerable: true, configurable: true };
            }
            return;
        }
        get(row, key) {
            // Look up key in row first
            if (Reflect.has(row, key)) {
                return row[key];
            }
            const idx = row[kKeys].indexOf(key);
            if (idx !== -1) {
                const val = instance$4.visit(Reflect.get(row, kVals), idx);
                // Cache key/val lookups
                Reflect.set(row, key, val);
                return val;
            }
        }
        set(row, key, val) {
            const idx = row[kKeys].indexOf(key);
            if (idx !== -1) {
                instance$3.visit(Reflect.get(row, kVals), idx, val);
                // Cache key/val lookups
                return Reflect.set(row, key, val);
            }
            else if (Reflect.has(row, key)) {
                return Reflect.set(row, key, val);
            }
            return false;
        }
    }
    Object.defineProperties(MapRow.prototype, {
        [Symbol.toStringTag]: { enumerable: false, configurable: false, value: 'Row' },
        [kKeys]: { writable: true, enumerable: false, configurable: false, value: null },
        [kVals]: { writable: true, enumerable: false, configurable: false, value: null },
    });

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    let tmp;
    /** @ignore */
    function clampRange(source, begin, end, then) {
        // Adjust args similar to Array.prototype.slice. Normalize begin/end to
        // clamp between 0 and length, and wrap around on negative indices, e.g.
        // slice(-1, 5) or slice(5, -1)
        const { length: len = 0 } = source;
        let lhs = typeof begin !== 'number' ? 0 : begin;
        let rhs = typeof end !== 'number' ? len : end;
        // wrap around on negative start/end positions
        (lhs < 0) && (lhs = ((lhs % len) + len) % len);
        (rhs < 0) && (rhs = ((rhs % len) + len) % len);
        // ensure lhs <= rhs
        (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);
        // ensure rhs <= length
        (rhs > len) && (rhs = len);
        return then ? then(source, lhs, rhs) : [lhs, rhs];
    }
    const isNaNFast = (value) => value !== value;
    /** @ignore */
    function createElementComparator(search) {
        const typeofSearch = typeof search;
        // Compare primitives
        if (typeofSearch !== 'object' || search === null) {
            // Compare NaN
            if (isNaNFast(search)) {
                return isNaNFast;
            }
            return (value) => value === search;
        }
        // Compare Dates
        if (search instanceof Date) {
            const valueOfSearch = search.valueOf();
            return (value) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;
        }
        // Compare TypedArrays
        if (ArrayBuffer.isView(search)) {
            return (value) => value ? compareArrayLike(search, value) : false;
        }
        // Compare Maps and Rows
        if (search instanceof Map) {
            return createMapComparator(search);
        }
        // Compare Array-likes
        if (Array.isArray(search)) {
            return createArrayLikeComparator(search);
        }
        // Compare Vectors
        if (search instanceof Vector) {
            return createVectorComparator(search);
        }
        return createObjectComparator(search, true);
        // Compare non-empty Objects
        // return createObjectComparator(search, search instanceof Proxy);
    }
    /** @ignore */
    function createArrayLikeComparator(lhs) {
        const comparators = [];
        for (let i = -1, n = lhs.length; ++i < n;) {
            comparators[i] = createElementComparator(lhs[i]);
        }
        return createSubElementsComparator(comparators);
    }
    /** @ignore */
    function createMapComparator(lhs) {
        let i = -1;
        const comparators = [];
        for (const v of lhs.values())
            comparators[++i] = createElementComparator(v);
        return createSubElementsComparator(comparators);
    }
    /** @ignore */
    function createVectorComparator(lhs) {
        const comparators = [];
        for (let i = -1, n = lhs.length; ++i < n;) {
            comparators[i] = createElementComparator(lhs.get(i));
        }
        return createSubElementsComparator(comparators);
    }
    /** @ignore */
    function createObjectComparator(lhs, allowEmpty = false) {
        const keys = Object.keys(lhs);
        // Only compare non-empty Objects
        if (!allowEmpty && keys.length === 0) {
            return () => false;
        }
        const comparators = [];
        for (let i = -1, n = keys.length; ++i < n;) {
            comparators[i] = createElementComparator(lhs[keys[i]]);
        }
        return createSubElementsComparator(comparators, keys);
    }
    function createSubElementsComparator(comparators, keys) {
        return (rhs) => {
            if (!rhs || typeof rhs !== 'object') {
                return false;
            }
            switch (rhs.constructor) {
                case Array: return compareArray(comparators, rhs);
                case Map:
                    return compareObject(comparators, rhs, rhs.keys());
                case MapRow:
                case StructRow:
                case Object:
                case undefined: // support `Object.create(null)` objects
                    return compareObject(comparators, rhs, keys || Object.keys(rhs));
            }
            return rhs instanceof Vector ? compareVector(comparators, rhs) : false;
        };
    }
    function compareArray(comparators, arr) {
        const n = comparators.length;
        if (arr.length !== n) {
            return false;
        }
        for (let i = -1; ++i < n;) {
            if (!(comparators[i](arr[i]))) {
                return false;
            }
        }
        return true;
    }
    function compareVector(comparators, vec) {
        const n = comparators.length;
        if (vec.length !== n) {
            return false;
        }
        for (let i = -1; ++i < n;) {
            if (!(comparators[i](vec.get(i)))) {
                return false;
            }
        }
        return true;
    }
    function compareObject(comparators, obj, keys) {
        const lKeyItr = keys[Symbol.iterator]();
        const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();
        const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();
        let i = 0;
        const n = comparators.length;
        let rVal = rValItr.next();
        let lKey = lKeyItr.next();
        let rKey = rKeyItr.next();
        for (; i < n && !lKey.done && !rKey.done && !rVal.done; ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {
            if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {
                break;
            }
        }
        if (i === n && lKey.done && rKey.done && rVal.done) {
            return true;
        }
        lKeyItr.return && lKeyItr.return();
        rKeyItr.return && rKeyItr.return();
        rValItr.return && rValItr.return();
        return false;
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    // or more contributor license agreements.  See the NOTICE file
    // distributed with this work for additional information
    // regarding copyright ownership.  The ASF licenses this file
    // to you under the Apache License, Version 2.0 (the
    // "License"); you may not use this file except in compliance
    // with the License.  You may obtain a copy of the License at
    //
    //   http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing,
    // software distributed under the License is distributed on an
    // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    // KIND, either express or implied.  See the License for the
    // specific language governing permissions and limitations
    // under the License.
    /** @ignore */
    function getBool$1(_data, _index, byte, bit) {
        return (byte & 1 << bit) !== 0;
    }
    /** @ignore */
    function getBit(_data, _index, byte, bit) {
        return (byte & 1 << bit) >> bit;
    }
    /** @ignore */
    function truncateBitmap(offset, length, bitmap) {
        const alignedSize = (bitmap.byteLength + 7) & ~7;
        if (offset > 0 || bitmap.byteLength < alignedSize) {
            const bytes = new Uint8Array(alignedSize);
            // If the offset is a multiple of 8 bits, it's safe to slice the bitmap
            bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :
                // Otherwise iterate each bit from the offset and return a new one
                packBools(new BitIterator(bitmap, offset, length, null, getBool$1)).subarray(0, alignedSize));
            return bytes;
        }
        return bitmap;
    }
    /** @ignore */
    function packBools(values) {
        const xs = [];
        let i = 0, bit = 0, byte = 0;
        for (const value of values) {
            value && (byte |= 1 << bit);
            if (++bit === 8) {
                xs[i++] = byte;
                byte = bit = 0;
            }
        }
        if (i === 0 || bit > 0) {
            xs[i++] = byte;
        }
        const b = new Uint8Array((xs.length + 7) & ~7);
        b.set(xs);
        return b;
    }
    /** @ignore */
    class BitIterator {
        constructor(bytes, begin, length, context, get) {
            this.bytes = bytes;
            this.length = length;
            this.context = context;
            this.get = get;
            this.bit = begin % 8;
            this.byteIndex = begin >> 3;
            this.byte = bytes[this.byteIndex++];
            this.index = 0;
        }
        next() {
            if (this.index < this.length) {
                if (this.bit === 8) {
                    this.bit = 0;
                    this.byte = this.bytes[this.byteIndex++];
                }
                return {
                    value: this.get(this.context, this.index++, this.byte, this.bit++)
                };
            }
            return { done: true, value: null };
        }
        [Symbol.iterator]() {
            return this;
        }
    }
    /**
     * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.
     * @param vector The Uint8Array of bits for which to compute the population count.
     * @param lhs The range's left-hand side (or start) bit
     * @param rhs The range's right-hand side (or end) bit
     */
    /** @ignore */
    function popcnt_bit_range(data, lhs, rhs) {
        if (rhs - lhs <= 0) {
            return 0;
        }
        // If the bit range is less than one byte, sum the 1 bits in the bit range
        if (rhs - lhs < 8) {
            let sum = 0;
            for (const bit of new BitIterator(data, lhs, rhs - lhs, data, getBit)) {
                sum += bit;
            }
            return sum;
        }
        // Get the next lowest multiple of 8 from the right hand side
        const rhsInside = rhs >> 3 << 3;
        // Get the next highest multiple of 8 from the left hand side
        const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);
        return (
        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8
        popcnt_bit_range(data, lhs, lhsInside) +
            // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8
            popcnt_bit_range(data, rhsInside, rhs) +
            // Get the popcnt of all bits between the left and right hand sides' multiples of 8
            popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3));
    }
    /** @ignore */
    function popcnt_array(arr, byteOffset, byteLength) {
        let cnt = 0, pos = Math.trunc(byteOffset);
        const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
        const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;
        while (len - pos >= 4) {
            cnt += popcnt_uint32(view.getUint32(pos));
            pos += 4;
        }
        while (len - pos >= 2) {
            cnt += popcnt_uint32(view.getUint16(pos));
            pos += 2;
        }
        while (len - pos >= 1) {
            cnt += popcnt_uint32(view.getUint8(pos));
            pos += 1;
        }
        return cnt;
    }
    /** @ignore */
    function popcnt_uint32(uint32) {
        let i = Math.trunc(uint32);
        i = i - ((i >>> 1) & 0x55555555);
        i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);
        return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */ const kUnknownNullCount = -1;
    /**
     * Data structure underlying {@link Vector}s. Use the convenience method {@link makeData}.
     */
    class Data {
        constructor(type, offset, length, nullCount, buffers, children = [], dictionary) {
            this.type = type;
            this.children = children;
            this.dictionary = dictionary;
            this.offset = Math.floor(Math.max(offset || 0, 0));
            this.length = Math.floor(Math.max(length || 0, 0));
            this._nullCount = Math.floor(Math.max(nullCount || 0, -1));
            let buffer;
            if (buffers instanceof Data) {
                this.stride = buffers.stride;
                this.values = buffers.values;
                this.typeIds = buffers.typeIds;
                this.nullBitmap = buffers.nullBitmap;
                this.valueOffsets = buffers.valueOffsets;
            }
            else {
                this.stride = strideForType(type);
                if (buffers) {
                    (buffer = buffers[0]) && (this.valueOffsets = buffer);
                    (buffer = buffers[1]) && (this.values = buffer);
                    (buffer = buffers[2]) && (this.nullBitmap = buffer);
                    (buffer = buffers[3]) && (this.typeIds = buffer);
                }
            }
            this.nullable = this._nullCount !== 0 && this.nullBitmap && this.nullBitmap.byteLength > 0;
        }
        get typeId() { return this.type.typeId; }
        get ArrayType() { return this.type.ArrayType; }
        get buffers() {
            return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];
        }
        get byteLength() {
            let byteLength = 0;
            const { valueOffsets, values, nullBitmap, typeIds } = this;
            valueOffsets && (byteLength += valueOffsets.byteLength);
            values && (byteLength += values.byteLength);
            nullBitmap && (byteLength += nullBitmap.byteLength);
            typeIds && (byteLength += typeIds.byteLength);
            return this.children.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);
        }
        get nullCount() {
            let nullCount = this._nullCount;
            let nullBitmap;
            if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {
                this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);
            }
            return nullCount;
        }
        getValid(index) {
            if (this.nullable && this.nullCount > 0) {
                const pos = this.offset + index;
                const val = this.nullBitmap[pos >> 3];
                return (val & (1 << (pos % 8))) !== 0;
            }
            return true;
        }
        setValid(index, value) {
            // Don't interact w/ nullBitmap if not nullable
            if (!this.nullable) {
                return value;
            }
            // If no null bitmap, initialize one on the fly
            if (!this.nullBitmap || this.nullBitmap.byteLength <= (index >> 3)) {
                const { nullBitmap } = this._changeLengthAndBackfillNullBitmap(this.length);
                Object.assign(this, { nullBitmap, _nullCount: 0 });
            }
            const { nullBitmap, offset } = this;
            const pos = (offset + index) >> 3;
            const bit = (offset + index) % 8;
            const val = (nullBitmap[pos] >> bit) & 1;
            // If `val` is truthy and the current bit is 0, flip it to 1 and increment `_nullCount`.
            // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `_nullCount`.
            value ? val === 0 && ((nullBitmap[pos] |= (1 << bit)), (this._nullCount = this.nullCount + 1))
                : val === 1 && ((nullBitmap[pos] &= ~(1 << bit)), (this._nullCount = this.nullCount - 1));
            return value;
        }
        clone(type = this.type, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers = this, children = this.children) {
            return new Data(type, offset, length, nullCount, buffers, children, this.dictionary);
        }
        slice(offset, length) {
            const { stride, typeId, children } = this;
            // +true === 1, +false === 0, so this means
            // we keep nullCount at 0 if it's already 0,
            // otherwise set to the invalidated flag -1
            const nullCount = +(this._nullCount === 0) - 1;
            const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;
            const buffers = this._sliceBuffers(offset, length, stride, typeId);
            return this.clone(this.type, this.offset + offset, length, nullCount, buffers, 
            // Don't slice children if we have value offsets (the variable-width types)
            (children.length === 0 || this.valueOffsets) ? children : this._sliceChildren(children, childStride * offset, childStride * length));
        }
        _changeLengthAndBackfillNullBitmap(newLength) {
            if (this.typeId === Type.Null) {
                return this.clone(this.type, 0, newLength, 0);
            }
            const { length, nullCount } = this;
            // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)
            const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);
            // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)
            bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;
            // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s
            if (nullCount > 0) {
                bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);
            }
            const buffers = this.buffers;
            buffers[BufferType.VALIDITY] = bitmap;
            return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);
        }
        _sliceBuffers(offset, length, stride, typeId) {
            let arr;
            const { buffers } = this;
            // If typeIds exist, slice the typeIds buffer
            (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));
            // If offsets exist, only slice the offsets buffer
            (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||
                // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes
                (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));
            return buffers;
        }
        _sliceChildren(children, offset, length) {
            return children.map((child) => child.slice(offset, length));
        }
    }
    Data.prototype.children = Object.freeze([]);
    class MakeDataVisitor extends Visitor {
        visit(props) {
            return this.getVisitFn(props['type']).call(this, props);
        }
        visitNull(props) {
            const { ['type']: type, ['offset']: offset = 0, ['length']: length = 0, } = props;
            return new Data(type, offset, length, 0);
        }
        visitBool(props) {
            const { ['type']: type, ['offset']: offset = 0 } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const data = toArrayBufferView(type.ArrayType, props['data']);
            const { ['length']: length = data.length >> 3, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;
            return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);
        }
        visitInt(props) {
            const { ['type']: type, ['offset']: offset = 0 } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const data = toArrayBufferView(type.ArrayType, props['data']);
            const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;
            return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);
        }
        visitFloat(props) {
            const { ['type']: type, ['offset']: offset = 0 } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const data = toArrayBufferView(type.ArrayType, props['data']);
            const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;
            return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);
        }
        visitUtf8(props) {
            const { ['type']: type, ['offset']: offset = 0 } = props;
            const data = toUint8Array(props['data']);
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const valueOffsets = toInt32Array(props['valueOffsets']);
            const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;
            return new Data(type, offset, length, nullCount, [valueOffsets, data, nullBitmap]);
        }
        visitBinary(props) {
            const { ['type']: type, ['offset']: offset = 0 } = props;
            const data = toUint8Array(props['data']);
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const valueOffsets = toInt32Array(props['valueOffsets']);
            const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;
            return new Data(type, offset, length, nullCount, [valueOffsets, data, nullBitmap]);
        }
        visitFixedSizeBinary(props) {
            const { ['type']: type, ['offset']: offset = 0 } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const data = toArrayBufferView(type.ArrayType, props['data']);
            const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;
            return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);
        }
        visitDate(props) {
            const { ['type']: type, ['offset']: offset = 0 } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const data = toArrayBufferView(type.ArrayType, props['data']);
            const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;
            return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);
        }
        visitTimestamp(props) {
            const { ['type']: type, ['offset']: offset = 0 } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const data = toArrayBufferView(type.ArrayType, props['data']);
            const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;
            return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);
        }
        visitTime(props) {
            const { ['type']: type, ['offset']: offset = 0 } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const data = toArrayBufferView(type.ArrayType, props['data']);
            const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;
            return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);
        }
        visitDecimal(props) {
            const { ['type']: type, ['offset']: offset = 0 } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const data = toArrayBufferView(type.ArrayType, props['data']);
            const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;
            return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);
        }
        visitList(props) {
            const { ['type']: type, ['offset']: offset = 0, ['child']: child } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const valueOffsets = toInt32Array(props['valueOffsets']);
            const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;
            return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap], [child]);
        }
        visitStruct(props) {
            const { ['type']: type, ['offset']: offset = 0, ['children']: children = [] } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const { length = children.reduce((len, { length }) => Math.max(len, length), 0), nullCount = props['nullBitmap'] ? -1 : 0 } = props;
            return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap], children);
        }
        visitUnion(props) {
            const { ['type']: type, ['offset']: offset = 0, ['children']: children = [] } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const typeIds = toArrayBufferView(type.ArrayType, props['typeIds']);
            const { ['length']: length = typeIds.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;
            if (DataType.isSparseUnion(type)) {
                return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap, typeIds], children);
            }
            const valueOffsets = toInt32Array(props['valueOffsets']);
            return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap, typeIds], children);
        }
        visitDictionary(props) {
            const { ['type']: type, ['offset']: offset = 0 } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const data = toArrayBufferView(type.indices.ArrayType, props['data']);
            const { ['dictionary']: dictionary = new Vector([new MakeDataVisitor().visit({ type: type.dictionary })]) } = props;
            const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;
            return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap], [], dictionary);
        }
        visitInterval(props) {
            const { ['type']: type, ['offset']: offset = 0 } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const data = toArrayBufferView(type.ArrayType, props['data']);
            const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;
            return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);
        }
        visitFixedSizeList(props) {
            const { ['type']: type, ['offset']: offset = 0, ['child']: child = new MakeDataVisitor().visit({ type: type.valueType }) } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const { ['length']: length = child.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;
            return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap], [child]);
        }
        visitMap(props) {
            const { ['type']: type, ['offset']: offset = 0, ['child']: child = new MakeDataVisitor().visit({ type: type.childType }) } = props;
            const nullBitmap = toUint8Array(props['nullBitmap']);
            const valueOffsets = toInt32Array(props['valueOffsets']);
            const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;
            return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap], [child]);
        }
    }
    function makeData(props) {
        return new MakeDataVisitor().visit(props);
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    // or more contributor license agreements.  See the NOTICE file
    // distributed with this work for additional information
    // regarding copyright ownership.  The ASF licenses this file
    // to you under the Apache License, Version 2.0 (the
    // "License"); you may not use this file except in compliance
    // with the License.  You may obtain a copy of the License at
    //
    //   http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing,
    // software distributed under the License is distributed on an
    // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    // KIND, either express or implied.  See the License for the
    // specific language governing permissions and limitations
    // under the License.
    /** @ignore */
    class ChunkedIterator {
        constructor(numChunks = 0, getChunkIterator) {
            this.numChunks = numChunks;
            this.getChunkIterator = getChunkIterator;
            this.chunkIndex = 0;
            this.chunkIterator = this.getChunkIterator(0);
        }
        next() {
            while (this.chunkIndex < this.numChunks) {
                const next = this.chunkIterator.next();
                if (!next.done) {
                    return next;
                }
                if (++this.chunkIndex < this.numChunks) {
                    this.chunkIterator = this.getChunkIterator(this.chunkIndex);
                }
            }
            return { done: true, value: null };
        }
        [Symbol.iterator]() {
            return this;
        }
    }
    /** @ignore */
    function computeChunkNullCounts(chunks) {
        return chunks.reduce((nullCount, chunk) => nullCount + chunk.nullCount, 0);
    }
    /** @ignore */
    function computeChunkOffsets(chunks) {
        return chunks.reduce((offsets, chunk, index) => {
            offsets[index + 1] = offsets[index] + chunk.length;
            return offsets;
        }, new Uint32Array(chunks.length + 1));
    }
    /** @ignore */
    function sliceChunks(chunks, offsets, begin, end) {
        const slices = [];
        for (let i = -1, n = chunks.length; ++i < n;) {
            const chunk = chunks[i];
            const offset = offsets[i];
            const { length } = chunk;
            // Stop if the child is to the right of the slice boundary
            if (offset >= end) {
                break;
            }
            // Exclude children to the left of of the slice boundary
            if (begin >= offset + length) {
                continue;
            }
            // Include entire child if between both left and right boundaries
            if (offset >= begin && (offset + length) <= end) {
                slices.push(chunk);
                continue;
            }
            // Include the child slice that overlaps one of the slice boundaries
            const from = Math.max(0, begin - offset);
            const to = Math.min(end - offset, length);
            slices.push(chunk.slice(from, to - from));
        }
        if (slices.length === 0) {
            slices.push(chunks[0].slice(0, 0));
        }
        return slices;
    }
    /** @ignore */
    function binarySearch(chunks, offsets, idx, fn) {
        let lhs = 0, mid = 0, rhs = offsets.length - 1;
        do {
            if (lhs >= rhs - 1) {
                return (idx < offsets[rhs]) ? fn(chunks, lhs, idx - offsets[lhs]) : null;
            }
            mid = lhs + (Math.trunc((rhs - lhs) * .5));
            idx < offsets[mid] ? (rhs = mid) : (lhs = mid);
        } while (lhs < rhs);
    }
    /** @ignore */
    function isChunkedValid(data, index) {
        return data.getValid(index);
    }
    /** @ignore */
    function wrapChunkedCall1(fn) {
        function chunkedFn(chunks, i, j) { return fn(chunks[i], j); }
        return function (index) {
            const data = this.data;
            return binarySearch(data, this._offsets, index, chunkedFn);
        };
    }
    /** @ignore */
    function wrapChunkedCall2(fn) {
        let _2;
        function chunkedFn(chunks, i, j) { return fn(chunks[i], j, _2); }
        return function (index, value) {
            const data = this.data;
            _2 = value;
            const result = binarySearch(data, this._offsets, index, chunkedFn);
            _2 = undefined;
            return result;
        };
    }
    /** @ignore */
    function wrapChunkedIndexOf(indexOf) {
        let _1;
        function chunkedIndexOf(data, chunkIndex, fromIndex) {
            let begin = fromIndex, index = 0, total = 0;
            for (let i = chunkIndex - 1, n = data.length; ++i < n;) {
                const chunk = data[i];
                if (~(index = indexOf(chunk, _1, begin))) {
                    return total + index;
                }
                begin = 0;
                total += chunk.length;
            }
            return -1;
        }
        return function (element, offset) {
            _1 = element;
            const data = this.data;
            const result = typeof offset !== 'number'
                ? chunkedIndexOf(data, 0, 0)
                : binarySearch(data, this._offsets, offset, chunkedIndexOf);
            _1 = undefined;
            return result;
        };
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class IndexOfVisitor extends Visitor {
    }
    /** @ignore */
    function nullIndexOf(data, searchElement) {
        // if you're looking for nulls and the vector isn't empty, we've got 'em!
        return searchElement === null && data.length > 0 ? 0 : -1;
    }
    /** @ignore */
    function indexOfNull(data, fromIndex) {
        const { nullBitmap } = data;
        if (!nullBitmap || data.nullCount <= 0) {
            return -1;
        }
        let i = 0;
        for (const isValid of new BitIterator(nullBitmap, data.offset + (fromIndex || 0), data.length, nullBitmap, getBool$1)) {
            if (!isValid) {
                return i;
            }
            ++i;
        }
        return -1;
    }
    /** @ignore */
    function indexOfValue(data, searchElement, fromIndex) {
        if (searchElement === undefined) {
            return -1;
        }
        if (searchElement === null) {
            return indexOfNull(data, fromIndex);
        }
        const get = instance$4.getVisitFn(data);
        const compare = createElementComparator(searchElement);
        for (let i = (fromIndex || 0) - 1, n = data.length; ++i < n;) {
            if (compare(get(data, i))) {
                return i;
            }
        }
        return -1;
    }
    /** @ignore */
    function indexOfUnion(data, searchElement, fromIndex) {
        // Unions are special -- they do have a nullBitmap, but so can their children.
        // If the searchElement is null, we don't know whether it came from the Union's
        // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,
        // since that will report the wrong index if a child has a null before the Union.
        const get = instance$4.getVisitFn(data);
        const compare = createElementComparator(searchElement);
        for (let i = (fromIndex || 0) - 1, n = data.length; ++i < n;) {
            if (compare(get(data, i))) {
                return i;
            }
        }
        return -1;
    }
    IndexOfVisitor.prototype.visitNull = nullIndexOf;
    IndexOfVisitor.prototype.visitBool = indexOfValue;
    IndexOfVisitor.prototype.visitInt = indexOfValue;
    IndexOfVisitor.prototype.visitInt8 = indexOfValue;
    IndexOfVisitor.prototype.visitInt16 = indexOfValue;
    IndexOfVisitor.prototype.visitInt32 = indexOfValue;
    IndexOfVisitor.prototype.visitInt64 = indexOfValue;
    IndexOfVisitor.prototype.visitUint8 = indexOfValue;
    IndexOfVisitor.prototype.visitUint16 = indexOfValue;
    IndexOfVisitor.prototype.visitUint32 = indexOfValue;
    IndexOfVisitor.prototype.visitUint64 = indexOfValue;
    IndexOfVisitor.prototype.visitFloat = indexOfValue;
    IndexOfVisitor.prototype.visitFloat16 = indexOfValue;
    IndexOfVisitor.prototype.visitFloat32 = indexOfValue;
    IndexOfVisitor.prototype.visitFloat64 = indexOfValue;
    IndexOfVisitor.prototype.visitUtf8 = indexOfValue;
    IndexOfVisitor.prototype.visitBinary = indexOfValue;
    IndexOfVisitor.prototype.visitFixedSizeBinary = indexOfValue;
    IndexOfVisitor.prototype.visitDate = indexOfValue;
    IndexOfVisitor.prototype.visitDateDay = indexOfValue;
    IndexOfVisitor.prototype.visitDateMillisecond = indexOfValue;
    IndexOfVisitor.prototype.visitTimestamp = indexOfValue;
    IndexOfVisitor.prototype.visitTimestampSecond = indexOfValue;
    IndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;
    IndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;
    IndexOfVisitor.prototype.visitTimestampNanosecond = indexOfValue;
    IndexOfVisitor.prototype.visitTime = indexOfValue;
    IndexOfVisitor.prototype.visitTimeSecond = indexOfValue;
    IndexOfVisitor.prototype.visitTimeMillisecond = indexOfValue;
    IndexOfVisitor.prototype.visitTimeMicrosecond = indexOfValue;
    IndexOfVisitor.prototype.visitTimeNanosecond = indexOfValue;
    IndexOfVisitor.prototype.visitDecimal = indexOfValue;
    IndexOfVisitor.prototype.visitList = indexOfValue;
    IndexOfVisitor.prototype.visitStruct = indexOfValue;
    IndexOfVisitor.prototype.visitUnion = indexOfValue;
    IndexOfVisitor.prototype.visitDenseUnion = indexOfUnion;
    IndexOfVisitor.prototype.visitSparseUnion = indexOfUnion;
    IndexOfVisitor.prototype.visitDictionary = indexOfValue;
    IndexOfVisitor.prototype.visitInterval = indexOfValue;
    IndexOfVisitor.prototype.visitIntervalDayTime = indexOfValue;
    IndexOfVisitor.prototype.visitIntervalYearMonth = indexOfValue;
    IndexOfVisitor.prototype.visitFixedSizeList = indexOfValue;
    IndexOfVisitor.prototype.visitMap = indexOfValue;
    /** @ignore */
    const instance$5 = new IndexOfVisitor();

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class IteratorVisitor extends Visitor {
    }
    /** @ignore */
    function vectorIterator(vector) {
        const { type } = vector;
        // Fast case, defer to native iterators if possible
        if (vector.nullCount === 0 && vector.stride === 1 && ((type.typeId === Type.Timestamp) ||
            (type instanceof Int_ && type.bitWidth !== 64) ||
            (type instanceof Time_ && type.bitWidth !== 64) ||
            (type instanceof Float && type.precision !== Precision.HALF))) {
            return new ChunkedIterator(vector.data.length, (chunkIndex) => {
                const data = vector.data[chunkIndex];
                return data.values.subarray(0, data.length)[Symbol.iterator]();
            });
        }
        // Otherwise, iterate manually
        let offset = 0;
        return new ChunkedIterator(vector.data.length, (chunkIndex) => {
            const data = vector.data[chunkIndex];
            const length = data.length;
            const inner = vector.slice(offset, offset + length);
            offset += length;
            return new VectorIterator(inner);
        });
    }
    /** @ignore */
    class VectorIterator {
        constructor(vector) {
            this.vector = vector;
            this.index = 0;
        }
        next() {
            if (this.index < this.vector.length) {
                return {
                    value: this.vector.get(this.index++)
                };
            }
            return { done: true, value: null };
        }
        [Symbol.iterator]() {
            return this;
        }
    }
    IteratorVisitor.prototype.visitNull = vectorIterator;
    IteratorVisitor.prototype.visitBool = vectorIterator;
    IteratorVisitor.prototype.visitInt = vectorIterator;
    IteratorVisitor.prototype.visitInt8 = vectorIterator;
    IteratorVisitor.prototype.visitInt16 = vectorIterator;
    IteratorVisitor.prototype.visitInt32 = vectorIterator;
    IteratorVisitor.prototype.visitInt64 = vectorIterator;
    IteratorVisitor.prototype.visitUint8 = vectorIterator;
    IteratorVisitor.prototype.visitUint16 = vectorIterator;
    IteratorVisitor.prototype.visitUint32 = vectorIterator;
    IteratorVisitor.prototype.visitUint64 = vectorIterator;
    IteratorVisitor.prototype.visitFloat = vectorIterator;
    IteratorVisitor.prototype.visitFloat16 = vectorIterator;
    IteratorVisitor.prototype.visitFloat32 = vectorIterator;
    IteratorVisitor.prototype.visitFloat64 = vectorIterator;
    IteratorVisitor.prototype.visitUtf8 = vectorIterator;
    IteratorVisitor.prototype.visitBinary = vectorIterator;
    IteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;
    IteratorVisitor.prototype.visitDate = vectorIterator;
    IteratorVisitor.prototype.visitDateDay = vectorIterator;
    IteratorVisitor.prototype.visitDateMillisecond = vectorIterator;
    IteratorVisitor.prototype.visitTimestamp = vectorIterator;
    IteratorVisitor.prototype.visitTimestampSecond = vectorIterator;
    IteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;
    IteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;
    IteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;
    IteratorVisitor.prototype.visitTime = vectorIterator;
    IteratorVisitor.prototype.visitTimeSecond = vectorIterator;
    IteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;
    IteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;
    IteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;
    IteratorVisitor.prototype.visitDecimal = vectorIterator;
    IteratorVisitor.prototype.visitList = vectorIterator;
    IteratorVisitor.prototype.visitStruct = vectorIterator;
    IteratorVisitor.prototype.visitUnion = vectorIterator;
    IteratorVisitor.prototype.visitDenseUnion = vectorIterator;
    IteratorVisitor.prototype.visitSparseUnion = vectorIterator;
    IteratorVisitor.prototype.visitDictionary = vectorIterator;
    IteratorVisitor.prototype.visitInterval = vectorIterator;
    IteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;
    IteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;
    IteratorVisitor.prototype.visitFixedSizeList = vectorIterator;
    IteratorVisitor.prototype.visitMap = vectorIterator;
    /** @ignore */
    const instance$6 = new IteratorVisitor();

    /* istanbul ignore file */
    /** @ignore */ const sum = (x, y) => x + y;
    /** @ignore */
    class GetByteLengthVisitor extends Visitor {
        visitNull(____, _) {
            return 0;
        }
        visitInt(data, _) {
            return data.type.bitWidth / 8;
        }
        visitFloat(data, _) {
            return data.type.ArrayType.BYTES_PER_ELEMENT;
        }
        visitBool(____, _) {
            return 1 / 8;
        }
        visitDecimal(data, _) {
            return data.type.bitWidth / 8;
        }
        visitDate(data, _) {
            return (data.type.unit + 1) * 4;
        }
        visitTime(data, _) {
            return data.type.bitWidth / 8;
        }
        visitTimestamp(data, _) {
            return data.type.unit === TimeUnit.SECOND ? 4 : 8;
        }
        visitInterval(data, _) {
            return (data.type.unit + 1) * 4;
        }
        visitStruct(data, i) {
            return data.children.reduce((total, child) => total + instance$7.visit(child, i), 0);
        }
        visitFixedSizeBinary(data, _) {
            return data.type.byteWidth;
        }
        visitMap(data, i) {
            // 4 + 4 for the indices
            return 8 + data.children.reduce((total, child) => total + instance$7.visit(child, i), 0);
        }
        visitDictionary(data, i) {
            var _a;
            return (data.type.indices.bitWidth / 8) + (((_a = data.dictionary) === null || _a === void 0 ? void 0 : _a.getByteLength(data.values[i])) || 0);
        }
    }
    /** @ignore */
    const getUtf8ByteLength = ({ valueOffsets }, index) => {
        // 4 + 4 for the indices, `end - start` for the data bytes
        return 8 + (valueOffsets[index + 1] - valueOffsets[index]);
    };
    /** @ignore */
    const getBinaryByteLength = ({ valueOffsets }, index) => {
        // 4 + 4 for the indices, `end - start` for the data bytes
        return 8 + (valueOffsets[index + 1] - valueOffsets[index]);
    };
    /** @ignore */
    const getListByteLength = ({ valueOffsets, stride, children }, index) => {
        const child = children[0];
        const { [index * stride]: start } = valueOffsets;
        const { [index * stride + 1]: end } = valueOffsets;
        const visit = instance$7.getVisitFn(child.type);
        const slice = child.slice(start, end - start);
        let size = 8; // 4 + 4 for the indices
        for (let idx = -1, len = end - start; ++idx < len;) {
            size += visit(slice, idx);
        }
        return size;
    };
    /** @ignore */
    const getFixedSizeListByteLength = ({ stride, children }, index) => {
        const child = children[0];
        const slice = child.slice(index * stride, stride);
        const visit = instance$7.getVisitFn(child.type);
        let size = 0;
        for (let idx = -1, len = slice.length; ++idx < len;) {
            size += visit(slice, idx);
        }
        return size;
    };
    /* istanbul ignore next */
    /** @ignore */
    const getUnionByteLength = (data, index) => {
        return data.type.mode === UnionMode.Dense ?
            getDenseUnionByteLength(data, index) :
            getSparseUnionByteLength(data, index);
    };
    /** @ignore */
    const getDenseUnionByteLength = ({ type, children, typeIds, valueOffsets }, index) => {
        const childIndex = type.typeIdToChildIndex[typeIds[index]];
        // 4 for the typeId, 4 for the valueOffsets, then the child at the offset
        return 8 + instance$7.visit(children[childIndex], valueOffsets[index]);
    };
    /** @ignore */
    const getSparseUnionByteLength = ({ children }, index) => {
        // 4 for the typeId, then once each for the children at this index
        return 4 + instance$7.visitMany(children, children.map(() => index)).reduce(sum, 0);
    };
    GetByteLengthVisitor.prototype.visitUtf8 = getUtf8ByteLength;
    GetByteLengthVisitor.prototype.visitBinary = getBinaryByteLength;
    GetByteLengthVisitor.prototype.visitList = getListByteLength;
    GetByteLengthVisitor.prototype.visitFixedSizeList = getFixedSizeListByteLength;
    GetByteLengthVisitor.prototype.visitUnion = getUnionByteLength;
    GetByteLengthVisitor.prototype.visitDenseUnion = getDenseUnionByteLength;
    GetByteLengthVisitor.prototype.visitSparseUnion = getSparseUnionByteLength;
    /** @ignore */
    const instance$7 = new GetByteLengthVisitor();

    // Licensed to the Apache Software Foundation (ASF) under one
    // or more contributor license agreements.  See the NOTICE file
    // distributed with this work for additional information
    // regarding copyright ownership.  The ASF licenses this file
    // to you under the Apache License, Version 2.0 (the
    // "License"); you may not use this file except in compliance
    // with the License.  You may obtain a copy of the License at
    //
    //   http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing,
    // software distributed under the License is distributed on an
    // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    // KIND, either express or implied.  See the License for the
    // specific language governing permissions and limitations
    // under the License.
    var _a$1;
    const visitorsByTypeId = {};
    const vectorPrototypesByTypeId = {};
    /**
     * Array-like data structure. Use the convenience method {@link makeVector} and {@link vectorFromArray} to create vectors.
     */
    class Vector {
        constructor(input) {
            var _b, _c, _d;
            const data = input[0] instanceof Vector
                ? input.flatMap(x => x.data)
                : input;
            if (data.length === 0 || data.some((x) => !(x instanceof Data))) {
                throw new TypeError('Vector constructor expects an Array of Data instances.');
            }
            const type = (_b = data[0]) === null || _b === void 0 ? void 0 : _b.type;
            switch (data.length) {
                case 0:
                    this._offsets = [0];
                    break;
                case 1: {
                    // special case for unchunked vectors
                    const { get, set, indexOf, byteLength } = visitorsByTypeId[type.typeId];
                    const unchunkedData = data[0];
                    this.isValid = (index) => isChunkedValid(unchunkedData, index);
                    this.get = (index) => get(unchunkedData, index);
                    this.set = (index, value) => set(unchunkedData, index, value);
                    this.indexOf = (index) => indexOf(unchunkedData, index);
                    this.getByteLength = (index) => byteLength(unchunkedData, index);
                    this._offsets = [0, unchunkedData.length];
                    break;
                }
                default:
                    Object.setPrototypeOf(this, vectorPrototypesByTypeId[type.typeId]);
                    this._offsets = computeChunkOffsets(data);
                    break;
            }
            this.data = data;
            this.type = type;
            this.stride = strideForType(type);
            this.numChildren = (_d = (_c = type.children) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0;
            this.length = this._offsets[this._offsets.length - 1];
        }
        /**
         * The aggregate size (in bytes) of this Vector's buffers and/or child Vectors.
         */
        get byteLength() {
            if (this._byteLength === -1) {
                this._byteLength = this.data.reduce((byteLength, data) => byteLength + data.byteLength, 0);
            }
            return this._byteLength;
        }
        /**
         * The number of null elements in this Vector.
         */
        get nullCount() {
            if (this._nullCount === -1) {
                this._nullCount = computeChunkNullCounts(this.data);
            }
            return this._nullCount;
        }
        /**
         * The Array or TypedAray constructor used for the JS representation
         *  of the element's values in {@link Vector.prototype.toArray `toArray()`}.
         */
        get ArrayType() { return this.type.ArrayType; }
        /**
         * The name that should be printed when the Vector is logged in a message.
         */
        get [Symbol.toStringTag]() {
            return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`;
        }
        /**
         * The name of this Vector.
         */
        get VectorName() { return `${Type[this.type.typeId]}Vector`; }
        /**
         * Check whether an element is null.
         * @param index The index at which to read the validity bitmap.
         */
        // @ts-ignore
        isValid(index) { return false; }
        /**
         * Get an element value by position.
         * @param index The index of the element to read.
         */
        // @ts-ignore
        get(index) { return null; }
        /**
         * Set an element value by position.
         * @param index The index of the element to write.
         * @param value The value to set.
         */
        // @ts-ignore
        set(index, value) { return; }
        /**
         * Retrieve the index of the first occurrence of a value in an Vector.
         * @param element The value to locate in the Vector.
         * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.
         */
        // @ts-ignore
        indexOf(element, offset) { return -1; }
        includes(element, offset) { return this.indexOf(element, offset) > 0; }
        /**
         * Get the size in bytes of an element by index.
         * @param index The index at which to get the byteLength.
         */
        // @ts-ignore
        getByteLength(index) { return 0; }
        /**
         * Iterator for the Vector's elements.
         */
        [Symbol.iterator]() {
            return instance$6.visit(this);
        }
        /**
         * Combines two or more Vectors of the same type.
         * @param others Additional Vectors to add to the end of this Vector.
         */
        concat(...others) {
            return new Vector(this.data.concat(others.flatMap((x) => x.data).flat(Number.POSITIVE_INFINITY)));
        }
        /**
         * Return a zero-copy sub-section of this Vector.
         * @param start The beginning of the specified portion of the Vector.
         * @param end The end of the specified portion of the Vector. This is exclusive of the element at the index 'end'.
         */
        slice(begin, end) {
            return new Vector(clampRange(this, begin, end, ({ data, _offsets }, begin, end) => sliceChunks(data, _offsets, begin, end)));
        }
        toJSON() { return [...this]; }
        /**
         * Return a JavaScript Array or TypedArray of the Vector's elements.
         *
         * @note If this Vector contains a single Data chunk and the Vector's type is a
         *  primitive numeric type corresponding to one of the JavaScript TypedArrays, this
         *  method returns a zero-copy slice of the underlying TypedArray values. If there's
         *  more than one chunk, the resulting TypedArray will be a copy of the data from each
         *  chunk's underlying TypedArray values.
         *
         * @returns An Array or TypedArray of the Vector's elements, based on the Vector's DataType.
         */
        toArray() {
            const { type, data, length, stride, ArrayType } = this;
            // Fast case, return subarray if possible
            switch (type.typeId) {
                case Type.Int:
                case Type.Float:
                case Type.Decimal:
                case Type.Time:
                case Type.Timestamp:
                    switch (data.length) {
                        case 0: return new ArrayType();
                        case 1: return data[0].values.subarray(0, length * stride);
                        default: return data.reduce((memo, { values }) => {
                            memo.array.set(values, memo.offset);
                            memo.offset += values.length;
                            return memo;
                        }, { array: new ArrayType(length * stride), offset: 0 }).array;
                    }
            }
            // Otherwise if not primitive, slow copy
            return [...this];
        }
        /**
         * Returns a string representation of the Vector.
         *
         * @returns A string representation of the Vector.
         */
        toString() {
            return `[${[...this].join(',')}]`;
        }
        /**
         * Returns a child Vector by name, or null if this Vector has no child with the given name.
         * @param name The name of the child to retrieve.
         */
        getChild(name) {
            var _b;
            return this.getChildAt((_b = this.type.children) === null || _b === void 0 ? void 0 : _b.findIndex((f) => f.name === name));
        }
        /**
         * Returns a child Vector by index, or null if this Vector has no child at the supplied index.
         * @param index The index of the child to retrieve.
         */
        getChildAt(index) {
            if (index > -1 && index < this.numChildren) {
                return new Vector(this.data.map(({ children }) => children[index]));
            }
            return null;
        }
        get isMemoized() {
            if (DataType.isDictionary(this.type)) {
                return this.data[0].dictionary.isMemoized;
            }
            return false;
        }
        /**
         * Adds memoization to the Vector's {@link get} method. For dictionary
         * vectors, this method return a vector that memoizes only the dictionary
         * values.
         *
         * Memoization is very useful when decoding a value is expensive such as
         * Uft8. The memoization creates a cache of the size of the Vector and
         * therfore increases memory usage.
         *
         * @returns A new vector that memoizes calls to {@link get}.
         */
        memoize() {
            if (DataType.isDictionary(this.type)) {
                const dictionary = new MemoizedVector(this.data[0].dictionary);
                const newData = this.data.map((data) => {
                    const cloned = data.clone();
                    cloned.dictionary = dictionary;
                    return cloned;
                });
                return new Vector(newData);
            }
            return new MemoizedVector(this);
        }
        /**
         * Returns a vector without memoization of the {@link get} method. If this
         * vector is not memoized, this method returns this vector.
         *
         * @returns A a vector without memoization.
         */
        unmemoize() {
            if (DataType.isDictionary(this.type) && this.isMemoized) {
                const dictionary = this.data[0].dictionary.unmemoize();
                const newData = this.data.map((data) => {
                    const newData = data.clone();
                    newData.dictionary = dictionary;
                    return newData;
                });
                return new Vector(newData);
            }
            return this;
        }
    }
    _a$1 = Symbol.toStringTag;
    // Initialize this static property via an IIFE so bundlers don't tree-shake
    // out this logic, but also so we're still compliant with `"sideEffects": false`
    Vector[_a$1] = ((proto) => {
        proto.type = DataType.prototype;
        proto.data = [];
        proto.length = 0;
        proto.stride = 1;
        proto.numChildren = 0;
        proto._nullCount = -1;
        proto._byteLength = -1;
        proto._offsets = new Uint32Array([0]);
        proto[Symbol.isConcatSpreadable] = true;
        const typeIds = Object.keys(Type)
            .map((T) => Type[T])
            .filter((T) => typeof T === 'number' && T !== Type.NONE);
        for (const typeId of typeIds) {
            const get = instance$4.getVisitFnByTypeId(typeId);
            const set = instance$3.getVisitFnByTypeId(typeId);
            const indexOf = instance$5.getVisitFnByTypeId(typeId);
            const byteLength = instance$7.getVisitFnByTypeId(typeId);
            visitorsByTypeId[typeId] = { get, set, indexOf, byteLength };
            vectorPrototypesByTypeId[typeId] = Object.create(proto, {
                ['isValid']: { value: wrapChunkedCall1(isChunkedValid) },
                ['get']: { value: wrapChunkedCall1(instance$4.getVisitFnByTypeId(typeId)) },
                ['set']: { value: wrapChunkedCall2(instance$3.getVisitFnByTypeId(typeId)) },
                ['indexOf']: { value: wrapChunkedIndexOf(instance$5.getVisitFnByTypeId(typeId)) },
                ['getByteLength']: { value: wrapChunkedCall1(instance$7.getVisitFnByTypeId(typeId)) },
            });
        }
        return 'Vector';
    })(Vector.prototype);
    class MemoizedVector extends Vector {
        constructor(vector) {
            super(vector.data);
            const get = this.get;
            const set = this.set;
            const slice = this.slice;
            const cache = new Array(this.length);
            Object.defineProperty(this, 'get', {
                value(index) {
                    const cachedValue = cache[index];
                    if (cachedValue !== undefined) {
                        return cachedValue;
                    }
                    const value = get.call(this, index);
                    cache[index] = value;
                    return value;
                }
            });
            Object.defineProperty(this, 'set', {
                value(index, value) {
                    set.call(this, index, value);
                    cache[index] = value;
                }
            });
            Object.defineProperty(this, 'slice', {
                value: (begin, end) => new MemoizedVector(slice.call(this, begin, end))
            });
            Object.defineProperty(this, 'isMemoized', { value: true });
            Object.defineProperty(this, 'unmemoize', {
                value: () => new Vector(this.data)
            });
            Object.defineProperty(this, 'memoize', {
                value: () => this
            });
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /**
     * Dynamically compile the null values into an `isValid()` function whose
     * implementation is a switch statement. Microbenchmarks in v8 indicate
     * this approach is 25% faster than using an ES6 Map.
     *
     * @example
     * console.log(createIsValidFunction([null, 'N/A', NaN]));
     * `function (x) {
     *     if (x !== x) return false;
     *     switch (x) {
     *         case null:
     *         case "N/A":
     *             return false;
     *     }
     *     return true;
     * }`
     *
     * @ignore
     * @param nullValues
     */
    function createIsValidFunction(nullValues) {
        if (!nullValues || nullValues.length <= 0) {
            // @ts-ignore
            return function isValid(value) { return true; };
        }
        let fnBody = '';
        const noNaNs = nullValues.filter((x) => x === x);
        if (noNaNs.length > 0) {
            fnBody = `
    switch (x) {${noNaNs.map((x) => `
        case ${valueToCase(x)}:`).join('')}
            return false;
    }`;
        }
        // NaN doesn't equal anything including itself, so it doesn't work as a
        // switch case. Instead we must explicitly check for NaN before the switch.
        if (nullValues.length !== noNaNs.length) {
            fnBody = `if (x !== x) return false;\n${fnBody}`;
        }
        return new Function(`x`, `${fnBody}\nreturn true;`);
    }
    /** @ignore */
    function valueToCase(x) {
        if (typeof x !== 'bigint') {
            return valueToString(x);
        }
        else if (BigIntAvailable) {
            return `${valueToString(x)}n`;
        }
        return `"${valueToString(x)}"`;
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    const roundLengthUpToNearest64Bytes = (len, BPE) => ((((len * BPE) + 63) & ~63) || 64) / BPE;
    /** @ignore */
    const sliceOrExtendArray = (arr, len = 0) => (arr.length >= len ? arr.subarray(0, len) : memcpy(new arr.constructor(len), arr, 0));
    /** @ignore */
    class BufferBuilder {
        constructor(buffer, stride = 1) {
            this.buffer = buffer;
            this.stride = stride;
            this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;
            this.ArrayType = buffer.constructor;
            this._resize(this.length = Math.trunc(buffer.length / stride));
        }
        get byteLength() { return Math.trunc(this.length * this.stride * this.BYTES_PER_ELEMENT); }
        get reservedLength() { return this.buffer.length / this.stride; }
        get reservedByteLength() { return this.buffer.byteLength; }
        // @ts-ignore
        set(index, value) { return this; }
        append(value) { return this.set(this.length, value); }
        reserve(extra) {
            if (extra > 0) {
                this.length += extra;
                const stride = this.stride;
                const length = this.length * stride;
                const reserved = this.buffer.length;
                if (length >= reserved) {
                    this._resize(reserved === 0
                        ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)
                        : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT));
                }
            }
            return this;
        }
        flush(length = this.length) {
            length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);
            const array = sliceOrExtendArray(this.buffer, length);
            this.clear();
            return array;
        }
        clear() {
            this.length = 0;
            this._resize(0);
            return this;
        }
        _resize(newLength) {
            return this.buffer = memcpy(new this.ArrayType(newLength), this.buffer);
        }
    }
    BufferBuilder.prototype.offset = 0;
    /** @ignore */
    class DataBufferBuilder extends BufferBuilder {
        last() { return this.get(this.length - 1); }
        get(index) { return this.buffer[index]; }
        set(index, value) {
            this.reserve(index - this.length + 1);
            this.buffer[index * this.stride] = value;
            return this;
        }
    }
    /** @ignore */
    class BitmapBufferBuilder extends DataBufferBuilder {
        constructor(data = new Uint8Array(0)) {
            super(data, 1 / 8);
            this.numValid = 0;
        }
        get numInvalid() { return this.length - this.numValid; }
        get(idx) { return this.buffer[idx >> 3] >> idx % 8 & 1; }
        set(idx, val) {
            const { buffer } = this.reserve(idx - this.length + 1);
            const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;
            // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.
            // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.
            val ? cur === 0 && ((buffer[byte] |= (1 << bit)), ++this.numValid)
                : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);
            return this;
        }
        clear() {
            this.numValid = 0;
            return super.clear();
        }
    }
    /** @ignore */
    class OffsetsBufferBuilder extends DataBufferBuilder {
        constructor(data = new Int32Array(1)) { super(data, 1); }
        append(value) {
            return this.set(this.length - 1, value);
        }
        set(index, value) {
            const offset = this.length - 1;
            const buffer = this.reserve(index - offset + 1).buffer;
            if (offset < index++) {
                buffer.fill(buffer[offset], offset, index);
            }
            buffer[index] = buffer[index - 1] + value;
            return this;
        }
        flush(length = this.length - 1) {
            if (length > this.length) {
                this.set(length - 1, 0);
            }
            return super.flush(length + 1);
        }
    }
    // /** @ignore */
    // export class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {
    //     public buffer64!: R;
    //     protected _ArrayType64!: BigIntArrayConstructor<R>;
    //     public get ArrayType64() {
    //         return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));
    //     }
    //     public set(index: number, value: DataValue<T>) {
    //         this.reserve(index - this.length + 1);
    //         switch (typeof value) {
    //             case 'bigint': this.buffer64[index] = value; break;
    //             case 'number': this.buffer[index * this.stride] = value; break;
    //             default: this.buffer.set(value as TypedArray, index * this.stride);
    //         }
    //         return this;
    //     }
    //     protected _resize(newLength: number) {
    //         const data = super._resize(newLength);
    //         const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);
    //         if (BigIntAvailable) {
    //             this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);
    //         }
    //         return data;
    //     }
    // }

    // Licensed to the Apache Software Foundation (ASF) under one
    /**
     * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.
     *
     * A `Builder` is responsible for writing arbitrary JavaScript values
     * to ArrayBuffers and/or child Builders according to the Arrow specification
     * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.
     *
     * The `Builder` for each Arrow `DataType` handles converting and appending
     * values for a given `DataType`. The high-level {@link makeBuilder `makeBuilder()`} convenience
     * method creates the specific `Builder` subclass for the supplied `DataType`.
     *
     * Once created, `Builder` instances support both appending values to the end
     * of the `Builder`, and random-access writes to specific indices
     * (`Builder.prototype.append(value)` is a convenience method for
     * `builder.set(builder.length, value)`). Appending or setting values beyond the
     * Builder's current length may cause the builder to grow its underlying buffers
     * or child Builders (if applicable) to accommodate the new values.
     *
     * After enough values have been written to a `Builder`, `Builder.prototype.flush()`
     * will commit the values to the underlying ArrayBuffers (or child Builders). The
     * internal Builder state will be reset, and an instance of `Data<T>` is returned.
     * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return
     * an instance of `Vector<T>` instead.
     *
     * When there are no more values to write, use `Builder.prototype.finish()` to
     * finalize the `Builder`. This does not reset the internal state, so it is
     * necessary to call `Builder.prototype.flush()` or `toVector()` one last time
     * if there are still values queued to be flushed.
     *
     * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,
     * because this is when it flushes the values that have been enqueued in its internal
     * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.
     *
     * @example
     * ```ts
     * import { Builder, Utf8 } from 'apache-arrow';
     *
     * const utf8Builder = makeBuilder({
     *     type: new Utf8(),
     *     nullValues: [null, 'n/a']
     * });
     *
     * utf8Builder
     *     .append('hello')
     *     .append('n/a')
     *     .append('world')
     *     .append(null);
     *
     * const utf8Vector = utf8Builder.finish().toVector();
     *
     * console.log(utf8Vector.toJSON());
     * // > ["hello", null, "world", null]
     * ```
     *
     * @typeparam T The `DataType` of this `Builder`.
     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.
     */
    class Builder {
        /**
         * Construct a builder with the given Arrow DataType with optional null values,
         * which will be interpreted as "null" when set or appended to the `Builder`.
         * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.
         */
        constructor({ 'type': type, 'nullValues': nulls }) {
            /**
             * The number of values written to the `Builder` that haven't been flushed yet.
             * @readonly
             */
            this.length = 0;
            /**
             * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.
             * @readonly
             */
            this.finished = false;
            this.type = type;
            this.children = [];
            this.nullValues = nulls;
            this.stride = strideForType(type);
            this._nulls = new BitmapBufferBuilder();
            if (nulls && nulls.length > 0) {
                this._isValid = createIsValidFunction(nulls);
            }
        }
        /** @nocollapse */
        // @ts-ignore
        static throughNode(options) {
            throw new Error(`"throughNode" not available in this environment`);
        }
        /** @nocollapse */
        // @ts-ignore
        static throughDOM(options) {
            throw new Error(`"throughDOM" not available in this environment`);
        }
        /**
         * Flush the `Builder` and return a `Vector<T>`.
         * @returns {Vector<T>} A `Vector<T>` of the flushed values.
         */
        toVector() { return new Vector([this.flush()]); }
        get ArrayType() { return this.type.ArrayType; }
        get nullCount() { return this._nulls.numInvalid; }
        get numChildren() { return this.children.length; }
        /**
         * @returns The aggregate length (in bytes) of the values that have been written.
         */
        get byteLength() {
            let size = 0;
            const { _offsets, _values, _nulls, _typeIds, children } = this;
            _offsets && (size += _offsets.byteLength);
            _values && (size += _values.byteLength);
            _nulls && (size += _nulls.byteLength);
            _typeIds && (size += _typeIds.byteLength);
            return children.reduce((size, child) => size + child.byteLength, size);
        }
        /**
         * @returns The aggregate number of rows that have been reserved to write new values.
         */
        get reservedLength() {
            return this._nulls.reservedLength;
        }
        /**
         * @returns The aggregate length (in bytes) that has been reserved to write new values.
         */
        get reservedByteLength() {
            let size = 0;
            this._offsets && (size += this._offsets.reservedByteLength);
            this._values && (size += this._values.reservedByteLength);
            this._nulls && (size += this._nulls.reservedByteLength);
            this._typeIds && (size += this._typeIds.reservedByteLength);
            return this.children.reduce((size, child) => size + child.reservedByteLength, size);
        }
        get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }
        get values() { return this._values ? this._values.buffer : null; }
        get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }
        get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }
        /**
         * Appends a value (or null) to this `Builder`.
         * This is equivalent to `builder.set(builder.length, value)`.
         * @param {T['TValue'] | TNull } value The value to append.
         */
        append(value) { return this.set(this.length, value); }
        /**
         * Validates whether a value is valid (true), or null (false)
         * @param {T['TValue'] | TNull } value The value to compare against null the value representations
         */
        isValid(value) { return this._isValid(value); }
        /**
         * Write a value (or null-value sentinel) at the supplied index.
         * If the value matches one of the null-value representations, a 1-bit is
         * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to
         * the null `BitmapBufferBuilder`, and the value is passed to
         * `Builder.prototype.setValue()`.
         * @param {number} index The index of the value to write.
         * @param {T['TValue'] | TNull } value The value to write at the supplied index.
         * @returns {this} The updated `Builder` instance.
         */
        set(index, value) {
            if (this.setValid(index, this.isValid(value))) {
                this.setValue(index, value);
            }
            return this;
        }
        /**
         * Write a value to the underlying buffers at the supplied index, bypassing
         * the null-value check. This is a low-level method that
         * @param {number} index
         * @param {T['TValue'] | TNull } value
         */
        setValue(index, value) { this._setValue(this, index, value); }
        setValid(index, valid) {
            this.length = this._nulls.set(index, +valid).length;
            return valid;
        }
        // @ts-ignore
        addChild(child, name = `${this.numChildren}`) {
            throw new Error(`Cannot append children to non-nested type "${this.type}"`);
        }
        /**
         * Retrieve the child `Builder` at the supplied `index`, or null if no child
         * exists at that index.
         * @param {number} index The index of the child `Builder` to retrieve.
         * @returns {Builder | null} The child Builder at the supplied index or null.
         */
        getChildAt(index) {
            return this.children[index] || null;
        }
        /**
         * Commit all the values that have been written to their underlying
         * ArrayBuffers, including any child Builders if applicable, and reset
         * the internal `Builder` state.
         * @returns A `Data<T>` of the buffers and children representing the values written.
         */
        flush() {
            let data;
            let typeIds;
            let nullBitmap;
            let valueOffsets;
            const { type, length, nullCount, _typeIds, _offsets, _values, _nulls } = this;
            if (typeIds = _typeIds === null || _typeIds === void 0 ? void 0 : _typeIds.flush(length)) { // Unions
                // DenseUnions
                valueOffsets = _offsets === null || _offsets === void 0 ? void 0 : _offsets.flush(length);
            }
            else if (valueOffsets = _offsets === null || _offsets === void 0 ? void 0 : _offsets.flush(length)) { // Variable-width primitives (Binary, Utf8), and Lists
                // Binary, Utf8
                data = _values === null || _values === void 0 ? void 0 : _values.flush(_offsets.last());
            }
            else { // Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval)
                data = _values === null || _values === void 0 ? void 0 : _values.flush(length);
            }
            if (nullCount > 0) {
                nullBitmap = _nulls === null || _nulls === void 0 ? void 0 : _nulls.flush(length);
            }
            const children = this.children.map((child) => child.flush());
            this.clear();
            return makeData({
                type, length, nullCount,
                children, 'child': children[0],
                data, typeIds, nullBitmap, valueOffsets,
            });
        }
        /**
         * Finalize this `Builder`, and child builders if applicable.
         * @returns {this} The finalized `Builder` instance.
         */
        finish() {
            this.finished = true;
            for (const child of this.children)
                child.finish();
            return this;
        }
        /**
         * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.
         * @returns {this} The cleared `Builder` instance.
         */
        clear() {
            var _a, _b, _c, _d;
            this.length = 0;
            (_a = this._nulls) === null || _a === void 0 ? void 0 : _a.clear();
            (_b = this._values) === null || _b === void 0 ? void 0 : _b.clear();
            (_c = this._offsets) === null || _c === void 0 ? void 0 : _c.clear();
            (_d = this._typeIds) === null || _d === void 0 ? void 0 : _d.clear();
            for (const child of this.children)
                child.clear();
            return this;
        }
    }
    Builder.prototype.length = 1;
    Builder.prototype.stride = 1;
    Builder.prototype.children = null;
    Builder.prototype.finished = false;
    Builder.prototype.nullValues = null;
    Builder.prototype._isValid = () => true;
    /** @ignore */
    class FixedWidthBuilder extends Builder {
        constructor(opts) {
            super(opts);
            this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);
        }
        setValue(index, value) {
            const values = this._values;
            values.reserve(index - values.length + 1);
            return super.setValue(index, value);
        }
    }
    /** @ignore */
    class VariableWidthBuilder extends Builder {
        constructor(opts) {
            super(opts);
            this._pendingLength = 0;
            this._offsets = new OffsetsBufferBuilder();
        }
        setValue(index, value) {
            const pending = this._pending || (this._pending = new Map());
            const current = pending.get(index);
            current && (this._pendingLength -= current.length);
            this._pendingLength += (value instanceof MapRow) ? value[kKeys].length : value.length;
            pending.set(index, value);
        }
        setValid(index, isValid) {
            if (!super.setValid(index, isValid)) {
                (this._pending || (this._pending = new Map())).set(index, undefined);
                return false;
            }
            return true;
        }
        clear() {
            this._pendingLength = 0;
            this._pending = undefined;
            return super.clear();
        }
        flush() {
            this._flush();
            return super.flush();
        }
        finish() {
            this._flush();
            return super.finish();
        }
        _flush() {
            const pending = this._pending;
            const pendingLength = this._pendingLength;
            this._pendingLength = 0;
            this._pending = undefined;
            if (pending && pending.size > 0) {
                this._flushPending(pending, pendingLength);
            }
            return this;
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    class Block {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        /**
         * Index to the start of the RecordBlock (note this is past the Message header)
         */
        offset() {
            return this.bb.readInt64(this.bb_pos);
        }
        /**
         * Length of the metadata
         */
        metaDataLength() {
            return this.bb.readInt32(this.bb_pos + 8);
        }
        /**
         * Length of the data (this is aligned so there can be a gap between this and
         * the metadata).
         */
        bodyLength() {
            return this.bb.readInt64(this.bb_pos + 16);
        }
        static sizeOf() {
            return 24;
        }
        static createBlock(builder, offset, metaDataLength, bodyLength) {
            builder.prep(8, 24);
            builder.writeInt64(bodyLength);
            builder.pad(4);
            builder.writeInt32(metaDataLength);
            builder.writeInt64(offset);
            return builder.offset();
        }
    }

    const SIZEOF_SHORT = 2;
    const SIZEOF_INT = 4;
    const FILE_IDENTIFIER_LENGTH = 4;
    const SIZE_PREFIX_LENGTH = 4;

    const int32 = new Int32Array(2);
    const float32 = new Float32Array(int32.buffer);
    const float64 = new Float64Array(int32.buffer);
    const isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;

    class Long {
        constructor(low, high) {
            this.low = low | 0;
            this.high = high | 0;
        }
        static create(low, high) {
            // Special-case zero to avoid GC overhead for default values
            return low == 0 && high == 0 ? Long.ZERO : new Long(low, high);
        }
        toFloat64() {
            return (this.low >>> 0) + this.high * 0x100000000;
        }
        equals(other) {
            return this.low == other.low && this.high == other.high;
        }
    }
    Long.ZERO = new Long(0, 0);

    var Encoding;
    (function (Encoding) {
        Encoding[Encoding["UTF8_BYTES"] = 1] = "UTF8_BYTES";
        Encoding[Encoding["UTF16_STRING"] = 2] = "UTF16_STRING";
    })(Encoding || (Encoding = {}));

    class ByteBuffer {
        /**
         * Create a new ByteBuffer with a given array of bytes (`Uint8Array`)
         */
        constructor(bytes_) {
            this.bytes_ = bytes_;
            this.position_ = 0;
        }
        /**
         * Create and allocate a new ByteBuffer with a given size.
         */
        static allocate(byte_size) {
            return new ByteBuffer(new Uint8Array(byte_size));
        }
        clear() {
            this.position_ = 0;
        }
        /**
         * Get the underlying `Uint8Array`.
         */
        bytes() {
            return this.bytes_;
        }
        /**
         * Get the buffer's position.
         */
        position() {
            return this.position_;
        }
        /**
         * Set the buffer's position.
         */
        setPosition(position) {
            this.position_ = position;
        }
        /**
         * Get the buffer's capacity.
         */
        capacity() {
            return this.bytes_.length;
        }
        readInt8(offset) {
            return this.readUint8(offset) << 24 >> 24;
        }
        readUint8(offset) {
            return this.bytes_[offset];
        }
        readInt16(offset) {
            return this.readUint16(offset) << 16 >> 16;
        }
        readUint16(offset) {
            return this.bytes_[offset] | this.bytes_[offset + 1] << 8;
        }
        readInt32(offset) {
            return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;
        }
        readUint32(offset) {
            return this.readInt32(offset) >>> 0;
        }
        readInt64(offset) {
            return new Long(this.readInt32(offset), this.readInt32(offset + 4));
        }
        readUint64(offset) {
            return new Long(this.readUint32(offset), this.readUint32(offset + 4));
        }
        readFloat32(offset) {
            int32[0] = this.readInt32(offset);
            return float32[0];
        }
        readFloat64(offset) {
            int32[isLittleEndian ? 0 : 1] = this.readInt32(offset);
            int32[isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);
            return float64[0];
        }
        writeInt8(offset, value) {
            this.bytes_[offset] = value;
        }
        writeUint8(offset, value) {
            this.bytes_[offset] = value;
        }
        writeInt16(offset, value) {
            this.bytes_[offset] = value;
            this.bytes_[offset + 1] = value >> 8;
        }
        writeUint16(offset, value) {
            this.bytes_[offset] = value;
            this.bytes_[offset + 1] = value >> 8;
        }
        writeInt32(offset, value) {
            this.bytes_[offset] = value;
            this.bytes_[offset + 1] = value >> 8;
            this.bytes_[offset + 2] = value >> 16;
            this.bytes_[offset + 3] = value >> 24;
        }
        writeUint32(offset, value) {
            this.bytes_[offset] = value;
            this.bytes_[offset + 1] = value >> 8;
            this.bytes_[offset + 2] = value >> 16;
            this.bytes_[offset + 3] = value >> 24;
        }
        writeInt64(offset, value) {
            this.writeInt32(offset, value.low);
            this.writeInt32(offset + 4, value.high);
        }
        writeUint64(offset, value) {
            this.writeUint32(offset, value.low);
            this.writeUint32(offset + 4, value.high);
        }
        writeFloat32(offset, value) {
            float32[0] = value;
            this.writeInt32(offset, int32[0]);
        }
        writeFloat64(offset, value) {
            float64[0] = value;
            this.writeInt32(offset, int32[isLittleEndian ? 0 : 1]);
            this.writeInt32(offset + 4, int32[isLittleEndian ? 1 : 0]);
        }
        /**
         * Return the file identifier.   Behavior is undefined for FlatBuffers whose
         * schema does not include a file_identifier (likely points at padding or the
         * start of a the root vtable).
         */
        getBufferIdentifier() {
            if (this.bytes_.length < this.position_ + SIZEOF_INT +
                FILE_IDENTIFIER_LENGTH) {
                throw new Error('FlatBuffers: ByteBuffer is too short to contain an identifier.');
            }
            let result = "";
            for (let i = 0; i < FILE_IDENTIFIER_LENGTH; i++) {
                result += String.fromCharCode(this.readInt8(this.position_ + SIZEOF_INT + i));
            }
            return result;
        }
        /**
         * Look up a field in the vtable, return an offset into the object, or 0 if the
         * field is not present.
         */
        __offset(bb_pos, vtable_offset) {
            const vtable = bb_pos - this.readInt32(bb_pos);
            return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;
        }
        /**
         * Initialize any Table-derived type to point to the union at the given offset.
         */
        __union(t, offset) {
            t.bb_pos = offset + this.readInt32(offset);
            t.bb = this;
            return t;
        }
        /**
         * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.
         * This allocates a new string and converts to wide chars upon each access.
         *
         * To avoid the conversion to UTF-16, pass Encoding.UTF8_BYTES as
         * the "optionalEncoding" argument. This is useful for avoiding conversion to
         * and from UTF-16 when the data will just be packaged back up in another
         * FlatBuffer later on.
         *
         * @param offset
         * @param opt_encoding Defaults to UTF16_STRING
         */
        __string(offset, opt_encoding) {
            offset += this.readInt32(offset);
            const length = this.readInt32(offset);
            let result = '';
            let i = 0;
            offset += SIZEOF_INT;
            if (opt_encoding === Encoding.UTF8_BYTES) {
                return this.bytes_.subarray(offset, offset + length);
            }
            while (i < length) {
                let codePoint;
                // Decode UTF-8
                const a = this.readUint8(offset + i++);
                if (a < 0xC0) {
                    codePoint = a;
                }
                else {
                    const b = this.readUint8(offset + i++);
                    if (a < 0xE0) {
                        codePoint =
                            ((a & 0x1F) << 6) |
                                (b & 0x3F);
                    }
                    else {
                        const c = this.readUint8(offset + i++);
                        if (a < 0xF0) {
                            codePoint =
                                ((a & 0x0F) << 12) |
                                    ((b & 0x3F) << 6) |
                                    (c & 0x3F);
                        }
                        else {
                            const d = this.readUint8(offset + i++);
                            codePoint =
                                ((a & 0x07) << 18) |
                                    ((b & 0x3F) << 12) |
                                    ((c & 0x3F) << 6) |
                                    (d & 0x3F);
                        }
                    }
                }
                // Encode UTF-16
                if (codePoint < 0x10000) {
                    result += String.fromCharCode(codePoint);
                }
                else {
                    codePoint -= 0x10000;
                    result += String.fromCharCode((codePoint >> 10) + 0xD800, (codePoint & ((1 << 10) - 1)) + 0xDC00);
                }
            }
            return result;
        }
        /**
         * Handle unions that can contain string as its member, if a Table-derived type then initialize it,
         * if a string then return a new one
         *
         * WARNING: strings are immutable in JS so we can't change the string that the user gave us, this
         * makes the behaviour of __union_with_string different compared to __union
         */
        __union_with_string(o, offset) {
            if (typeof o === 'string') {
                return this.__string(offset);
            }
            return this.__union(o, offset);
        }
        /**
         * Retrieve the relative offset stored at "offset"
         */
        __indirect(offset) {
            return offset + this.readInt32(offset);
        }
        /**
         * Get the start of data of a vector whose offset is stored at "offset" in this object.
         */
        __vector(offset) {
            return offset + this.readInt32(offset) + SIZEOF_INT; // data starts after the length
        }
        /**
         * Get the length of a vector whose offset is stored at "offset" in this object.
         */
        __vector_len(offset) {
            return this.readInt32(offset + this.readInt32(offset));
        }
        __has_identifier(ident) {
            if (ident.length != FILE_IDENTIFIER_LENGTH) {
                throw new Error('FlatBuffers: file identifier must be length ' +
                    FILE_IDENTIFIER_LENGTH);
            }
            for (let i = 0; i < FILE_IDENTIFIER_LENGTH; i++) {
                if (ident.charCodeAt(i) != this.readInt8(this.position() + SIZEOF_INT + i)) {
                    return false;
                }
            }
            return true;
        }
        /**
         * A helper function to avoid generated code depending on this file directly.
         */
        createLong(low, high) {
            return Long.create(low, high);
        }
        /**
         * A helper function for generating list for obj api
         */
        createScalarList(listAccessor, listLength) {
            const ret = [];
            for (let i = 0; i < listLength; ++i) {
                if (listAccessor(i) !== null) {
                    ret.push(listAccessor(i));
                }
            }
            return ret;
        }
        /**
         * A helper function for generating list for obj api
         * @param listAccessor function that accepts an index and return data at that index
         * @param listLength listLength
         * @param res result list
         */
        createObjList(listAccessor, listLength) {
            const ret = [];
            for (let i = 0; i < listLength; ++i) {
                const val = listAccessor(i);
                if (val !== null) {
                    ret.push(val.unpack());
                }
            }
            return ret;
        }
    }

    class Builder$1 {
        /**
         * Create a FlatBufferBuilder.
         */
        constructor(opt_initial_size) {
            /** Minimum alignment encountered so far. */
            this.minalign = 1;
            /** The vtable for the current table. */
            this.vtable = null;
            /** The amount of fields we're actually using. */
            this.vtable_in_use = 0;
            /** Whether we are currently serializing a table. */
            this.isNested = false;
            /** Starting offset of the current struct/table. */
            this.object_start = 0;
            /** List of offsets of all vtables. */
            this.vtables = [];
            /** For the current vector being built. */
            this.vector_num_elems = 0;
            /** False omits default values from the serialized data */
            this.force_defaults = false;
            this.string_maps = null;
            let initial_size;
            if (!opt_initial_size) {
                initial_size = 1024;
            }
            else {
                initial_size = opt_initial_size;
            }
            /**
             * @type {ByteBuffer}
             * @private
             */
            this.bb = ByteBuffer.allocate(initial_size);
            this.space = initial_size;
        }
        clear() {
            this.bb.clear();
            this.space = this.bb.capacity();
            this.minalign = 1;
            this.vtable = null;
            this.vtable_in_use = 0;
            this.isNested = false;
            this.object_start = 0;
            this.vtables = [];
            this.vector_num_elems = 0;
            this.force_defaults = false;
            this.string_maps = null;
        }
        /**
         * In order to save space, fields that are set to their default value
         * don't get serialized into the buffer. Forcing defaults provides a
         * way to manually disable this optimization.
         *
         * @param forceDefaults true always serializes default values
         */
        forceDefaults(forceDefaults) {
            this.force_defaults = forceDefaults;
        }
        /**
         * Get the ByteBuffer representing the FlatBuffer. Only call this after you've
         * called finish(). The actual data starts at the ByteBuffer's current position,
         * not necessarily at 0.
         */
        dataBuffer() {
            return this.bb;
        }
        /**
         * Get the bytes representing the FlatBuffer. Only call this after you've
         * called finish().
         */
        asUint8Array() {
            return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());
        }
        /**
         * Prepare to write an element of `size` after `additional_bytes` have been
         * written, e.g. if you write a string, you need to align such the int length
         * field is aligned to 4 bytes, and the string data follows it directly. If all
         * you need to do is alignment, `additional_bytes` will be 0.
         *
         * @param size This is the of the new element to write
         * @param additional_bytes The padding size
         */
        prep(size, additional_bytes) {
            // Track the biggest thing we've ever aligned to.
            if (size > this.minalign) {
                this.minalign = size;
            }
            // Find the amount of alignment needed such that `size` is properly
            // aligned after `additional_bytes`
            const align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);
            // Reallocate the buffer if needed.
            while (this.space < align_size + size + additional_bytes) {
                const old_buf_size = this.bb.capacity();
                this.bb = Builder$1.growByteBuffer(this.bb);
                this.space += this.bb.capacity() - old_buf_size;
            }
            this.pad(align_size);
        }
        pad(byte_size) {
            for (let i = 0; i < byte_size; i++) {
                this.bb.writeInt8(--this.space, 0);
            }
        }
        writeInt8(value) {
            this.bb.writeInt8(this.space -= 1, value);
        }
        writeInt16(value) {
            this.bb.writeInt16(this.space -= 2, value);
        }
        writeInt32(value) {
            this.bb.writeInt32(this.space -= 4, value);
        }
        writeInt64(value) {
            this.bb.writeInt64(this.space -= 8, value);
        }
        writeFloat32(value) {
            this.bb.writeFloat32(this.space -= 4, value);
        }
        writeFloat64(value) {
            this.bb.writeFloat64(this.space -= 8, value);
        }
        /**
         * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).
         * @param value The `int8` to add the the buffer.
         */
        addInt8(value) {
            this.prep(1, 0);
            this.writeInt8(value);
        }
        /**
         * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).
         * @param value The `int16` to add the the buffer.
         */
        addInt16(value) {
            this.prep(2, 0);
            this.writeInt16(value);
        }
        /**
         * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).
         * @param value The `int32` to add the the buffer.
         */
        addInt32(value) {
            this.prep(4, 0);
            this.writeInt32(value);
        }
        /**
         * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).
         * @param value The `int64` to add the the buffer.
         */
        addInt64(value) {
            this.prep(8, 0);
            this.writeInt64(value);
        }
        /**
         * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).
         * @param value The `float32` to add the the buffer.
         */
        addFloat32(value) {
            this.prep(4, 0);
            this.writeFloat32(value);
        }
        /**
         * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).
         * @param value The `float64` to add the the buffer.
         */
        addFloat64(value) {
            this.prep(8, 0);
            this.writeFloat64(value);
        }
        addFieldInt8(voffset, value, defaultValue) {
            if (this.force_defaults || value != defaultValue) {
                this.addInt8(value);
                this.slot(voffset);
            }
        }
        addFieldInt16(voffset, value, defaultValue) {
            if (this.force_defaults || value != defaultValue) {
                this.addInt16(value);
                this.slot(voffset);
            }
        }
        addFieldInt32(voffset, value, defaultValue) {
            if (this.force_defaults || value != defaultValue) {
                this.addInt32(value);
                this.slot(voffset);
            }
        }
        addFieldInt64(voffset, value, defaultValue) {
            if (this.force_defaults || !value.equals(defaultValue)) {
                this.addInt64(value);
                this.slot(voffset);
            }
        }
        addFieldFloat32(voffset, value, defaultValue) {
            if (this.force_defaults || value != defaultValue) {
                this.addFloat32(value);
                this.slot(voffset);
            }
        }
        addFieldFloat64(voffset, value, defaultValue) {
            if (this.force_defaults || value != defaultValue) {
                this.addFloat64(value);
                this.slot(voffset);
            }
        }
        addFieldOffset(voffset, value, defaultValue) {
            if (this.force_defaults || value != defaultValue) {
                this.addOffset(value);
                this.slot(voffset);
            }
        }
        /**
         * Structs are stored inline, so nothing additional is being added. `d` is always 0.
         */
        addFieldStruct(voffset, value, defaultValue) {
            if (value != defaultValue) {
                this.nested(value);
                this.slot(voffset);
            }
        }
        /**
         * Structures are always stored inline, they need to be created right
         * where they're used.  You'll get this assertion failure if you
         * created it elsewhere.
         */
        nested(obj) {
            if (obj != this.offset()) {
                throw new Error('FlatBuffers: struct must be serialized inline.');
            }
        }
        /**
         * Should not be creating any other object, string or vector
         * while an object is being constructed
         */
        notNested() {
            if (this.isNested) {
                throw new Error('FlatBuffers: object serialization must not be nested.');
            }
        }
        /**
         * Set the current vtable at `voffset` to the current location in the buffer.
         */
        slot(voffset) {
            if (this.vtable !== null)
                this.vtable[voffset] = this.offset();
        }
        /**
         * @returns Offset relative to the end of the buffer.
         */
        offset() {
            return this.bb.capacity() - this.space;
        }
        /**
         * Doubles the size of the backing ByteBuffer and copies the old data towards
         * the end of the new buffer (since we build the buffer backwards).
         *
         * @param bb The current buffer with the existing data
         * @returns A new byte buffer with the old data copied
         * to it. The data is located at the end of the buffer.
         *
         * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass
         * it a uint8Array we need to suppress the type check:
         * @suppress {checkTypes}
         */
        static growByteBuffer(bb) {
            const old_buf_size = bb.capacity();
            // Ensure we don't grow beyond what fits in an int.
            if (old_buf_size & 0xC0000000) {
                throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');
            }
            const new_buf_size = old_buf_size << 1;
            const nbb = ByteBuffer.allocate(new_buf_size);
            nbb.setPosition(new_buf_size - old_buf_size);
            nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);
            return nbb;
        }
        /**
         * Adds on offset, relative to where it will be written.
         *
         * @param offset The offset to add.
         */
        addOffset(offset) {
            this.prep(SIZEOF_INT, 0); // Ensure alignment is already done.
            this.writeInt32(this.offset() - offset + SIZEOF_INT);
        }
        /**
         * Start encoding a new object in the buffer.  Users will not usually need to
         * call this directly. The FlatBuffers compiler will generate helper methods
         * that call this method internally.
         */
        startObject(numfields) {
            this.notNested();
            if (this.vtable == null) {
                this.vtable = [];
            }
            this.vtable_in_use = numfields;
            for (let i = 0; i < numfields; i++) {
                this.vtable[i] = 0; // This will push additional elements as needed
            }
            this.isNested = true;
            this.object_start = this.offset();
        }
        /**
         * Finish off writing the object that is under construction.
         *
         * @returns The offset to the object inside `dataBuffer`
         */
        endObject() {
            if (this.vtable == null || !this.isNested) {
                throw new Error('FlatBuffers: endObject called without startObject');
            }
            this.addInt32(0);
            const vtableloc = this.offset();
            // Trim trailing zeroes.
            let i = this.vtable_in_use - 1;
            // eslint-disable-next-line no-empty
            for (; i >= 0 && this.vtable[i] == 0; i--) { }
            const trimmed_size = i + 1;
            // Write out the current vtable.
            for (; i >= 0; i--) {
                // Offset relative to the start of the table.
                this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);
            }
            const standard_fields = 2; // The fields below:
            this.addInt16(vtableloc - this.object_start);
            const len = (trimmed_size + standard_fields) * SIZEOF_SHORT;
            this.addInt16(len);
            // Search for an existing vtable that matches the current one.
            let existing_vtable = 0;
            const vt1 = this.space;
            outer_loop: for (i = 0; i < this.vtables.length; i++) {
                const vt2 = this.bb.capacity() - this.vtables[i];
                if (len == this.bb.readInt16(vt2)) {
                    for (let j = SIZEOF_SHORT; j < len; j += SIZEOF_SHORT) {
                        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {
                            continue outer_loop;
                        }
                    }
                    existing_vtable = this.vtables[i];
                    break;
                }
            }
            if (existing_vtable) {
                // Found a match:
                // Remove the current vtable.
                this.space = this.bb.capacity() - vtableloc;
                // Point table to existing vtable.
                this.bb.writeInt32(this.space, existing_vtable - vtableloc);
            }
            else {
                // No match:
                // Add the location of the current vtable to the list of vtables.
                this.vtables.push(this.offset());
                // Point table to current vtable.
                this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);
            }
            this.isNested = false;
            return vtableloc;
        }
        /**
         * Finalize a buffer, poiting to the given `root_table`.
         */
        finish(root_table, opt_file_identifier, opt_size_prefix) {
            const size_prefix = opt_size_prefix ? SIZE_PREFIX_LENGTH : 0;
            if (opt_file_identifier) {
                const file_identifier = opt_file_identifier;
                this.prep(this.minalign, SIZEOF_INT +
                    FILE_IDENTIFIER_LENGTH + size_prefix);
                if (file_identifier.length != FILE_IDENTIFIER_LENGTH) {
                    throw new Error('FlatBuffers: file identifier must be length ' +
                        FILE_IDENTIFIER_LENGTH);
                }
                for (let i = FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {
                    this.writeInt8(file_identifier.charCodeAt(i));
                }
            }
            this.prep(this.minalign, SIZEOF_INT + size_prefix);
            this.addOffset(root_table);
            if (size_prefix) {
                this.addInt32(this.bb.capacity() - this.space);
            }
            this.bb.setPosition(this.space);
        }
        /**
         * Finalize a size prefixed buffer, pointing to the given `root_table`.
         */
        finishSizePrefixed(root_table, opt_file_identifier) {
            this.finish(root_table, opt_file_identifier, true);
        }
        /**
         * This checks a required field has been set in a given table that has
         * just been constructed.
         */
        requiredField(table, field) {
            const table_start = this.bb.capacity() - table;
            const vtable_start = table_start - this.bb.readInt32(table_start);
            const ok = this.bb.readInt16(vtable_start + field) != 0;
            // If this fails, the caller will show what field needs to be set.
            if (!ok) {
                throw new Error('FlatBuffers: field ' + field + ' must be set');
            }
        }
        /**
         * Start a new array/vector of objects.  Users usually will not call
         * this directly. The FlatBuffers compiler will create a start/end
         * method for vector types in generated code.
         *
         * @param elem_size The size of each element in the array
         * @param num_elems The number of elements in the array
         * @param alignment The alignment of the array
         */
        startVector(elem_size, num_elems, alignment) {
            this.notNested();
            this.vector_num_elems = num_elems;
            this.prep(SIZEOF_INT, elem_size * num_elems);
            this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.
        }
        /**
         * Finish off the creation of an array and all its elements. The array must be
         * created with `startVector`.
         *
         * @returns The offset at which the newly created array
         * starts.
         */
        endVector() {
            this.writeInt32(this.vector_num_elems);
            return this.offset();
        }
        /**
         * Encode the string `s` in the buffer using UTF-8. If the string passed has
         * already been seen, we return the offset of the already written string
         *
         * @param s The string to encode
         * @return The offset in the buffer where the encoded string starts
         */
        createSharedString(s) {
            if (!s) {
                return 0;
            }
            if (!this.string_maps) {
                this.string_maps = new Map();
            }
            if (this.string_maps.has(s)) {
                return this.string_maps.get(s);
            }
            const offset = this.createString(s);
            this.string_maps.set(s, offset);
            return offset;
        }
        /**
         * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed
         * instead of a string, it is assumed to contain valid UTF-8 encoded data.
         *
         * @param s The string to encode
         * @return The offset in the buffer where the encoded string starts
         */
        createString(s) {
            if (!s) {
                return 0;
            }
            let utf8;
            if (s instanceof Uint8Array) {
                utf8 = s;
            }
            else {
                utf8 = [];
                let i = 0;
                while (i < s.length) {
                    let codePoint;
                    // Decode UTF-16
                    const a = s.charCodeAt(i++);
                    if (a < 0xD800 || a >= 0xDC00) {
                        codePoint = a;
                    }
                    else {
                        const b = s.charCodeAt(i++);
                        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);
                    }
                    // Encode UTF-8
                    if (codePoint < 0x80) {
                        utf8.push(codePoint);
                    }
                    else {
                        if (codePoint < 0x800) {
                            utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);
                        }
                        else {
                            if (codePoint < 0x10000) {
                                utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);
                            }
                            else {
                                utf8.push(((codePoint >> 18) & 0x07) | 0xF0, ((codePoint >> 12) & 0x3F) | 0x80);
                            }
                            utf8.push(((codePoint >> 6) & 0x3F) | 0x80);
                        }
                        utf8.push((codePoint & 0x3F) | 0x80);
                    }
                }
            }
            this.addInt8(0);
            this.startVector(1, utf8.length, 1);
            this.bb.setPosition(this.space -= utf8.length);
            for (let i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {
                bytes[offset++] = utf8[i];
            }
            return this.endVector();
        }
        /**
         * A helper function to avoid generated code depending on this file directly.
         */
        createLong(low, high) {
            return Long.create(low, high);
        }
        /**
         * A helper function to pack an object
         *
         * @returns offset of obj
         */
        createObjectOffset(obj) {
            if (obj === null) {
                return 0;
            }
            if (typeof obj === 'string') {
                return this.createString(obj);
            }
            else {
                return obj.pack(this);
            }
        }
        /**
         * A helper function to pack a list of object
         *
         * @returns list of offsets of each non null object
         */
        createObjectOffsetList(list) {
            const ret = [];
            for (let i = 0; i < list.length; ++i) {
                const val = list[i];
                if (val !== null) {
                    ret.push(this.createObjectOffset(val));
                }
                else {
                    throw new Error('FlatBuffers: Argument for createObjectOffsetList cannot contain null.');
                }
            }
            return ret;
        }
        createStructOffsetList(list, startFunc) {
            startFunc(this, list.length);
            this.createObjectOffsetList(list);
            return this.endVector();
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * ----------------------------------------------------------------------
     * user defined key value pairs to add custom metadata to arrow
     * key namespacing is the responsibility of the user
     */
    class KeyValue {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsKeyValue(bb, obj) {
            return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsKeyValue(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        key(optionalEncoding) {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
        }
        value(optionalEncoding) {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
        }
        static startKeyValue(builder) {
            builder.startObject(2);
        }
        static addKey(builder, keyOffset) {
            builder.addFieldOffset(0, keyOffset, 0);
        }
        static addValue(builder, valueOffset) {
            builder.addFieldOffset(1, valueOffset, 0);
        }
        static endKeyValue(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createKeyValue(builder, keyOffset, valueOffset) {
            KeyValue.startKeyValue(builder);
            KeyValue.addKey(builder, keyOffset);
            KeyValue.addValue(builder, valueOffset);
            return KeyValue.endKeyValue(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * Logical types, vector layouts, and schemas
     * Format Version History.
     * Version 1.0 - Forward and backwards compatibility guaranteed.
     * Version 1.1 - Add Decimal256 (No format release).
     * Version 1.2 (Pending)- Add Interval MONTH_DAY_NANO
     */
    var MetadataVersion$1;
    (function (MetadataVersion) {
        /**
         * 0.1.0 (October 2016).
         */
        MetadataVersion[MetadataVersion["V1"] = 0] = "V1";
        /**
         * 0.2.0 (February 2017). Non-backwards compatible with V1.
         */
        MetadataVersion[MetadataVersion["V2"] = 1] = "V2";
        /**
         * 0.3.0 -> 0.7.1 (May - December 2017). Non-backwards compatible with V2.
         */
        MetadataVersion[MetadataVersion["V3"] = 2] = "V3";
        /**
         * >= 0.8.0 (December 2017). Non-backwards compatible with V3.
         */
        MetadataVersion[MetadataVersion["V4"] = 3] = "V4";
        /**
         * >= 1.0.0 (July 2020. Backwards compatible with V4 (V5 readers can read V4
         * metadata and IPC messages). Implementations are recommended to provide a
         * V4 compatibility mode with V5 format changes disabled.
         *
         * Incompatible changes between V4 and V5:
         * - Union buffer layout has changed. In V5, Unions don't have a validity
         *   bitmap buffer.
         */
        MetadataVersion[MetadataVersion["V5"] = 4] = "V5";
    })(MetadataVersion$1 || (MetadataVersion$1 = {}));

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * ----------------------------------------------------------------------
     * Endianness of the platform producing the data
     */
    var Endianness;
    (function (Endianness) {
        Endianness[Endianness["Little"] = 0] = "Little";
        Endianness[Endianness["Big"] = 1] = "Big";
    })(Endianness || (Endianness = {}));

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * ----------------------------------------------------------------------
     * Dictionary encoding metadata
     * Maintained for forwards compatibility, in the future
     * Dictionaries might be explicit maps between integers and values
     * allowing for non-contiguous index values
     */
    var DictionaryKind;
    (function (DictionaryKind) {
        DictionaryKind[DictionaryKind["DenseArray"] = 0] = "DenseArray";
    })(DictionaryKind || (DictionaryKind = {}));

    // automatically generated by the FlatBuffers compiler, do not modify
    class Int {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsInt(bb, obj) {
            return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsInt(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        bitWidth() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
        }
        isSigned() {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
        }
        static startInt(builder) {
            builder.startObject(2);
        }
        static addBitWidth(builder, bitWidth) {
            builder.addFieldInt32(0, bitWidth, 0);
        }
        static addIsSigned(builder, isSigned) {
            builder.addFieldInt8(1, +isSigned, +false);
        }
        static endInt(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createInt(builder, bitWidth, isSigned) {
            Int.startInt(builder);
            Int.addBitWidth(builder, bitWidth);
            Int.addIsSigned(builder, isSigned);
            return Int.endInt(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    class DictionaryEncoding {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsDictionaryEncoding(bb, obj) {
            return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsDictionaryEncoding(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        /**
         * The known dictionary id in the application where this data is used. In
         * the file or streaming formats, the dictionary ids are found in the
         * DictionaryBatch messages
         */
        id() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
        }
        /**
         * The dictionary indices are constrained to be non-negative integers. If
         * this field is null, the indices must be signed int32. To maximize
         * cross-language compatibility and performance, implementations are
         * recommended to prefer signed integer types over unsigned integer types
         * and to avoid uint64 indices unless they are required by an application.
         */
        indexType(obj) {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? (obj || new Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
        }
        /**
         * By default, dictionaries are not ordered, or the order does not have
         * semantic meaning. In some statistical, applications, dictionary-encoding
         * is used to represent ordered categorical data, and we provide a way to
         * preserve that metadata here
         */
        isOrdered() {
            const offset = this.bb.__offset(this.bb_pos, 8);
            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
        }
        dictionaryKind() {
            const offset = this.bb.__offset(this.bb_pos, 10);
            return offset ? this.bb.readInt16(this.bb_pos + offset) : DictionaryKind.DenseArray;
        }
        static startDictionaryEncoding(builder) {
            builder.startObject(4);
        }
        static addId(builder, id) {
            builder.addFieldInt64(0, id, builder.createLong(0, 0));
        }
        static addIndexType(builder, indexTypeOffset) {
            builder.addFieldOffset(1, indexTypeOffset, 0);
        }
        static addIsOrdered(builder, isOrdered) {
            builder.addFieldInt8(2, +isOrdered, +false);
        }
        static addDictionaryKind(builder, dictionaryKind) {
            builder.addFieldInt16(3, dictionaryKind, DictionaryKind.DenseArray);
        }
        static endDictionaryEncoding(builder) {
            const offset = builder.endObject();
            return offset;
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * Opaque binary data
     */
    class Binary$1 {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsBinary(bb, obj) {
            return (obj || new Binary$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsBinary(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Binary$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static startBinary(builder) {
            builder.startObject(0);
        }
        static endBinary(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createBinary(builder) {
            Binary$1.startBinary(builder);
            return Binary$1.endBinary(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    class Bool$1 {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsBool(bb, obj) {
            return (obj || new Bool$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsBool(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Bool$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static startBool(builder) {
            builder.startObject(0);
        }
        static endBool(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createBool(builder) {
            Bool$1.startBool(builder);
            return Bool$1.endBool(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    var DateUnit$1;
    (function (DateUnit) {
        DateUnit[DateUnit["DAY"] = 0] = "DAY";
        DateUnit[DateUnit["MILLISECOND"] = 1] = "MILLISECOND";
    })(DateUnit$1 || (DateUnit$1 = {}));

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * Date is either a 32-bit or 64-bit signed integer type representing an
     * elapsed time since UNIX epoch (1970-01-01), stored in either of two units:
     *
     * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no
     *   leap seconds), where the values are evenly divisible by 86400000
     * * Days (32 bits) since the UNIX epoch
     */
    class Date$1 {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsDate(bb, obj) {
            return (obj || new Date$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsDate(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Date$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        unit() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt16(this.bb_pos + offset) : DateUnit$1.MILLISECOND;
        }
        static startDate(builder) {
            builder.startObject(1);
        }
        static addUnit(builder, unit) {
            builder.addFieldInt16(0, unit, DateUnit$1.MILLISECOND);
        }
        static endDate(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createDate(builder, unit) {
            Date$1.startDate(builder);
            Date$1.addUnit(builder, unit);
            return Date$1.endDate(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * Exact decimal value represented as an integer value in two's
     * complement. Currently only 128-bit (16-byte) and 256-bit (32-byte) integers
     * are used. The representation uses the endianness indicated
     * in the Schema.
     */
    class Decimal$1 {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsDecimal(bb, obj) {
            return (obj || new Decimal$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsDecimal(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Decimal$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        /**
         * Total number of decimal digits
         */
        precision() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
        }
        /**
         * Number of digits after the decimal point "."
         */
        scale() {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
        }
        /**
         * Number of bits per value. The only accepted widths are 128 and 256.
         * We use bitWidth for consistency with Int::bitWidth.
         */
        bitWidth() {
            const offset = this.bb.__offset(this.bb_pos, 8);
            return offset ? this.bb.readInt32(this.bb_pos + offset) : 128;
        }
        static startDecimal(builder) {
            builder.startObject(3);
        }
        static addPrecision(builder, precision) {
            builder.addFieldInt32(0, precision, 0);
        }
        static addScale(builder, scale) {
            builder.addFieldInt32(1, scale, 0);
        }
        static addBitWidth(builder, bitWidth) {
            builder.addFieldInt32(2, bitWidth, 128);
        }
        static endDecimal(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createDecimal(builder, precision, scale, bitWidth) {
            Decimal$1.startDecimal(builder);
            Decimal$1.addPrecision(builder, precision);
            Decimal$1.addScale(builder, scale);
            Decimal$1.addBitWidth(builder, bitWidth);
            return Decimal$1.endDecimal(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    var TimeUnit$1;
    (function (TimeUnit) {
        TimeUnit[TimeUnit["SECOND"] = 0] = "SECOND";
        TimeUnit[TimeUnit["MILLISECOND"] = 1] = "MILLISECOND";
        TimeUnit[TimeUnit["MICROSECOND"] = 2] = "MICROSECOND";
        TimeUnit[TimeUnit["NANOSECOND"] = 3] = "NANOSECOND";
    })(TimeUnit$1 || (TimeUnit$1 = {}));

    // automatically generated by the FlatBuffers compiler, do not modify
    class FixedSizeBinary$1 {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsFixedSizeBinary(bb, obj) {
            return (obj || new FixedSizeBinary$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsFixedSizeBinary(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new FixedSizeBinary$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        /**
         * Number of bytes per value
         */
        byteWidth() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
        }
        static startFixedSizeBinary(builder) {
            builder.startObject(1);
        }
        static addByteWidth(builder, byteWidth) {
            builder.addFieldInt32(0, byteWidth, 0);
        }
        static endFixedSizeBinary(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createFixedSizeBinary(builder, byteWidth) {
            FixedSizeBinary$1.startFixedSizeBinary(builder);
            FixedSizeBinary$1.addByteWidth(builder, byteWidth);
            return FixedSizeBinary$1.endFixedSizeBinary(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    class FixedSizeList$1 {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsFixedSizeList(bb, obj) {
            return (obj || new FixedSizeList$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsFixedSizeList(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new FixedSizeList$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        /**
         * Number of list items per value
         */
        listSize() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
        }
        static startFixedSizeList(builder) {
            builder.startObject(1);
        }
        static addListSize(builder, listSize) {
            builder.addFieldInt32(0, listSize, 0);
        }
        static endFixedSizeList(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createFixedSizeList(builder, listSize) {
            FixedSizeList$1.startFixedSizeList(builder);
            FixedSizeList$1.addListSize(builder, listSize);
            return FixedSizeList$1.endFixedSizeList(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    var Precision$1;
    (function (Precision) {
        Precision[Precision["HALF"] = 0] = "HALF";
        Precision[Precision["SINGLE"] = 1] = "SINGLE";
        Precision[Precision["DOUBLE"] = 2] = "DOUBLE";
    })(Precision$1 || (Precision$1 = {}));

    // automatically generated by the FlatBuffers compiler, do not modify
    class FloatingPoint {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsFloatingPoint(bb, obj) {
            return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsFloatingPoint(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        precision() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt16(this.bb_pos + offset) : Precision$1.HALF;
        }
        static startFloatingPoint(builder) {
            builder.startObject(1);
        }
        static addPrecision(builder, precision) {
            builder.addFieldInt16(0, precision, Precision$1.HALF);
        }
        static endFloatingPoint(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createFloatingPoint(builder, precision) {
            FloatingPoint.startFloatingPoint(builder);
            FloatingPoint.addPrecision(builder, precision);
            return FloatingPoint.endFloatingPoint(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    var IntervalUnit$1;
    (function (IntervalUnit) {
        IntervalUnit[IntervalUnit["YEAR_MONTH"] = 0] = "YEAR_MONTH";
        IntervalUnit[IntervalUnit["DAY_TIME"] = 1] = "DAY_TIME";
        IntervalUnit[IntervalUnit["MONTH_DAY_NANO"] = 2] = "MONTH_DAY_NANO";
    })(IntervalUnit$1 || (IntervalUnit$1 = {}));

    // automatically generated by the FlatBuffers compiler, do not modify
    class Interval {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsInterval(bb, obj) {
            return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsInterval(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        unit() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt16(this.bb_pos + offset) : IntervalUnit$1.YEAR_MONTH;
        }
        static startInterval(builder) {
            builder.startObject(1);
        }
        static addUnit(builder, unit) {
            builder.addFieldInt16(0, unit, IntervalUnit$1.YEAR_MONTH);
        }
        static endInterval(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createInterval(builder, unit) {
            Interval.startInterval(builder);
            Interval.addUnit(builder, unit);
            return Interval.endInterval(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    class List$1 {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsList(bb, obj) {
            return (obj || new List$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsList(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new List$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static startList(builder) {
            builder.startObject(0);
        }
        static endList(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createList(builder) {
            List$1.startList(builder);
            return List$1.endList(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * A Map is a logical nested type that is represented as
     *
     * List<entries: Struct<key: K, value: V>>
     *
     * In this layout, the keys and values are each respectively contiguous. We do
     * not constrain the key and value types, so the application is responsible
     * for ensuring that the keys are hashable and unique. Whether the keys are sorted
     * may be set in the metadata for this field.
     *
     * In a field with Map type, the field has a child Struct field, which then
     * has two children: key type and the second the value type. The names of the
     * child fields may be respectively "entries", "key", and "value", but this is
     * not enforced.
     *
     * Map
     * ```text
     *   - child[0] entries: Struct
     *     - child[0] key: K
     *     - child[1] value: V
     * ```
     * Neither the "entries" field nor the "key" field may be nullable.
     *
     * The metadata is structured so that Arrow systems without special handling
     * for Map can make Map an alias for List. The "layout" attribute for the Map
     * field must have the same contents as a List.
     */
    class Map$1 {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsMap(bb, obj) {
            return (obj || new Map$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsMap(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Map$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        /**
         * Set to true if the keys within each value are sorted
         */
        keysSorted() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
        }
        static startMap(builder) {
            builder.startObject(1);
        }
        static addKeysSorted(builder, keysSorted) {
            builder.addFieldInt8(0, +keysSorted, +false);
        }
        static endMap(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createMap(builder, keysSorted) {
            Map$1.startMap(builder);
            Map$1.addKeysSorted(builder, keysSorted);
            return Map$1.endMap(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * These are stored in the flatbuffer in the Type union below
     */
    class Null$1 {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsNull(bb, obj) {
            return (obj || new Null$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsNull(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Null$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static startNull(builder) {
            builder.startObject(0);
        }
        static endNull(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createNull(builder) {
            Null$1.startNull(builder);
            return Null$1.endNull(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct
     * (according to the physical memory layout). We used Struct_ here as
     * Struct is a reserved word in Flatbuffers
     */
    class Struct_ {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsStruct_(bb, obj) {
            return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsStruct_(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static startStruct_(builder) {
            builder.startObject(0);
        }
        static endStruct_(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createStruct_(builder) {
            Struct_.startStruct_(builder);
            return Struct_.endStruct_(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * Time is either a 32-bit or 64-bit signed integer type representing an
     * elapsed time since midnight, stored in either of four units: seconds,
     * milliseconds, microseconds or nanoseconds.
     *
     * The integer `bitWidth` depends on the `unit` and must be one of the following:
     * * SECOND and MILLISECOND: 32 bits
     * * MICROSECOND and NANOSECOND: 64 bits
     *
     * The allowed values are between 0 (inclusive) and 86400 (=24*60*60) seconds
     * (exclusive), adjusted for the time unit (for example, up to 86400000
     * exclusive for the MILLISECOND unit).
     * This definition doesn't allow for leap seconds. Time values from
     * measurements with leap seconds will need to be corrected when ingesting
     * into Arrow (for example by replacing the value 86400 with 86399).
     */
    class Time {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsTime(bb, obj) {
            return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsTime(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        unit() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt16(this.bb_pos + offset) : TimeUnit$1.MILLISECOND;
        }
        bitWidth() {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;
        }
        static startTime(builder) {
            builder.startObject(2);
        }
        static addUnit(builder, unit) {
            builder.addFieldInt16(0, unit, TimeUnit$1.MILLISECOND);
        }
        static addBitWidth(builder, bitWidth) {
            builder.addFieldInt32(1, bitWidth, 32);
        }
        static endTime(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createTime(builder, unit, bitWidth) {
            Time.startTime(builder);
            Time.addUnit(builder, unit);
            Time.addBitWidth(builder, bitWidth);
            return Time.endTime(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * Timestamp is a 64-bit signed integer representing an elapsed time since a
     * fixed epoch, stored in either of four units: seconds, milliseconds,
     * microseconds or nanoseconds, and is optionally annotated with a timezone.
     *
     * Timestamp values do not include any leap seconds (in other words, all
     * days are considered 86400 seconds long).
     *
     * Timestamps with a non-empty timezone
     * ------------------------------------
     *
     * If a Timestamp column has a non-empty timezone value, its epoch is
     * 1970-01-01 00:00:00 (January 1st 1970, midnight) in the *UTC* timezone
     * (the Unix epoch), regardless of the Timestamp's own timezone.
     *
     * Therefore, timestamp values with a non-empty timezone correspond to
     * physical points in time together with some additional information about
     * how the data was obtained and/or how to display it (the timezone).
     *
     *   For example, the timestamp value 0 with the timezone string "Europe/Paris"
     *   corresponds to "January 1st 1970, 00h00" in the UTC timezone, but the
     *   application may prefer to display it as "January 1st 1970, 01h00" in
     *   the Europe/Paris timezone (which is the same physical point in time).
     *
     * One consequence is that timestamp values with a non-empty timezone
     * can be compared and ordered directly, since they all share the same
     * well-known point of reference (the Unix epoch).
     *
     * Timestamps with an unset / empty timezone
     * -----------------------------------------
     *
     * If a Timestamp column has no timezone value, its epoch is
     * 1970-01-01 00:00:00 (January 1st 1970, midnight) in an *unknown* timezone.
     *
     * Therefore, timestamp values without a timezone cannot be meaningfully
     * interpreted as physical points in time, but only as calendar / clock
     * indications ("wall clock time") in an unspecified timezone.
     *
     *   For example, the timestamp value 0 with an empty timezone string
     *   corresponds to "January 1st 1970, 00h00" in an unknown timezone: there
     *   is not enough information to interpret it as a well-defined physical
     *   point in time.
     *
     * One consequence is that timestamp values without a timezone cannot
     * be reliably compared or ordered, since they may have different points of
     * reference.  In particular, it is *not* possible to interpret an unset
     * or empty timezone as the same as "UTC".
     *
     * Conversion between timezones
     * ----------------------------
     *
     * If a Timestamp column has a non-empty timezone, changing the timezone
     * to a different non-empty value is a metadata-only operation:
     * the timestamp values need not change as their point of reference remains
     * the same (the Unix epoch).
     *
     * However, if a Timestamp column has no timezone value, changing it to a
     * non-empty value requires to think about the desired semantics.
     * One possibility is to assume that the original timestamp values are
     * relative to the epoch of the timezone being set; timestamp values should
     * then adjusted to the Unix epoch (for example, changing the timezone from
     * empty to "Europe/Paris" would require converting the timestamp values
     * from "Europe/Paris" to "UTC", which seems counter-intuitive but is
     * nevertheless correct).
     *
     * Guidelines for encoding data from external libraries
     * ----------------------------------------------------
     *
     * Date & time libraries often have multiple different data types for temporal
     * data. In order to ease interoperability between different implementations the
     * Arrow project has some recommendations for encoding these types into a Timestamp
     * column.
     *
     * An "instant" represents a physical point in time that has no relevant timezone
     * (for example, astronomical data). To encode an instant, use a Timestamp with
     * the timezone string set to "UTC", and make sure the Timestamp values
     * are relative to the UTC epoch (January 1st 1970, midnight).
     *
     * A "zoned date-time" represents a physical point in time annotated with an
     * informative timezone (for example, the timezone in which the data was
     * recorded).  To encode a zoned date-time, use a Timestamp with the timezone
     * string set to the name of the timezone, and make sure the Timestamp values
     * are relative to the UTC epoch (January 1st 1970, midnight).
     *
     *  (There is some ambiguity between an instant and a zoned date-time with the
     *   UTC timezone.  Both of these are stored the same in Arrow.  Typically,
     *   this distinction does not matter.  If it does, then an application should
     *   use custom metadata or an extension type to distinguish between the two cases.)
     *
     * An "offset date-time" represents a physical point in time combined with an
     * explicit offset from UTC.  To encode an offset date-time, use a Timestamp
     * with the timezone string set to the numeric timezone offset string
     * (e.g. "+03:00"), and make sure the Timestamp values are relative to
     * the UTC epoch (January 1st 1970, midnight).
     *
     * A "naive date-time" (also called "local date-time" in some libraries)
     * represents a wall clock time combined with a calendar date, but with
     * no indication of how to map this information to a physical point in time.
     * Naive date-times must be handled with care because of this missing
     * information, and also because daylight saving time (DST) may make
     * some values ambiguous or non-existent. A naive date-time may be
     * stored as a struct with Date and Time fields. However, it may also be
     * encoded into a Timestamp column with an empty timezone. The timestamp
     * values should be computed "as if" the timezone of the date-time values
     * was UTC; for example, the naive date-time "January 1st 1970, 00h00" would
     * be encoded as timestamp value 0.
     */
    class Timestamp {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsTimestamp(bb, obj) {
            return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsTimestamp(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        unit() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt16(this.bb_pos + offset) : TimeUnit$1.SECOND;
        }
        timezone(optionalEncoding) {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
        }
        static startTimestamp(builder) {
            builder.startObject(2);
        }
        static addUnit(builder, unit) {
            builder.addFieldInt16(0, unit, TimeUnit$1.SECOND);
        }
        static addTimezone(builder, timezoneOffset) {
            builder.addFieldOffset(1, timezoneOffset, 0);
        }
        static endTimestamp(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createTimestamp(builder, unit, timezoneOffset) {
            Timestamp.startTimestamp(builder);
            Timestamp.addUnit(builder, unit);
            Timestamp.addTimezone(builder, timezoneOffset);
            return Timestamp.endTimestamp(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    var UnionMode$1;
    (function (UnionMode) {
        UnionMode[UnionMode["Sparse"] = 0] = "Sparse";
        UnionMode[UnionMode["Dense"] = 1] = "Dense";
    })(UnionMode$1 || (UnionMode$1 = {}));

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * A union is a complex type with children in Field
     * By default ids in the type vector refer to the offsets in the children
     * optionally typeIds provides an indirection between the child offset and the type id
     * for each child `typeIds[offset]` is the id used in the type vector
     */
    class Union {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsUnion(bb, obj) {
            return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsUnion(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        mode() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt16(this.bb_pos + offset) : UnionMode$1.Sparse;
        }
        typeIds(index) {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
        }
        typeIdsLength() {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        typeIdsArray() {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
        }
        static startUnion(builder) {
            builder.startObject(2);
        }
        static addMode(builder, mode) {
            builder.addFieldInt16(0, mode, UnionMode$1.Sparse);
        }
        static addTypeIds(builder, typeIdsOffset) {
            builder.addFieldOffset(1, typeIdsOffset, 0);
        }
        static createTypeIdsVector(builder, data) {
            builder.startVector(4, data.length, 4);
            for (let i = data.length - 1; i >= 0; i--) {
                builder.addInt32(data[i]);
            }
            return builder.endVector();
        }
        static startTypeIdsVector(builder, numElems) {
            builder.startVector(4, numElems, 4);
        }
        static endUnion(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createUnion(builder, mode, typeIdsOffset) {
            Union.startUnion(builder);
            Union.addMode(builder, mode);
            Union.addTypeIds(builder, typeIdsOffset);
            return Union.endUnion(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * Unicode with UTF-8 encoding
     */
    class Utf8$1 {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsUtf8(bb, obj) {
            return (obj || new Utf8$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsUtf8(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Utf8$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static startUtf8(builder) {
            builder.startObject(0);
        }
        static endUtf8(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createUtf8(builder) {
            Utf8$1.startUtf8(builder);
            return Utf8$1.endUtf8(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * ----------------------------------------------------------------------
     * Top-level Type value, enabling extensible type-specific metadata. We can
     * add new logical types to Type without breaking backwards compatibility
     */
    var Type$1;
    (function (Type) {
        Type[Type["NONE"] = 0] = "NONE";
        Type[Type["Null"] = 1] = "Null";
        Type[Type["Int"] = 2] = "Int";
        Type[Type["FloatingPoint"] = 3] = "FloatingPoint";
        Type[Type["Binary"] = 4] = "Binary";
        Type[Type["Utf8"] = 5] = "Utf8";
        Type[Type["Bool"] = 6] = "Bool";
        Type[Type["Decimal"] = 7] = "Decimal";
        Type[Type["Date"] = 8] = "Date";
        Type[Type["Time"] = 9] = "Time";
        Type[Type["Timestamp"] = 10] = "Timestamp";
        Type[Type["Interval"] = 11] = "Interval";
        Type[Type["List"] = 12] = "List";
        Type[Type["Struct_"] = 13] = "Struct_";
        Type[Type["Union"] = 14] = "Union";
        Type[Type["FixedSizeBinary"] = 15] = "FixedSizeBinary";
        Type[Type["FixedSizeList"] = 16] = "FixedSizeList";
        Type[Type["Map"] = 17] = "Map";
        Type[Type["Duration"] = 18] = "Duration";
        Type[Type["LargeBinary"] = 19] = "LargeBinary";
        Type[Type["LargeUtf8"] = 20] = "LargeUtf8";
        Type[Type["LargeList"] = 21] = "LargeList";
    })(Type$1 || (Type$1 = {}));

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * ----------------------------------------------------------------------
     * A field represents a named column in a record / row batch or child of a
     * nested type.
     */
    class Field {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsField(bb, obj) {
            return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsField(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        name(optionalEncoding) {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
        }
        /**
         * Whether or not this field can contain nulls. Should be true in general.
         */
        nullable() {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
        }
        typeType() {
            const offset = this.bb.__offset(this.bb_pos, 8);
            return offset ? this.bb.readUint8(this.bb_pos + offset) : Type$1.NONE;
        }
        /**
         * This is the type of the decoded value if the field is dictionary encoded.
         */
        // @ts-ignore
        type(obj) {
            const offset = this.bb.__offset(this.bb_pos, 10);
            return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
        }
        /**
         * Present only if the field is dictionary encoded.
         */
        dictionary(obj) {
            const offset = this.bb.__offset(this.bb_pos, 12);
            return offset ? (obj || new DictionaryEncoding()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
        }
        /**
         * children apply only to nested data types like Struct, List and Union. For
         * primitive types children will have length 0.
         */
        children(index, obj) {
            const offset = this.bb.__offset(this.bb_pos, 14);
            return offset ? (obj || new Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
        }
        childrenLength() {
            const offset = this.bb.__offset(this.bb_pos, 14);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        /**
         * User-defined metadata
         */
        customMetadata(index, obj) {
            const offset = this.bb.__offset(this.bb_pos, 16);
            return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
        }
        customMetadataLength() {
            const offset = this.bb.__offset(this.bb_pos, 16);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        static startField(builder) {
            builder.startObject(7);
        }
        static addName(builder, nameOffset) {
            builder.addFieldOffset(0, nameOffset, 0);
        }
        static addNullable(builder, nullable) {
            builder.addFieldInt8(1, +nullable, +false);
        }
        static addTypeType(builder, typeType) {
            builder.addFieldInt8(2, typeType, Type$1.NONE);
        }
        static addType(builder, typeOffset) {
            builder.addFieldOffset(3, typeOffset, 0);
        }
        static addDictionary(builder, dictionaryOffset) {
            builder.addFieldOffset(4, dictionaryOffset, 0);
        }
        static addChildren(builder, childrenOffset) {
            builder.addFieldOffset(5, childrenOffset, 0);
        }
        static createChildrenVector(builder, data) {
            builder.startVector(4, data.length, 4);
            for (let i = data.length - 1; i >= 0; i--) {
                builder.addOffset(data[i]);
            }
            return builder.endVector();
        }
        static startChildrenVector(builder, numElems) {
            builder.startVector(4, numElems, 4);
        }
        static addCustomMetadata(builder, customMetadataOffset) {
            builder.addFieldOffset(6, customMetadataOffset, 0);
        }
        static createCustomMetadataVector(builder, data) {
            builder.startVector(4, data.length, 4);
            for (let i = data.length - 1; i >= 0; i--) {
                builder.addOffset(data[i]);
            }
            return builder.endVector();
        }
        static startCustomMetadataVector(builder, numElems) {
            builder.startVector(4, numElems, 4);
        }
        static endField(builder) {
            const offset = builder.endObject();
            return offset;
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * ----------------------------------------------------------------------
     * A Schema describes the columns in a row batch
     */
    class Schema {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsSchema(bb, obj) {
            return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsSchema(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        /**
         * endianness of the buffer
         * it is Little Endian by default
         * if endianness doesn't match the underlying system then the vectors need to be converted
         */
        endianness() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt16(this.bb_pos + offset) : Endianness.Little;
        }
        fields(index, obj) {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? (obj || new Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
        }
        fieldsLength() {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        customMetadata(index, obj) {
            const offset = this.bb.__offset(this.bb_pos, 8);
            return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
        }
        customMetadataLength() {
            const offset = this.bb.__offset(this.bb_pos, 8);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        /**
         * Features used in the stream/file.
         */
        features(index) {
            const offset = this.bb.__offset(this.bb_pos, 10);
            return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : this.bb.createLong(0, 0);
        }
        featuresLength() {
            const offset = this.bb.__offset(this.bb_pos, 10);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        static startSchema(builder) {
            builder.startObject(4);
        }
        static addEndianness(builder, endianness) {
            builder.addFieldInt16(0, endianness, Endianness.Little);
        }
        static addFields(builder, fieldsOffset) {
            builder.addFieldOffset(1, fieldsOffset, 0);
        }
        static createFieldsVector(builder, data) {
            builder.startVector(4, data.length, 4);
            for (let i = data.length - 1; i >= 0; i--) {
                builder.addOffset(data[i]);
            }
            return builder.endVector();
        }
        static startFieldsVector(builder, numElems) {
            builder.startVector(4, numElems, 4);
        }
        static addCustomMetadata(builder, customMetadataOffset) {
            builder.addFieldOffset(2, customMetadataOffset, 0);
        }
        static createCustomMetadataVector(builder, data) {
            builder.startVector(4, data.length, 4);
            for (let i = data.length - 1; i >= 0; i--) {
                builder.addOffset(data[i]);
            }
            return builder.endVector();
        }
        static startCustomMetadataVector(builder, numElems) {
            builder.startVector(4, numElems, 4);
        }
        static addFeatures(builder, featuresOffset) {
            builder.addFieldOffset(3, featuresOffset, 0);
        }
        static createFeaturesVector(builder, data) {
            builder.startVector(8, data.length, 8);
            for (let i = data.length - 1; i >= 0; i--) {
                builder.addInt64(data[i]);
            }
            return builder.endVector();
        }
        static startFeaturesVector(builder, numElems) {
            builder.startVector(8, numElems, 8);
        }
        static endSchema(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static finishSchemaBuffer(builder, offset) {
            builder.finish(offset);
        }
        static finishSizePrefixedSchemaBuffer(builder, offset) {
            builder.finish(offset, undefined, true);
        }
        static createSchema(builder, endianness, fieldsOffset, customMetadataOffset, featuresOffset) {
            Schema.startSchema(builder);
            Schema.addEndianness(builder, endianness);
            Schema.addFields(builder, fieldsOffset);
            Schema.addCustomMetadata(builder, customMetadataOffset);
            Schema.addFeatures(builder, featuresOffset);
            return Schema.endSchema(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * ----------------------------------------------------------------------
     * Arrow File metadata
     *
     */
    class Footer {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsFooter(bb, obj) {
            return (obj || new Footer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsFooter(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Footer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        version() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt16(this.bb_pos + offset) : MetadataVersion$1.V1;
        }
        schema(obj) {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? (obj || new Schema()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
        }
        dictionaries(index, obj) {
            const offset = this.bb.__offset(this.bb_pos, 8);
            return offset ? (obj || new Block()).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;
        }
        dictionariesLength() {
            const offset = this.bb.__offset(this.bb_pos, 8);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        recordBatches(index, obj) {
            const offset = this.bb.__offset(this.bb_pos, 10);
            return offset ? (obj || new Block()).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;
        }
        recordBatchesLength() {
            const offset = this.bb.__offset(this.bb_pos, 10);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        /**
         * User-defined metadata
         */
        customMetadata(index, obj) {
            const offset = this.bb.__offset(this.bb_pos, 12);
            return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
        }
        customMetadataLength() {
            const offset = this.bb.__offset(this.bb_pos, 12);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        static startFooter(builder) {
            builder.startObject(5);
        }
        static addVersion(builder, version) {
            builder.addFieldInt16(0, version, MetadataVersion$1.V1);
        }
        static addSchema(builder, schemaOffset) {
            builder.addFieldOffset(1, schemaOffset, 0);
        }
        static addDictionaries(builder, dictionariesOffset) {
            builder.addFieldOffset(2, dictionariesOffset, 0);
        }
        static startDictionariesVector(builder, numElems) {
            builder.startVector(24, numElems, 8);
        }
        static addRecordBatches(builder, recordBatchesOffset) {
            builder.addFieldOffset(3, recordBatchesOffset, 0);
        }
        static startRecordBatchesVector(builder, numElems) {
            builder.startVector(24, numElems, 8);
        }
        static addCustomMetadata(builder, customMetadataOffset) {
            builder.addFieldOffset(4, customMetadataOffset, 0);
        }
        static createCustomMetadataVector(builder, data) {
            builder.startVector(4, data.length, 4);
            for (let i = data.length - 1; i >= 0; i--) {
                builder.addOffset(data[i]);
            }
            return builder.endVector();
        }
        static startCustomMetadataVector(builder, numElems) {
            builder.startVector(4, numElems, 4);
        }
        static endFooter(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static finishFooterBuffer(builder, offset) {
            builder.finish(offset);
        }
        static finishSizePrefixedFooterBuffer(builder, offset) {
            builder.finish(offset, undefined, true);
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    class Schema$1 {
        constructor(fields = [], metadata, dictionaries) {
            this.fields = (fields || []);
            this.metadata = metadata || new Map();
            if (!dictionaries) {
                dictionaries = generateDictionaryMap(fields);
            }
            this.dictionaries = dictionaries;
        }
        get [Symbol.toStringTag]() { return 'Schema'; }
        get names() { return this.fields.map((f) => f.name); }
        toString() {
            return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;
        }
        /**
         * Construct a new Schema containing only specified fields.
         *
         * @param fieldNames Names of fields to keep.
         * @returns A new Schema of fields matching the specified names.
         */
        select(fieldNames) {
            const names = new Set(fieldNames);
            const fields = this.fields.filter((f) => names.has(f.name));
            return new Schema$1(fields, this.metadata);
        }
        /**
         * Construct a new Schema containing only fields at the specified indices.
         *
         * @param fieldIndices Indices of fields to keep.
         * @returns A new Schema of fields at the specified indices.
         */
        selectAt(fieldIndices) {
            const fields = fieldIndices.map((i) => this.fields[i]).filter(Boolean);
            return new Schema$1(fields, this.metadata);
        }
        assign(...args) {
            const other = (args[0] instanceof Schema$1
                ? args[0]
                : Array.isArray(args[0])
                    ? new Schema$1(args[0])
                    : new Schema$1(args));
            const curFields = [...this.fields];
            const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);
            const newFields = other.fields.filter((f2) => {
                const i = curFields.findIndex((f) => f.name === f2.name);
                return ~i ? (curFields[i] = f2.clone({
                    metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)
                })) && false : true;
            });
            const newDictionaries = generateDictionaryMap(newFields, new Map());
            return new Schema$1([...curFields, ...newFields], metadata, new Map([...this.dictionaries, ...newDictionaries]));
        }
    }
    // Add these here so they're picked up by the externs creator
    // in the build, and closure-compiler doesn't minify them away
    Schema$1.prototype.fields = null;
    Schema$1.prototype.metadata = null;
    Schema$1.prototype.dictionaries = null;
    class Field$1 {
        constructor(name, type, nullable = false, metadata) {
            this.name = name;
            this.type = type;
            this.nullable = nullable;
            this.metadata = metadata || new Map();
        }
        /** @nocollapse */
        static new(...args) {
            let [name, type, nullable, metadata] = args;
            if (args[0] && typeof args[0] === 'object') {
                ({ name } = args[0]);
                (type === undefined) && (type = args[0].type);
                (nullable === undefined) && (nullable = args[0].nullable);
                (metadata === undefined) && (metadata = args[0].metadata);
            }
            return new Field$1(`${name}`, type, nullable, metadata);
        }
        get typeId() { return this.type.typeId; }
        get [Symbol.toStringTag]() { return 'Field'; }
        toString() { return `${this.name}: ${this.type}`; }
        clone(...args) {
            let [name, type, nullable, metadata] = args;
            (!args[0] || typeof args[0] !== 'object')
                ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)
                : ({ name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata } = args[0]);
            return Field$1.new(name, type, nullable, metadata);
        }
    }
    // Add these here so they're picked up by the externs creator
    // in the build, and closure-compiler doesn't minify them away
    Field$1.prototype.type = null;
    Field$1.prototype.name = null;
    Field$1.prototype.nullable = null;
    Field$1.prototype.metadata = null;
    /** @ignore */
    function mergeMaps(m1, m2) {
        return new Map([...(m1 || new Map()), ...(m2 || new Map())]);
    }
    /** @ignore */
    function generateDictionaryMap(fields, dictionaries = new Map()) {
        for (let i = -1, n = fields.length; ++i < n;) {
            const field = fields[i];
            const type = field.type;
            if (DataType.isDictionary(type)) {
                if (!dictionaries.has(type.id)) {
                    dictionaries.set(type.id, type.dictionary);
                }
                else if (dictionaries.get(type.id) !== type.dictionary) {
                    throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);
                }
            }
            if (type.children && type.children.length > 0) {
                generateDictionaryMap(type.children, dictionaries);
            }
        }
        return dictionaries;
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    var Long$1 = Long;
    var Builder$2 = Builder$1;
    var ByteBuffer$1 = ByteBuffer;
    /** @ignore */
    class Footer_ {
        constructor(schema, version = MetadataVersion.V4, recordBatches, dictionaryBatches) {
            this.schema = schema;
            this.version = version;
            recordBatches && (this._recordBatches = recordBatches);
            dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);
        }
        /** @nocollapse */
        static decode(buf) {
            buf = new ByteBuffer$1(toUint8Array(buf));
            const footer = Footer.getRootAsFooter(buf);
            const schema = Schema$1.decode(footer.schema());
            return new OffHeapFooter(schema, footer);
        }
        /** @nocollapse */
        static encode(footer) {
            const b = new Builder$2();
            const schemaOffset = Schema$1.encode(b, footer.schema);
            Footer.startRecordBatchesVector(b, footer.numRecordBatches);
            for (const rb of [...footer.recordBatches()].slice().reverse()) {
                FileBlock.encode(b, rb);
            }
            const recordBatchesOffset = b.endVector();
            Footer.startDictionariesVector(b, footer.numDictionaries);
            for (const db of [...footer.dictionaryBatches()].slice().reverse()) {
                FileBlock.encode(b, db);
            }
            const dictionaryBatchesOffset = b.endVector();
            Footer.startFooter(b);
            Footer.addSchema(b, schemaOffset);
            Footer.addVersion(b, MetadataVersion.V4);
            Footer.addRecordBatches(b, recordBatchesOffset);
            Footer.addDictionaries(b, dictionaryBatchesOffset);
            Footer.finishFooterBuffer(b, Footer.endFooter(b));
            return b.asUint8Array();
        }
        get numRecordBatches() { return this._recordBatches.length; }
        get numDictionaries() { return this._dictionaryBatches.length; }
        *recordBatches() {
            for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {
                if (block = this.getRecordBatch(i)) {
                    yield block;
                }
            }
        }
        *dictionaryBatches() {
            for (let block, i = -1, n = this.numDictionaries; ++i < n;) {
                if (block = this.getDictionaryBatch(i)) {
                    yield block;
                }
            }
        }
        getRecordBatch(index) {
            return index >= 0
                && index < this.numRecordBatches
                && this._recordBatches[index] || null;
        }
        getDictionaryBatch(index) {
            return index >= 0
                && index < this.numDictionaries
                && this._dictionaryBatches[index] || null;
        }
    }
    /** @ignore */
    class OffHeapFooter extends Footer_ {
        constructor(schema, _footer) {
            super(schema, _footer.version());
            this._footer = _footer;
        }
        get numRecordBatches() { return this._footer.recordBatchesLength(); }
        get numDictionaries() { return this._footer.dictionariesLength(); }
        getRecordBatch(index) {
            if (index >= 0 && index < this.numRecordBatches) {
                const fileBlock = this._footer.recordBatches(index);
                if (fileBlock) {
                    return FileBlock.decode(fileBlock);
                }
            }
            return null;
        }
        getDictionaryBatch(index) {
            if (index >= 0 && index < this.numDictionaries) {
                const fileBlock = this._footer.dictionaries(index);
                if (fileBlock) {
                    return FileBlock.decode(fileBlock);
                }
            }
            return null;
        }
    }
    /** @ignore */
    class FileBlock {
        constructor(metaDataLength, bodyLength, offset) {
            this.metaDataLength = metaDataLength;
            this.offset = typeof offset === 'number' ? offset : offset.low;
            this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;
        }
        /** @nocollapse */
        static decode(block) {
            return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());
        }
        /** @nocollapse */
        static encode(b, fileBlock) {
            const { metaDataLength } = fileBlock;
            const offset = new Long$1(fileBlock.offset, 0);
            const bodyLength = new Long$1(fileBlock.bodyLength, 0);
            return Block.createBlock(b, offset, metaDataLength, bodyLength);
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    const ITERATOR_DONE = Object.freeze({ done: true, value: void (0) });
    /** @ignore */
    class ArrowJSON {
        constructor(_json) {
            this._json = _json;
        }
        get schema() { return this._json['schema']; }
        get batches() { return (this._json['batches'] || []); }
        get dictionaries() { return (this._json['dictionaries'] || []); }
    }
    /** @ignore */
    class ReadableInterop {
        tee() {
            return this._getDOMStream().tee();
        }
        pipe(writable, options) {
            return this._getNodeStream().pipe(writable, options);
        }
        pipeTo(writable, options) { return this._getDOMStream().pipeTo(writable, options); }
        pipeThrough(duplex, options) {
            return this._getDOMStream().pipeThrough(duplex, options);
        }
        _getDOMStream() {
            return this._DOMStream || (this._DOMStream = this.toDOMStream());
        }
        _getNodeStream() {
            return this._nodeStream || (this._nodeStream = this.toNodeStream());
        }
    }
    /** @ignore */
    class AsyncQueue extends ReadableInterop {
        constructor() {
            super();
            this._values = [];
            this.resolvers = [];
            this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);
        }
        get closed() { return this._closedPromise; }
        cancel(reason) {
            return __awaiter(this, void 0, void 0, function* () { yield this.return(reason); });
        }
        write(value) {
            if (this._ensureOpen()) {
                this.resolvers.length <= 0
                    ? (this._values.push(value))
                    : (this.resolvers.shift().resolve({ done: false, value }));
            }
        }
        abort(value) {
            if (this._closedPromiseResolve) {
                this.resolvers.length <= 0
                    ? (this._error = { error: value })
                    : (this.resolvers.shift().reject({ done: true, value }));
            }
        }
        close() {
            if (this._closedPromiseResolve) {
                const { resolvers } = this;
                while (resolvers.length > 0) {
                    resolvers.shift().resolve(ITERATOR_DONE);
                }
                this._closedPromiseResolve();
                this._closedPromiseResolve = undefined;
            }
        }
        [Symbol.asyncIterator]() { return this; }
        toDOMStream(options) {
            return streamAdapters.toDOMStream((this._closedPromiseResolve || this._error)
                ? this
                : this._values, options);
        }
        toNodeStream(options) {
            return streamAdapters.toNodeStream((this._closedPromiseResolve || this._error)
                ? this
                : this._values, options);
        }
        throw(_) {
            return __awaiter(this, void 0, void 0, function* () { yield this.abort(_); return ITERATOR_DONE; });
        }
        return(_) {
            return __awaiter(this, void 0, void 0, function* () { yield this.close(); return ITERATOR_DONE; });
        }
        read(size) {
            return __awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'read')).value; });
        }
        peek(size) {
            return __awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'peek')).value; });
        }
        next(..._args) {
            if (this._values.length > 0) {
                return Promise.resolve({ done: false, value: this._values.shift() });
            }
            else if (this._error) {
                return Promise.reject({ done: true, value: this._error.error });
            }
            else if (!this._closedPromiseResolve) {
                return Promise.resolve(ITERATOR_DONE);
            }
            else {
                return new Promise((resolve, reject) => {
                    this.resolvers.push({ resolve, reject });
                });
            }
        }
        _ensureOpen() {
            if (this._closedPromiseResolve) {
                return true;
            }
            throw new Error(`AsyncQueue is closed`);
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class AsyncByteQueue extends AsyncQueue {
        write(value) {
            if ((value = toUint8Array(value)).byteLength > 0) {
                return super.write(value);
            }
        }
        toString(sync = false) {
            return sync
                ? decodeUtf8(this.toUint8Array(true))
                : this.toUint8Array(false).then(decodeUtf8);
        }
        toUint8Array(sync = false) {
            return sync ? joinUint8Arrays(this._values)[0] : (() => __awaiter(this, void 0, void 0, function* () {
                var e_1, _a;
                const buffers = [];
                let byteLength = 0;
                try {
                    for (var _b = __asyncValues(this), _c; _c = yield _b.next(), !_c.done;) {
                        const chunk = _c.value;
                        buffers.push(chunk);
                        byteLength += chunk.byteLength;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return joinUint8Arrays(buffers, byteLength)[0];
            }))();
        }
    }
    /** @ignore */
    class ByteStream {
        constructor(source) {
            if (source) {
                this.source = new ByteStreamSource(streamAdapters.fromIterable(source));
            }
        }
        [Symbol.iterator]() { return this; }
        next(value) { return this.source.next(value); }
        throw(value) { return this.source.throw(value); }
        return(value) { return this.source.return(value); }
        peek(size) { return this.source.peek(size); }
        read(size) { return this.source.read(size); }
    }
    /** @ignore */
    class AsyncByteStream {
        constructor(source) {
            if (source instanceof AsyncByteStream) {
                this.source = source.source;
            }
            else if (source instanceof AsyncByteQueue) {
                this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));
            }
            else if (isReadableNodeStream(source)) {
                this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));
            }
            else if (isReadableDOMStream(source)) {
                this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));
            }
            else if (isFetchResponse(source)) {
                this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body));
            }
            else if (isIterable(source)) {
                this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));
            }
            else if (isPromise(source)) {
                this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));
            }
            else if (isAsyncIterable(source)) {
                this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));
            }
        }
        [Symbol.asyncIterator]() { return this; }
        next(value) { return this.source.next(value); }
        throw(value) { return this.source.throw(value); }
        return(value) { return this.source.return(value); }
        get closed() { return this.source.closed; }
        cancel(reason) { return this.source.cancel(reason); }
        peek(size) { return this.source.peek(size); }
        read(size) { return this.source.read(size); }
    }
    /** @ignore */
    class ByteStreamSource {
        constructor(source) {
            this.source = source;
        }
        cancel(reason) { this.return(reason); }
        peek(size) { return this.next(size, 'peek').value; }
        read(size) { return this.next(size, 'read').value; }
        next(size, cmd = 'read') { return this.source.next({ cmd, size }); }
        throw(value) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }
        return(value) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }
    }
    /** @ignore */
    class AsyncByteStreamSource {
        constructor(source) {
            this.source = source;
            this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);
        }
        cancel(reason) {
            return __awaiter(this, void 0, void 0, function* () { yield this.return(reason); });
        }
        get closed() { return this._closedPromise; }
        read(size) {
            return __awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'read')).value; });
        }
        peek(size) {
            return __awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'peek')).value; });
        }
        next(size, cmd = 'read') {
            return __awaiter(this, void 0, void 0, function* () { return (yield this.source.next({ cmd, size })); });
        }
        throw(value) {
            return __awaiter(this, void 0, void 0, function* () {
                const result = (this.source.throw && (yield this.source.throw(value))) || ITERATOR_DONE;
                this._closedPromiseResolve && this._closedPromiseResolve();
                this._closedPromiseResolve = undefined;
                return Object.create(result);
            });
        }
        return(value) {
            return __awaiter(this, void 0, void 0, function* () {
                const result = (this.source.return && (yield this.source.return(value))) || ITERATOR_DONE;
                this._closedPromiseResolve && this._closedPromiseResolve();
                this._closedPromiseResolve = undefined;
                return Object.create(result);
            });
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class RandomAccessFile extends ByteStream {
        constructor(buffer, byteLength) {
            super();
            this.position = 0;
            this.buffer = toUint8Array(buffer);
            this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;
        }
        readInt32(position) {
            const { buffer, byteOffset } = this.readAt(position, 4);
            return new DataView(buffer, byteOffset).getInt32(0, true);
        }
        seek(position) {
            this.position = Math.min(position, this.size);
            return position < this.size;
        }
        read(nBytes) {
            const { buffer, size, position } = this;
            if (buffer && position < size) {
                if (typeof nBytes !== 'number') {
                    nBytes = Number.POSITIVE_INFINITY;
                }
                this.position = Math.min(size, position + Math.min(size - position, nBytes));
                return buffer.subarray(position, this.position);
            }
            return null;
        }
        readAt(position, nBytes) {
            const buf = this.buffer;
            const end = Math.min(this.size, position + nBytes);
            return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);
        }
        close() { this.buffer && (this.buffer = null); }
        throw(value) { this.close(); return { done: true, value }; }
        return(value) { this.close(); return { done: true, value }; }
    }
    /** @ignore */
    class AsyncRandomAccessFile extends AsyncByteStream {
        constructor(file, byteLength) {
            super();
            this.position = 0;
            this._handle = file;
            if (typeof byteLength === 'number') {
                this.size = byteLength;
            }
            else {
                this._pending = (() => __awaiter(this, void 0, void 0, function* () {
                    this.size = (yield file.stat()).size;
                    delete this._pending;
                }))();
            }
        }
        readInt32(position) {
            return __awaiter(this, void 0, void 0, function* () {
                const { buffer, byteOffset } = yield this.readAt(position, 4);
                return new DataView(buffer, byteOffset).getInt32(0, true);
            });
        }
        seek(position) {
            return __awaiter(this, void 0, void 0, function* () {
                this._pending && (yield this._pending);
                this.position = Math.min(position, this.size);
                return position < this.size;
            });
        }
        read(nBytes) {
            return __awaiter(this, void 0, void 0, function* () {
                this._pending && (yield this._pending);
                const { _handle: file, size, position } = this;
                if (file && position < size) {
                    if (typeof nBytes !== 'number') {
                        nBytes = Number.POSITIVE_INFINITY;
                    }
                    let pos = position, offset = 0, bytesRead = 0;
                    const end = Math.min(size, pos + Math.min(size - pos, nBytes));
                    const buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));
                    while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {
                        ({ bytesRead } = yield file.read(buffer, offset, buffer.byteLength - offset, pos));
                    }
                    return buffer;
                }
                return null;
            });
        }
        readAt(position, nBytes) {
            return __awaiter(this, void 0, void 0, function* () {
                this._pending && (yield this._pending);
                const { _handle: file, size } = this;
                if (file && (position + nBytes) < size) {
                    const end = Math.min(size, position + nBytes);
                    const buffer = new Uint8Array(end - position);
                    return (yield file.read(buffer, 0, nBytes, position)).buffer;
                }
                return new Uint8Array(nBytes);
            });
        }
        close() {
            return __awaiter(this, void 0, void 0, function* () { const f = this._handle; this._handle = null; f && (yield f.close()); });
        }
        throw(value) {
            return __awaiter(this, void 0, void 0, function* () { yield this.close(); return { done: true, value }; });
        }
        return(value) {
            return __awaiter(this, void 0, void 0, function* () { yield this.close(); return { done: true, value }; });
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    // or more contributor license agreements.  See the NOTICE file
    // distributed with this work for additional information
    // regarding copyright ownership.  The ASF licenses this file
    // to you under the Apache License, Version 2.0 (the
    // "License"); you may not use this file except in compliance
    // with the License.  You may obtain a copy of the License at
    //
    //   http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing,
    // software distributed under the License is distributed on an
    // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    // KIND, either express or implied.  See the License for the
    // specific language governing permissions and limitations
    // under the License.
    /** @ignore */
    const carryBit16 = 1 << 16;
    /** @ignore */
    function intAsHex(value) {
        if (value < 0) {
            value = 0xFFFFFFFF + value + 1;
        }
        return `0x${value.toString(16)}`;
    }
    /** @ignore */
    const kInt32DecimalDigits = 8;
    /** @ignore */
    const kPowersOfTen = [
        1,
        10,
        100,
        1000,
        10000,
        100000,
        1000000,
        10000000,
        100000000
    ];
    /** @ignore */
    class BaseInt64 {
        constructor(buffer) {
            this.buffer = buffer;
        }
        high() { return this.buffer[1]; }
        low() { return this.buffer[0]; }
        _times(other) {
            // Break the left and right numbers into 16 bit chunks
            // so that we can multiply them without overflow.
            const L = new Uint32Array([
                this.buffer[1] >>> 16,
                this.buffer[1] & 0xFFFF,
                this.buffer[0] >>> 16,
                this.buffer[0] & 0xFFFF
            ]);
            const R = new Uint32Array([
                other.buffer[1] >>> 16,
                other.buffer[1] & 0xFFFF,
                other.buffer[0] >>> 16,
                other.buffer[0] & 0xFFFF
            ]);
            let product = L[3] * R[3];
            this.buffer[0] = product & 0xFFFF;
            let sum = product >>> 16;
            product = L[2] * R[3];
            sum += product;
            product = (L[3] * R[2]) >>> 0;
            sum += product;
            this.buffer[0] += sum << 16;
            this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);
            this.buffer[1] += sum >>> 16;
            this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];
            this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;
            return this;
        }
        _plus(other) {
            const sum = (this.buffer[0] + other.buffer[0]) >>> 0;
            this.buffer[1] += other.buffer[1];
            if (sum < (this.buffer[0] >>> 0)) {
                ++this.buffer[1];
            }
            this.buffer[0] = sum;
        }
        lessThan(other) {
            return this.buffer[1] < other.buffer[1] ||
                (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);
        }
        equals(other) {
            return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];
        }
        greaterThan(other) {
            return other.lessThan(this);
        }
        hex() {
            return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;
        }
    }
    /** @ignore */
    class Uint64$1 extends BaseInt64 {
        times(other) {
            this._times(other);
            return this;
        }
        plus(other) {
            this._plus(other);
            return this;
        }
        /** @nocollapse */
        static from(val, out_buffer = new Uint32Array(2)) {
            return Uint64$1.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);
        }
        /** @nocollapse */
        static fromNumber(num, out_buffer = new Uint32Array(2)) {
            // Always parse numbers as strings - pulling out high and low bits
            // directly seems to lose precision sometimes
            // For example:
            //     > -4613034156400212000 >>> 0
            //     721782784
            // The correct lower 32-bits are 721782752
            return Uint64$1.fromString(num.toString(), out_buffer);
        }
        /** @nocollapse */
        static fromString(str, out_buffer = new Uint32Array(2)) {
            const length = str.length;
            const out = new Uint64$1(out_buffer);
            for (let posn = 0; posn < length;) {
                const group = kInt32DecimalDigits < length - posn ?
                    kInt32DecimalDigits : length - posn;
                const chunk = new Uint64$1(new Uint32Array([Number.parseInt(str.slice(posn, posn + group), 10), 0]));
                const multiple = new Uint64$1(new Uint32Array([kPowersOfTen[group], 0]));
                out.times(multiple);
                out.plus(chunk);
                posn += group;
            }
            return out;
        }
        /** @nocollapse */
        static convertArray(values) {
            const data = new Uint32Array(values.length * 2);
            for (let i = -1, n = values.length; ++i < n;) {
                Uint64$1.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));
            }
            return data;
        }
        /** @nocollapse */
        static multiply(left, right) {
            const rtrn = new Uint64$1(new Uint32Array(left.buffer));
            return rtrn.times(right);
        }
        /** @nocollapse */
        static add(left, right) {
            const rtrn = new Uint64$1(new Uint32Array(left.buffer));
            return rtrn.plus(right);
        }
    }
    /** @ignore */
    class Int64$1 extends BaseInt64 {
        negate() {
            this.buffer[0] = ~this.buffer[0] + 1;
            this.buffer[1] = ~this.buffer[1];
            if (this.buffer[0] == 0) {
                ++this.buffer[1];
            }
            return this;
        }
        times(other) {
            this._times(other);
            return this;
        }
        plus(other) {
            this._plus(other);
            return this;
        }
        lessThan(other) {
            // force high bytes to be signed
            // eslint-disable-next-line unicorn/prefer-math-trunc
            const this_high = this.buffer[1] << 0;
            // eslint-disable-next-line unicorn/prefer-math-trunc
            const other_high = other.buffer[1] << 0;
            return this_high < other_high ||
                (this_high === other_high && this.buffer[0] < other.buffer[0]);
        }
        /** @nocollapse */
        static from(val, out_buffer = new Uint32Array(2)) {
            return Int64$1.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);
        }
        /** @nocollapse */
        static fromNumber(num, out_buffer = new Uint32Array(2)) {
            // Always parse numbers as strings - pulling out high and low bits
            // directly seems to lose precision sometimes
            // For example:
            //     > -4613034156400212000 >>> 0
            //     721782784
            // The correct lower 32-bits are 721782752
            return Int64$1.fromString(num.toString(), out_buffer);
        }
        /** @nocollapse */
        static fromString(str, out_buffer = new Uint32Array(2)) {
            // TODO: Assert that out_buffer is 0 and length = 2
            const negate = str.startsWith('-');
            const length = str.length;
            const out = new Int64$1(out_buffer);
            for (let posn = negate ? 1 : 0; posn < length;) {
                const group = kInt32DecimalDigits < length - posn ?
                    kInt32DecimalDigits : length - posn;
                const chunk = new Int64$1(new Uint32Array([Number.parseInt(str.slice(posn, posn + group), 10), 0]));
                const multiple = new Int64$1(new Uint32Array([kPowersOfTen[group], 0]));
                out.times(multiple);
                out.plus(chunk);
                posn += group;
            }
            return negate ? out.negate() : out;
        }
        /** @nocollapse */
        static convertArray(values) {
            const data = new Uint32Array(values.length * 2);
            for (let i = -1, n = values.length; ++i < n;) {
                Int64$1.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));
            }
            return data;
        }
        /** @nocollapse */
        static multiply(left, right) {
            const rtrn = new Int64$1(new Uint32Array(left.buffer));
            return rtrn.times(right);
        }
        /** @nocollapse */
        static add(left, right) {
            const rtrn = new Int64$1(new Uint32Array(left.buffer));
            return rtrn.plus(right);
        }
    }
    /** @ignore */
    class Int128 {
        constructor(buffer) {
            this.buffer = buffer;
            // buffer[3] MSB (high)
            // buffer[2]
            // buffer[1]
            // buffer[0] LSB (low)
        }
        high() {
            return new Int64$1(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));
        }
        low() {
            return new Int64$1(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));
        }
        negate() {
            this.buffer[0] = ~this.buffer[0] + 1;
            this.buffer[1] = ~this.buffer[1];
            this.buffer[2] = ~this.buffer[2];
            this.buffer[3] = ~this.buffer[3];
            if (this.buffer[0] == 0) {
                ++this.buffer[1];
            }
            if (this.buffer[1] == 0) {
                ++this.buffer[2];
            }
            if (this.buffer[2] == 0) {
                ++this.buffer[3];
            }
            return this;
        }
        times(other) {
            // Break the left and right numbers into 32 bit chunks
            // so that we can multiply them without overflow.
            const L0 = new Uint64$1(new Uint32Array([this.buffer[3], 0]));
            const L1 = new Uint64$1(new Uint32Array([this.buffer[2], 0]));
            const L2 = new Uint64$1(new Uint32Array([this.buffer[1], 0]));
            const L3 = new Uint64$1(new Uint32Array([this.buffer[0], 0]));
            const R0 = new Uint64$1(new Uint32Array([other.buffer[3], 0]));
            const R1 = new Uint64$1(new Uint32Array([other.buffer[2], 0]));
            const R2 = new Uint64$1(new Uint32Array([other.buffer[1], 0]));
            const R3 = new Uint64$1(new Uint32Array([other.buffer[0], 0]));
            let product = Uint64$1.multiply(L3, R3);
            this.buffer[0] = product.low();
            const sum = new Uint64$1(new Uint32Array([product.high(), 0]));
            product = Uint64$1.multiply(L2, R3);
            sum.plus(product);
            product = Uint64$1.multiply(L3, R2);
            sum.plus(product);
            this.buffer[1] = sum.low();
            this.buffer[3] = (sum.lessThan(product) ? 1 : 0);
            this.buffer[2] = sum.high();
            const high = new Uint64$1(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));
            high.plus(Uint64$1.multiply(L1, R3))
                .plus(Uint64$1.multiply(L2, R2))
                .plus(Uint64$1.multiply(L3, R1));
            this.buffer[3] += Uint64$1.multiply(L0, R3)
                .plus(Uint64$1.multiply(L1, R2))
                .plus(Uint64$1.multiply(L2, R1))
                .plus(Uint64$1.multiply(L3, R0)).low();
            return this;
        }
        plus(other) {
            const sums = new Uint32Array(4);
            sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;
            sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;
            sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;
            sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;
            if (sums[0] < (this.buffer[0] >>> 0)) {
                ++sums[1];
            }
            if (sums[1] < (this.buffer[1] >>> 0)) {
                ++sums[2];
            }
            if (sums[2] < (this.buffer[2] >>> 0)) {
                ++sums[3];
            }
            this.buffer[3] = sums[3];
            this.buffer[2] = sums[2];
            this.buffer[1] = sums[1];
            this.buffer[0] = sums[0];
            return this;
        }
        hex() {
            return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;
        }
        /** @nocollapse */
        static multiply(left, right) {
            const rtrn = new Int128(new Uint32Array(left.buffer));
            return rtrn.times(right);
        }
        /** @nocollapse */
        static add(left, right) {
            const rtrn = new Int128(new Uint32Array(left.buffer));
            return rtrn.plus(right);
        }
        /** @nocollapse */
        static from(val, out_buffer = new Uint32Array(4)) {
            return Int128.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);
        }
        /** @nocollapse */
        static fromNumber(num, out_buffer = new Uint32Array(4)) {
            // Always parse numbers as strings - pulling out high and low bits
            // directly seems to lose precision sometimes
            // For example:
            //     > -4613034156400212000 >>> 0
            //     721782784
            // The correct lower 32-bits are 721782752
            return Int128.fromString(num.toString(), out_buffer);
        }
        /** @nocollapse */
        static fromString(str, out_buffer = new Uint32Array(4)) {
            // TODO: Assert that out_buffer is 0 and length = 4
            const negate = str.startsWith('-');
            const length = str.length;
            const out = new Int128(out_buffer);
            for (let posn = negate ? 1 : 0; posn < length;) {
                const group = kInt32DecimalDigits < length - posn ?
                    kInt32DecimalDigits : length - posn;
                const chunk = new Int128(new Uint32Array([Number.parseInt(str.slice(posn, posn + group), 10), 0, 0, 0]));
                const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));
                out.times(multiple);
                out.plus(chunk);
                posn += group;
            }
            return negate ? out.negate() : out;
        }
        /** @nocollapse */
        static convertArray(values) {
            // TODO: Distinguish between string and number at compile-time
            const data = new Uint32Array(values.length * 4);
            for (let i = -1, n = values.length; ++i < n;) {
                Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));
            }
            return data;
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class VectorLoader extends Visitor {
        constructor(bytes, nodes, buffers, dictionaries) {
            super();
            this.nodesIndex = -1;
            this.buffersIndex = -1;
            this.bytes = bytes;
            this.nodes = nodes;
            this.buffers = buffers;
            this.dictionaries = dictionaries;
        }
        visit(node) {
            return super.visit(node instanceof Field$1 ? node.type : node);
        }
        visitNull(type, { length } = this.nextFieldNode()) {
            return makeData({ type, length });
        }
        visitBool(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });
        }
        visitInt(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });
        }
        visitFloat(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });
        }
        visitUtf8(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), data: this.readData(type) });
        }
        visitBinary(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), data: this.readData(type) });
        }
        visitFixedSizeBinary(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });
        }
        visitDate(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });
        }
        visitTimestamp(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });
        }
        visitTime(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });
        }
        visitDecimal(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });
        }
        visitList(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), 'child': this.visit(type.children[0]) });
        }
        visitStruct(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), children: this.visitMany(type.children) });
        }
        visitUnion(type) {
            return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type);
        }
        visitDenseUnion(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), typeIds: this.readTypeIds(type), valueOffsets: this.readOffsets(type), children: this.visitMany(type.children) });
        }
        visitSparseUnion(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), typeIds: this.readTypeIds(type), children: this.visitMany(type.children) });
        }
        visitDictionary(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type.indices), dictionary: this.readDictionary(type) });
        }
        visitInterval(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), data: this.readData(type) });
        }
        visitFixedSizeList(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), 'child': this.visit(type.children[0]) });
        }
        visitMap(type, { length, nullCount } = this.nextFieldNode()) {
            return makeData({ type, length, nullCount, nullBitmap: this.readNullBitmap(type, nullCount), valueOffsets: this.readOffsets(type), 'child': this.visit(type.children[0]) });
        }
        nextFieldNode() { return this.nodes[++this.nodesIndex]; }
        nextBufferRange() { return this.buffers[++this.buffersIndex]; }
        readNullBitmap(type, nullCount, buffer = this.nextBufferRange()) {
            return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);
        }
        readOffsets(type, buffer) { return this.readData(type, buffer); }
        readTypeIds(type, buffer) { return this.readData(type, buffer); }
        readData(_type, { length, offset } = this.nextBufferRange()) {
            return this.bytes.subarray(offset, offset + length);
        }
        readDictionary(type) {
            return this.dictionaries.get(type.id);
        }
    }
    /** @ignore */
    class JSONVectorLoader extends VectorLoader {
        constructor(sources, nodes, buffers, dictionaries) {
            super(new Uint8Array(0), nodes, buffers, dictionaries);
            this.sources = sources;
        }
        readNullBitmap(_type, nullCount, { offset } = this.nextBufferRange()) {
            return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);
        }
        readOffsets(_type, { offset } = this.nextBufferRange()) {
            return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));
        }
        readTypeIds(type, { offset } = this.nextBufferRange()) {
            return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));
        }
        readData(type, { offset } = this.nextBufferRange()) {
            const { sources } = this;
            if (DataType.isTimestamp(type)) {
                return toArrayBufferView(Uint8Array, Int64$1.convertArray(sources[offset]));
            }
            else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {
                return toArrayBufferView(Uint8Array, Int64$1.convertArray(sources[offset]));
            }
            else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {
                return toArrayBufferView(Uint8Array, Int64$1.convertArray(sources[offset]));
            }
            else if (DataType.isDecimal(type)) {
                return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset]));
            }
            else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {
                return binaryDataFromJSON(sources[offset]);
            }
            else if (DataType.isBool(type)) {
                return packBools(sources[offset]);
            }
            else if (DataType.isUtf8(type)) {
                return encodeUtf8(sources[offset].join(''));
            }
            return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));
        }
    }
    /** @ignore */
    function binaryDataFromJSON(values) {
        // "DATA": ["49BC7D5B6C47D2","3F5FB6D9322026"]
        // There are definitely more efficient ways to do this... but it gets the
        // job done.
        const joined = values.join('');
        const data = new Uint8Array(joined.length / 2);
        for (let i = 0; i < joined.length; i += 2) {
            data[i >> 1] = Number.parseInt(joined.slice(i, i + 2), 16);
        }
        return data;
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class BinaryBuilder extends VariableWidthBuilder {
        constructor(opts) {
            super(opts);
            this._values = new BufferBuilder(new Uint8Array(0));
        }
        get byteLength() {
            let size = this._pendingLength + (this.length * 4);
            this._offsets && (size += this._offsets.byteLength);
            this._values && (size += this._values.byteLength);
            this._nulls && (size += this._nulls.byteLength);
            return size;
        }
        setValue(index, value) {
            return super.setValue(index, toUint8Array(value));
        }
        _flushPending(pending, pendingLength) {
            const offsets = this._offsets;
            const data = this._values.reserve(pendingLength).buffer;
            let offset = 0;
            for (const [index, value] of pending) {
                if (value === undefined) {
                    offsets.set(index, 0);
                }
                else {
                    const length = value.length;
                    data.set(value, offset);
                    offsets.set(index, length);
                    offset += length;
                }
            }
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class BoolBuilder extends Builder {
        constructor(options) {
            super(options);
            this._values = new BitmapBufferBuilder();
        }
        setValue(index, value) {
            this._values.set(index, +value);
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class DateBuilder extends FixedWidthBuilder {
    }
    DateBuilder.prototype._setValue = setDate;
    /** @ignore */
    class DateDayBuilder extends DateBuilder {
    }
    DateDayBuilder.prototype._setValue = setDateDay;
    /** @ignore */
    class DateMillisecondBuilder extends DateBuilder {
    }
    DateMillisecondBuilder.prototype._setValue = setDateMillisecond;

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class DecimalBuilder extends FixedWidthBuilder {
    }
    DecimalBuilder.prototype._setValue = setDecimal;

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class DictionaryBuilder extends Builder {
        constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }) {
            super({ type: new Dictionary$1(type.dictionary, type.indices, type.id, type.isOrdered) });
            this._nulls = null;
            this._dictionaryOffset = 0;
            this._keysToIndices = Object.create(null);
            this.indices = makeBuilder({ 'type': this.type.indices, 'nullValues': nulls });
            this.dictionary = makeBuilder({ 'type': this.type.dictionary, 'nullValues': null });
            if (typeof hashFn === 'function') {
                this.valueToKey = hashFn;
            }
        }
        get values() { return this.indices.values; }
        get nullCount() { return this.indices.nullCount; }
        get nullBitmap() { return this.indices.nullBitmap; }
        get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }
        get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }
        get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }
        isValid(value) { return this.indices.isValid(value); }
        setValid(index, valid) {
            const indices = this.indices;
            valid = indices.setValid(index, valid);
            this.length = indices.length;
            return valid;
        }
        setValue(index, value) {
            const keysToIndices = this._keysToIndices;
            const key = this.valueToKey(value);
            let idx = keysToIndices[key];
            if (idx === undefined) {
                keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;
            }
            return this.indices.setValue(index, idx);
        }
        flush() {
            const type = this.type;
            const prev = this._dictionary;
            const curr = this.dictionary.toVector();
            const data = this.indices.flush().clone(type);
            data.dictionary = prev ? prev.concat(curr) : curr;
            this.finished || (this._dictionaryOffset += curr.length);
            this._dictionary = data.dictionary;
            this.clear();
            return data;
        }
        finish() {
            this.indices.finish();
            this.dictionary.finish();
            this._dictionaryOffset = 0;
            this._keysToIndices = Object.create(null);
            return super.finish();
        }
        clear() {
            this.indices.clear();
            this.dictionary.clear();
            return super.clear();
        }
        valueToKey(val) {
            return typeof val === 'string' ? val : `${val}`;
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class FixedSizeBinaryBuilder extends FixedWidthBuilder {
    }
    FixedSizeBinaryBuilder.prototype._setValue = setFixedSizeBinary;

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class FixedSizeListBuilder extends Builder {
        setValue(index, value) {
            const [child] = this.children;
            const start = index * this.stride;
            for (let i = -1, n = value.length; ++i < n;) {
                child.set(start + i, value[i]);
            }
        }
        addChild(child, name = '0') {
            if (this.numChildren > 0) {
                throw new Error('FixedSizeListBuilder can only have one child.');
            }
            const childIndex = this.children.push(child);
            this.type = new FixedSizeList(this.type.listSize, new Field$1(name, child.type, true));
            return childIndex;
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class FloatBuilder extends FixedWidthBuilder {
        setValue(index, value) {
            this._values.set(index, value);
        }
    }
    /** @ignore */
    class Float16Builder extends FloatBuilder {
        setValue(index, value) {
            // convert JS float64 to a uint16
            super.setValue(index, float64ToUint16(value));
        }
    }
    /** @ignore */
    class Float32Builder extends FloatBuilder {
    }
    /** @ignore */
    class Float64Builder extends FloatBuilder {
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class IntervalBuilder extends FixedWidthBuilder {
    }
    IntervalBuilder.prototype._setValue = setIntervalValue;
    /** @ignore */
    class IntervalDayTimeBuilder extends IntervalBuilder {
    }
    IntervalDayTimeBuilder.prototype._setValue = setIntervalDayTime;
    /** @ignore */
    class IntervalYearMonthBuilder extends IntervalBuilder {
    }
    IntervalYearMonthBuilder.prototype._setValue = setIntervalYearMonth;

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class IntBuilder extends FixedWidthBuilder {
        setValue(index, value) {
            this._values.set(index, value);
        }
    }
    /** @ignore */
    class Int8Builder extends IntBuilder {
    }
    /** @ignore */
    class Int16Builder extends IntBuilder {
    }
    /** @ignore */
    class Int32Builder extends IntBuilder {
    }
    /** @ignore */
    class Int64Builder extends IntBuilder {
    }
    /** @ignore */
    class Uint8Builder extends IntBuilder {
    }
    /** @ignore */
    class Uint16Builder extends IntBuilder {
    }
    /** @ignore */
    class Uint32Builder extends IntBuilder {
    }
    /** @ignore */
    class Uint64Builder extends IntBuilder {
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class ListBuilder extends VariableWidthBuilder {
        constructor(opts) {
            super(opts);
            this._offsets = new OffsetsBufferBuilder();
        }
        addChild(child, name = '0') {
            if (this.numChildren > 0) {
                throw new Error('ListBuilder can only have one child.');
            }
            this.children[this.numChildren] = child;
            this.type = new List(new Field$1(name, child.type, true));
            return this.numChildren - 1;
        }
        _flushPending(pending) {
            const offsets = this._offsets;
            const [child] = this.children;
            for (const [index, value] of pending) {
                if (value === undefined) {
                    offsets.set(index, 0);
                }
                else {
                    const n = value.length;
                    const start = offsets.set(index, n).buffer[index];
                    for (let i = -1; ++i < n;) {
                        child.set(start + i, value[i]);
                    }
                }
            }
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class MapBuilder extends VariableWidthBuilder {
        set(index, value) {
            return super.set(index, value);
        }
        setValue(index, value) {
            const row = (value instanceof Map ? value : new Map(Object.entries(value)));
            const pending = this._pending || (this._pending = new Map());
            const current = pending.get(index);
            current && (this._pendingLength -= current.size);
            this._pendingLength += row.size;
            pending.set(index, row);
        }
        addChild(child, name = `${this.numChildren}`) {
            if (this.numChildren > 0) {
                throw new Error('ListBuilder can only have one child.');
            }
            this.children[this.numChildren] = child;
            this.type = new Map_(new Field$1(name, child.type, true), this.type.keysSorted);
            return this.numChildren - 1;
        }
        _flushPending(pending) {
            const offsets = this._offsets;
            const [child] = this.children;
            for (const [index, value] of pending) {
                if (value === undefined) {
                    offsets.set(index, 0);
                }
                else {
                    let { [index]: idx, [index + 1]: end } = offsets.set(index, value.size).buffer;
                    for (const val of value.entries()) {
                        child.set(idx, val);
                        if (++idx >= end)
                            break;
                    }
                }
            }
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class NullBuilder extends Builder {
        // @ts-ignore
        setValue(index, value) { }
        setValid(index, valid) {
            this.length = Math.max(index + 1, this.length);
            return valid;
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class StructBuilder extends Builder {
        setValue(index, value) {
            const { children, type } = this;
            switch (Array.isArray(value) || value.constructor) {
                case true: return type.children.forEach((_, i) => children[i].set(index, value[i]));
                case Map: return type.children.forEach((f, i) => children[i].set(index, value.get(f.name)));
                default: return type.children.forEach((f, i) => children[i].set(index, value[f.name]));
            }
        }
        /** @inheritdoc */
        setValid(index, valid) {
            if (!super.setValid(index, valid)) {
                this.children.forEach((child) => child.setValid(index, valid));
            }
            return valid;
        }
        addChild(child, name = `${this.numChildren}`) {
            const childIndex = this.children.push(child);
            this.type = new Struct([...this.type.children, new Field$1(name, child.type, true)]);
            return childIndex;
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class TimestampBuilder extends FixedWidthBuilder {
    }
    TimestampBuilder.prototype._setValue = setTimestamp;
    /** @ignore */
    class TimestampSecondBuilder extends TimestampBuilder {
    }
    TimestampSecondBuilder.prototype._setValue = setTimestampSecond;
    /** @ignore */
    class TimestampMillisecondBuilder extends TimestampBuilder {
    }
    TimestampMillisecondBuilder.prototype._setValue = setTimestampMillisecond;
    /** @ignore */
    class TimestampMicrosecondBuilder extends TimestampBuilder {
    }
    TimestampMicrosecondBuilder.prototype._setValue = setTimestampMicrosecond;
    /** @ignore */
    class TimestampNanosecondBuilder extends TimestampBuilder {
    }
    TimestampNanosecondBuilder.prototype._setValue = setTimestampNanosecond;

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class TimeBuilder extends FixedWidthBuilder {
    }
    TimeBuilder.prototype._setValue = setTime;
    /** @ignore */
    class TimeSecondBuilder extends TimeBuilder {
    }
    TimeSecondBuilder.prototype._setValue = setTimeSecond;
    /** @ignore */
    class TimeMillisecondBuilder extends TimeBuilder {
    }
    TimeMillisecondBuilder.prototype._setValue = setTimeMillisecond;
    /** @ignore */
    class TimeMicrosecondBuilder extends TimeBuilder {
    }
    TimeMicrosecondBuilder.prototype._setValue = setTimeMicrosecond;
    /** @ignore */
    class TimeNanosecondBuilder extends TimeBuilder {
    }
    TimeNanosecondBuilder.prototype._setValue = setTimeNanosecond;

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class UnionBuilder extends Builder {
        constructor(options) {
            super(options);
            this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);
            if (typeof options['valueToChildTypeId'] === 'function') {
                this._valueToChildTypeId = options['valueToChildTypeId'];
            }
        }
        get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }
        append(value, childTypeId) {
            return this.set(this.length, value, childTypeId);
        }
        set(index, value, childTypeId) {
            if (childTypeId === undefined) {
                childTypeId = this._valueToChildTypeId(this, value, index);
            }
            if (this.setValid(index, this.isValid(value))) {
                this.setValue(index, value, childTypeId);
            }
            return this;
        }
        setValue(index, value, childTypeId) {
            this._typeIds.set(index, childTypeId);
            const childIndex = this.type.typeIdToChildIndex[childTypeId];
            const child = this.children[childIndex];
            child === null || child === void 0 ? void 0 : child.set(index, value);
        }
        addChild(child, name = `${this.children.length}`) {
            const childTypeId = this.children.push(child);
            const { type: { children, mode, typeIds } } = this;
            const fields = [...children, new Field$1(name, child.type)];
            this.type = new Union_(mode, [...typeIds, childTypeId], fields);
            return childTypeId;
        }
        /** @ignore */
        // @ts-ignore
        _valueToChildTypeId(builder, value, offset) {
            throw new Error(`Cannot map UnionBuilder value to child typeId. \
Pass the \`childTypeId\` as the second argument to unionBuilder.append(), \
or supply a \`valueToChildTypeId\` function as part of the UnionBuilder constructor options.`);
        }
    }
    /** @ignore */
    class SparseUnionBuilder extends UnionBuilder {
    }
    /** @ignore */
    class DenseUnionBuilder extends UnionBuilder {
        constructor(options) {
            super(options);
            this._offsets = new DataBufferBuilder(new Int32Array(0));
        }
        /** @ignore */
        setValue(index, value, childTypeId) {
            const id = this._typeIds.set(index, childTypeId).buffer[index];
            const child = this.getChildAt(this.type.typeIdToChildIndex[id]);
            const denseIndex = this._offsets.set(index, child.length).buffer[index];
            child === null || child === void 0 ? void 0 : child.set(denseIndex, value);
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class Utf8Builder extends VariableWidthBuilder {
        constructor(opts) {
            super(opts);
            this._values = new BufferBuilder(new Uint8Array(0));
        }
        get byteLength() {
            let size = this._pendingLength + (this.length * 4);
            this._offsets && (size += this._offsets.byteLength);
            this._values && (size += this._values.byteLength);
            this._nulls && (size += this._nulls.byteLength);
            return size;
        }
        setValue(index, value) {
            return super.setValue(index, encodeUtf8(value));
        }
        // @ts-ignore
        _flushPending(pending, pendingLength) { }
    }
    Utf8Builder.prototype._flushPending = BinaryBuilder.prototype._flushPending;

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class GetBuilderCtor extends Visitor {
        visitNull() { return NullBuilder; }
        visitBool() { return BoolBuilder; }
        visitInt() { return IntBuilder; }
        visitInt8() { return Int8Builder; }
        visitInt16() { return Int16Builder; }
        visitInt32() { return Int32Builder; }
        visitInt64() { return Int64Builder; }
        visitUint8() { return Uint8Builder; }
        visitUint16() { return Uint16Builder; }
        visitUint32() { return Uint32Builder; }
        visitUint64() { return Uint64Builder; }
        visitFloat() { return FloatBuilder; }
        visitFloat16() { return Float16Builder; }
        visitFloat32() { return Float32Builder; }
        visitFloat64() { return Float64Builder; }
        visitUtf8() { return Utf8Builder; }
        visitBinary() { return BinaryBuilder; }
        visitFixedSizeBinary() { return FixedSizeBinaryBuilder; }
        visitDate() { return DateBuilder; }
        visitDateDay() { return DateDayBuilder; }
        visitDateMillisecond() { return DateMillisecondBuilder; }
        visitTimestamp() { return TimestampBuilder; }
        visitTimestampSecond() { return TimestampSecondBuilder; }
        visitTimestampMillisecond() { return TimestampMillisecondBuilder; }
        visitTimestampMicrosecond() { return TimestampMicrosecondBuilder; }
        visitTimestampNanosecond() { return TimestampNanosecondBuilder; }
        visitTime() { return TimeBuilder; }
        visitTimeSecond() { return TimeSecondBuilder; }
        visitTimeMillisecond() { return TimeMillisecondBuilder; }
        visitTimeMicrosecond() { return TimeMicrosecondBuilder; }
        visitTimeNanosecond() { return TimeNanosecondBuilder; }
        visitDecimal() { return DecimalBuilder; }
        visitList() { return ListBuilder; }
        visitStruct() { return StructBuilder; }
        visitUnion() { return UnionBuilder; }
        visitDenseUnion() { return DenseUnionBuilder; }
        visitSparseUnion() { return SparseUnionBuilder; }
        visitDictionary() { return DictionaryBuilder; }
        visitInterval() { return IntervalBuilder; }
        visitIntervalDayTime() { return IntervalDayTimeBuilder; }
        visitIntervalYearMonth() { return IntervalYearMonthBuilder; }
        visitFixedSizeList() { return FixedSizeListBuilder; }
        visitMap() { return MapBuilder; }
    }
    /** @ignore */
    const instance$8 = new GetBuilderCtor();

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class TypeComparator extends Visitor {
        compareSchemas(schema, other) {
            return (schema === other) || (other instanceof schema.constructor &&
                this.compareManyFields(schema.fields, other.fields));
        }
        compareManyFields(fields, others) {
            return (fields === others) || (Array.isArray(fields) &&
                Array.isArray(others) &&
                fields.length === others.length &&
                fields.every((f, i) => this.compareFields(f, others[i])));
        }
        compareFields(field, other) {
            return (field === other) || (other instanceof field.constructor &&
                field.name === other.name &&
                field.nullable === other.nullable &&
                this.visit(field.type, other.type));
        }
    }
    function compareConstructor(type, other) {
        return other instanceof type.constructor;
    }
    function compareAny(type, other) {
        return (type === other) || compareConstructor(type, other);
    }
    function compareInt(type, other) {
        return (type === other) || (compareConstructor(type, other) &&
            type.bitWidth === other.bitWidth &&
            type.isSigned === other.isSigned);
    }
    function compareFloat(type, other) {
        return (type === other) || (compareConstructor(type, other) &&
            type.precision === other.precision);
    }
    function compareFixedSizeBinary(type, other) {
        return (type === other) || (compareConstructor(type, other) &&
            type.byteWidth === other.byteWidth);
    }
    function compareDate(type, other) {
        return (type === other) || (compareConstructor(type, other) &&
            type.unit === other.unit);
    }
    function compareTimestamp(type, other) {
        return (type === other) || (compareConstructor(type, other) &&
            type.unit === other.unit &&
            type.timezone === other.timezone);
    }
    function compareTime(type, other) {
        return (type === other) || (compareConstructor(type, other) &&
            type.unit === other.unit &&
            type.bitWidth === other.bitWidth);
    }
    function compareList(type, other) {
        return (type === other) || (compareConstructor(type, other) &&
            type.children.length === other.children.length &&
            instance$9.compareManyFields(type.children, other.children));
    }
    function compareStruct(type, other) {
        return (type === other) || (compareConstructor(type, other) &&
            type.children.length === other.children.length &&
            instance$9.compareManyFields(type.children, other.children));
    }
    function compareUnion(type, other) {
        return (type === other) || (compareConstructor(type, other) &&
            type.mode === other.mode &&
            type.typeIds.every((x, i) => x === other.typeIds[i]) &&
            instance$9.compareManyFields(type.children, other.children));
    }
    function compareDictionary(type, other) {
        return (type === other) || (compareConstructor(type, other) &&
            type.id === other.id &&
            type.isOrdered === other.isOrdered &&
            instance$9.visit(type.indices, other.indices) &&
            instance$9.visit(type.dictionary, other.dictionary));
    }
    function compareInterval(type, other) {
        return (type === other) || (compareConstructor(type, other) &&
            type.unit === other.unit);
    }
    function compareFixedSizeList(type, other) {
        return (type === other) || (compareConstructor(type, other) &&
            type.listSize === other.listSize &&
            type.children.length === other.children.length &&
            instance$9.compareManyFields(type.children, other.children));
    }
    function compareMap(type, other) {
        return (type === other) || (compareConstructor(type, other) &&
            type.keysSorted === other.keysSorted &&
            type.children.length === other.children.length &&
            instance$9.compareManyFields(type.children, other.children));
    }
    TypeComparator.prototype.visitNull = compareAny;
    TypeComparator.prototype.visitBool = compareAny;
    TypeComparator.prototype.visitInt = compareInt;
    TypeComparator.prototype.visitInt8 = compareInt;
    TypeComparator.prototype.visitInt16 = compareInt;
    TypeComparator.prototype.visitInt32 = compareInt;
    TypeComparator.prototype.visitInt64 = compareInt;
    TypeComparator.prototype.visitUint8 = compareInt;
    TypeComparator.prototype.visitUint16 = compareInt;
    TypeComparator.prototype.visitUint32 = compareInt;
    TypeComparator.prototype.visitUint64 = compareInt;
    TypeComparator.prototype.visitFloat = compareFloat;
    TypeComparator.prototype.visitFloat16 = compareFloat;
    TypeComparator.prototype.visitFloat32 = compareFloat;
    TypeComparator.prototype.visitFloat64 = compareFloat;
    TypeComparator.prototype.visitUtf8 = compareAny;
    TypeComparator.prototype.visitBinary = compareAny;
    TypeComparator.prototype.visitFixedSizeBinary = compareFixedSizeBinary;
    TypeComparator.prototype.visitDate = compareDate;
    TypeComparator.prototype.visitDateDay = compareDate;
    TypeComparator.prototype.visitDateMillisecond = compareDate;
    TypeComparator.prototype.visitTimestamp = compareTimestamp;
    TypeComparator.prototype.visitTimestampSecond = compareTimestamp;
    TypeComparator.prototype.visitTimestampMillisecond = compareTimestamp;
    TypeComparator.prototype.visitTimestampMicrosecond = compareTimestamp;
    TypeComparator.prototype.visitTimestampNanosecond = compareTimestamp;
    TypeComparator.prototype.visitTime = compareTime;
    TypeComparator.prototype.visitTimeSecond = compareTime;
    TypeComparator.prototype.visitTimeMillisecond = compareTime;
    TypeComparator.prototype.visitTimeMicrosecond = compareTime;
    TypeComparator.prototype.visitTimeNanosecond = compareTime;
    TypeComparator.prototype.visitDecimal = compareAny;
    TypeComparator.prototype.visitList = compareList;
    TypeComparator.prototype.visitStruct = compareStruct;
    TypeComparator.prototype.visitUnion = compareUnion;
    TypeComparator.prototype.visitDenseUnion = compareUnion;
    TypeComparator.prototype.visitSparseUnion = compareUnion;
    TypeComparator.prototype.visitDictionary = compareDictionary;
    TypeComparator.prototype.visitInterval = compareInterval;
    TypeComparator.prototype.visitIntervalDayTime = compareInterval;
    TypeComparator.prototype.visitIntervalYearMonth = compareInterval;
    TypeComparator.prototype.visitFixedSizeList = compareFixedSizeList;
    TypeComparator.prototype.visitMap = compareMap;
    /** @ignore */
    const instance$9 = new TypeComparator();
    function compareSchemas(schema, other) {
        return instance$9.compareSchemas(schema, other);
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    function makeBuilder(options) {
        const type = options.type;
        const builder = new (instance$8.getVisitFn(type)())(options);
        if (type.children && type.children.length > 0) {
            const children = options['children'] || [];
            const defaultOptions = { 'nullValues': options['nullValues'] };
            const getChildOptions = Array.isArray(children)
                ? ((_, i) => children[i] || defaultOptions)
                : (({ name }) => children[name] || defaultOptions);
            for (const [index, field] of type.children.entries()) {
                const { type } = field;
                const opts = getChildOptions(field, index);
                builder.children.push(makeBuilder(Object.assign(Object.assign({}, opts), { type })));
            }
        }
        return builder;
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    function distributeVectorsIntoRecordBatches(schema, vecs) {
        return uniformlyDistributeChunksAcrossRecordBatches(schema, vecs.map((v) => v.data.concat()));
    }
    /** @ignore */
    function uniformlyDistributeChunksAcrossRecordBatches(schema, cols) {
        const fields = [...schema.fields];
        const batches = [];
        const memo = { numBatches: cols.reduce((n, c) => Math.max(n, c.length), 0) };
        let numBatches = 0, batchLength = 0;
        let i = -1;
        const numColumns = cols.length;
        let child, children = [];
        while (memo.numBatches-- > 0) {
            for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {
                children[i] = child = cols[i].shift();
                batchLength = Math.min(batchLength, child ? child.length : batchLength);
            }
            if (Number.isFinite(batchLength)) {
                children = distributeChildren(fields, batchLength, children, cols, memo);
                if (batchLength > 0) {
                    batches[numBatches++] = makeData({
                        type: new Struct(fields),
                        length: batchLength,
                        nullCount: 0,
                        children: children.slice()
                    });
                }
            }
        }
        return [
            schema = schema.assign(fields),
            batches.map((data) => new RecordBatch(schema, data))
        ];
    }
    /** @ignore */
    function distributeChildren(fields, batchLength, children, columns, memo) {
        var _a;
        const nullBitmapSize = ((batchLength + 63) & ~63) >> 3;
        for (let i = -1, n = columns.length; ++i < n;) {
            const child = children[i];
            const length = child === null || child === void 0 ? void 0 : child.length;
            if (length >= batchLength) {
                if (length === batchLength) {
                    children[i] = child;
                }
                else {
                    children[i] = child.slice(0, batchLength);
                    memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(child.slice(batchLength, length - batchLength)));
                }
            }
            else {
                const field = fields[i];
                fields[i] = field.clone({ nullable: true });
                children[i] = (_a = child === null || child === void 0 ? void 0 : child._changeLengthAndBackfillNullBitmap(batchLength)) !== null && _a !== void 0 ? _a : makeData({
                    type: field.type,
                    length: batchLength,
                    nullCount: batchLength,
                    nullBitmap: new Uint8Array(nullBitmapSize)
                });
            }
        }
        return children;
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    // or more contributor license agreements.  See the NOTICE file
    // distributed with this work for additional information
    // regarding copyright ownership.  The ASF licenses this file
    // to you under the Apache License, Version 2.0 (the
    // "License"); you may not use this file except in compliance
    // with the License.  You may obtain a copy of the License at
    //
    //   http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing,
    // software distributed under the License is distributed on an
    // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    // KIND, either express or implied.  See the License for the
    // specific language governing permissions and limitations
    // under the License.
    var _a$2;
    /**
     * Tables are collections of {@link Vector}s and have a {@link Schema}. Use the convenience methods {@link makeTable}
     * or {@link tableFromArrays} to create a table in JavaScript. To create a table from the IPC format, use
     * {@link tableFromIPC}.
     */
    class Table$1 {
        constructor(...args) {
            var _b, _c;
            if (args.length === 0) {
                this.batches = [];
                this.schema = new Schema$1([]);
                this._offsets = [0];
                return this;
            }
            let schema;
            let offsets;
            if (args[0] instanceof Schema$1) {
                schema = args.shift();
            }
            if (args[args.length - 1] instanceof Uint32Array) {
                offsets = args.pop();
            }
            const unwrap = (x) => {
                if (x) {
                    if (x instanceof RecordBatch) {
                        return [x];
                    }
                    else if (x instanceof Table$1) {
                        return x.batches;
                    }
                    else if (x instanceof Data) {
                        if (x.type instanceof Struct) {
                            return [new RecordBatch(new Schema$1(x.type.children), x)];
                        }
                    }
                    else if (Array.isArray(x)) {
                        return x.flatMap(v => unwrap(v));
                    }
                    else if (typeof x[Symbol.iterator] === 'function') {
                        return [...x].flatMap(v => unwrap(v));
                    }
                    else if (typeof x === 'object') {
                        const keys = Object.keys(x);
                        const vecs = keys.map((k) => new Vector([x[k]]));
                        const schema = new Schema$1(keys.map((k, i) => new Field$1(String(k), vecs[i].type)));
                        const [, batches] = distributeVectorsIntoRecordBatches(schema, vecs);
                        return batches.length === 0 ? [new RecordBatch(x)] : batches;
                    }
                }
                return [];
            };
            const batches = args.flatMap(v => unwrap(v));
            schema = (_c = schema !== null && schema !== void 0 ? schema : (_b = batches[0]) === null || _b === void 0 ? void 0 : _b.schema) !== null && _c !== void 0 ? _c : new Schema$1([]);
            if (!(schema instanceof Schema$1)) {
                throw new TypeError('Table constructor expects a [Schema, RecordBatch[]] pair.');
            }
            for (const batch of batches) {
                if (!(batch instanceof RecordBatch)) {
                    throw new TypeError('Table constructor expects a [Schema, RecordBatch[]] pair.');
                }
                if (!compareSchemas(schema, batch.schema)) {
                    throw new TypeError('Table and inner RecordBatch schemas must be equivalent.');
                }
            }
            this.schema = schema;
            this.batches = batches;
            this._offsets = offsets !== null && offsets !== void 0 ? offsets : computeChunkOffsets(this.data);
        }
        /**
         * The contiguous {@link RecordBatch `RecordBatch`} chunks of the Table rows.
         */
        get data() { return this.batches.map(({ data }) => data); }
        /**
         * The number of columns in this Table.
         */
        get numCols() { return this.schema.fields.length; }
        /**
         * The number of rows in this Table.
         */
        get numRows() {
            return this.data.reduce((numRows, data) => numRows + data.length, 0);
        }
        /**
         * The number of null rows in this Table.
         */
        get nullCount() {
            if (this._nullCount === -1) {
                this._nullCount = computeChunkNullCounts(this.data);
            }
            return this._nullCount;
        }
        /**
         * Check whether an element is null.
         *
         * @param index The index at which to read the validity bitmap.
         */
        // @ts-ignore
        isValid(index) { return false; }
        /**
         * Get an element value by position.
         *
         * @param index The index of the element to read.
         */
        // @ts-ignore
        get(index) { return null; }
        /**
         * Set an element value by position.
         *
         * @param index The index of the element to write.
         * @param value The value to set.
         */
        // @ts-ignore
        set(index, value) { return; }
        /**
         * Retrieve the index of the first occurrence of a value in an Vector.
         *
         * @param element The value to locate in the Vector.
         * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.
         */
        // @ts-ignore
        indexOf(element, offset) { return -1; }
        /**
         * Get the size in bytes of an element by index.
         * @param index The index at which to get the byteLength.
         */
        // @ts-ignore
        getByteLength(index) { return 0; }
        /**
         * Iterator for rows in this Table.
         */
        [Symbol.iterator]() {
            if (this.batches.length > 0) {
                return instance$6.visit(new Vector(this.data));
            }
            return (new Array(0))[Symbol.iterator]();
        }
        /**
         * Return a JavaScript Array of the Table rows.
         *
         * @returns An Array of Table rows.
         */
        toArray() {
            return [...this];
        }
        /**
         * Returns a string representation of the Table rows.
         *
         * @returns A string representation of the Table rows.
         */
        toString() {
            return `[\n  ${this.toArray().join(',\n  ')}\n]`;
        }
        /**
         * Combines two or more Tables of the same schema.
         *
         * @param others Additional Tables to add to the end of this Tables.
         */
        concat(...others) {
            const schema = this.schema;
            const data = this.data.concat(others.flatMap(({ data }) => data));
            return new Table$1(schema, data.map((data) => new RecordBatch(schema, data)));
        }
        /**
         * Return a zero-copy sub-section of this Table.
         *
         * @param begin The beginning of the specified portion of the Table.
         * @param end The end of the specified portion of the Table. This is exclusive of the element at the index 'end'.
         */
        slice(begin, end) {
            const schema = this.schema;
            [begin, end] = clampRange({ length: this.numRows }, begin, end);
            const data = sliceChunks(this.data, this._offsets, begin, end);
            return new Table$1(schema, data.map((chunk) => new RecordBatch(schema, chunk)));
        }
        /**
         * Returns a child Vector by name, or null if this Vector has no child with the given name.
         *
         * @param name The name of the child to retrieve.
         */
        getChild(name) {
            return this.getChildAt(this.schema.fields.findIndex((f) => f.name === name));
        }
        /**
         * Returns a child Vector by index, or null if this Vector has no child at the supplied index.
         *
         * @param index The index of the child to retrieve.
         */
        getChildAt(index) {
            if (index > -1 && index < this.schema.fields.length) {
                const data = this.data.map((data) => data.children[index]);
                if (data.length === 0) {
                    const { type } = this.schema.fields[index];
                    const empty = makeData({ type, length: 0, nullCount: 0 });
                    data.push(empty._changeLengthAndBackfillNullBitmap(this.numRows));
                }
                return new Vector(data);
            }
            return null;
        }
        /**
         * Sets a child Vector by name.
         *
         * @param name The name of the child to overwrite.
         * @returns A new Table with the supplied child for the specified name.
         */
        setChild(name, child) {
            var _b;
            return this.setChildAt((_b = this.schema.fields) === null || _b === void 0 ? void 0 : _b.findIndex((f) => f.name === name), child);
        }
        setChildAt(index, child) {
            let schema = this.schema;
            let batches = [...this.batches];
            if (index > -1 && index < this.numCols) {
                if (!child) {
                    child = new Vector([makeData({ type: new Null, length: this.numRows })]);
                }
                const fields = schema.fields.slice();
                const field = fields[index].clone({ type: child.type });
                const children = this.schema.fields.map((_, i) => this.getChildAt(i));
                [fields[index], children[index]] = [field, child];
                [schema, batches] = distributeVectorsIntoRecordBatches(schema, children);
            }
            return new Table$1(schema, batches);
        }
        /**
         * Construct a new Table containing only specified columns.
         *
         * @param columnNames Names of columns to keep.
         * @returns A new Table of columns matching the specified names.
         */
        select(columnNames) {
            const nameToIndex = this.schema.fields.reduce((m, f, i) => m.set(f.name, i), new Map());
            return this.selectAt(columnNames.map((columnName) => nameToIndex.get(columnName)).filter((x) => x > -1));
        }
        /**
         * Construct a new Table containing only columns at the specified indices.
         *
         * @param columnIndices Indices of columns to keep.
         * @returns A new Table of columns at the specified indices.
         */
        selectAt(columnIndices) {
            const schema = this.schema.selectAt(columnIndices);
            const data = this.batches.map((batch) => batch.selectAt(columnIndices));
            return new Table$1(schema, data);
        }
        assign(other) {
            const fields = this.schema.fields;
            const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {
                const [indices, oldToNew] = memo;
                const i = fields.findIndex((f) => f.name === f2.name);
                ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);
                return memo;
            }, [[], []]);
            const schema = this.schema.assign(other.schema);
            const columns = [
                ...fields.map((_, i) => [i, oldToNew[i]]).map(([i, j]) => (j === undefined ? this.getChildAt(i) : other.getChildAt(j))),
                ...indices.map((i) => other.getChildAt(i))
            ].filter(Boolean);
            return new Table$1(...distributeVectorsIntoRecordBatches(schema, columns));
        }
    }
    _a$2 = Symbol.toStringTag;
    // Initialize this static property via an IIFE so bundlers don't tree-shake
    // out this logic, but also so we're still compliant with `"sideEffects": false`
    Table$1[_a$2] = ((proto) => {
        proto.schema = null;
        proto.batches = [];
        proto._offsets = new Uint32Array([0]);
        proto._nullCount = -1;
        proto[Symbol.isConcatSpreadable] = true;
        proto['isValid'] = wrapChunkedCall1(isChunkedValid);
        proto['get'] = wrapChunkedCall1(instance$4.getVisitFn(Type.Struct));
        proto['set'] = wrapChunkedCall2(instance$3.getVisitFn(Type.Struct));
        proto['indexOf'] = wrapChunkedIndexOf(instance$5.getVisitFn(Type.Struct));
        proto['getByteLength'] = wrapChunkedCall1(instance$7.getVisitFn(Type.Struct));
        return 'Table';
    })(Table$1.prototype);

    // Licensed to the Apache Software Foundation (ASF) under one
    // or more contributor license agreements.  See the NOTICE file
    // distributed with this work for additional information
    // regarding copyright ownership.  The ASF licenses this file
    // to you under the Apache License, Version 2.0 (the
    // "License"); you may not use this file except in compliance
    // with the License.  You may obtain a copy of the License at
    //
    //   http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing,
    // software distributed under the License is distributed on an
    // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    // KIND, either express or implied.  See the License for the
    // specific language governing permissions and limitations
    // under the License.
    var _a$3;
    /** @ignore */
    class RecordBatch {
        constructor(...args) {
            switch (args.length) {
                case 2: {
                    [this.schema] = args;
                    if (!(this.schema instanceof Schema$1)) {
                        throw new TypeError('RecordBatch constructor expects a [Schema, Data] pair.');
                    }
                    [,
                        this.data = makeData({
                            nullCount: 0,
                            type: new Struct(this.schema.fields),
                            children: this.schema.fields.map((f) => makeData({ type: f.type, nullCount: 0 }))
                        })
                    ] = args;
                    if (!(this.data instanceof Data)) {
                        throw new TypeError('RecordBatch constructor expects a [Schema, Data] pair.');
                    }
                    [this.schema, this.data] = ensureSameLengthData(this.schema, this.data.children);
                    break;
                }
                case 1: {
                    const [obj] = args;
                    const { fields, children, length } = Object.keys(obj).reduce((memo, name, i) => {
                        memo.children[i] = obj[name];
                        memo.length = Math.max(memo.length, obj[name].length);
                        memo.fields[i] = Field$1.new({ name, type: obj[name].type, nullable: true });
                        return memo;
                    }, {
                        length: 0,
                        fields: new Array(),
                        children: new Array(),
                    });
                    const schema = new Schema$1(fields);
                    const data = makeData({ type: new Struct(fields), length, children, nullCount: 0 });
                    [this.schema, this.data] = ensureSameLengthData(schema, data.children, length);
                    break;
                }
                default: throw new TypeError('RecordBatch constructor expects an Object mapping names to child Data, or a [Schema, Data] pair.');
            }
        }
        get dictionaries() {
            return this._dictionaries || (this._dictionaries = collectDictionaries(this.schema.fields, this.data.children));
        }
        /**
         * The number of columns in this RecordBatch.
         */
        get numCols() { return this.schema.fields.length; }
        /**
         * The number of rows in this RecordBatch.
         */
        get numRows() { return this.data.length; }
        /**
         * The number of null rows in this RecordBatch.
         */
        get nullCount() {
            return this.data.nullCount;
        }
        /**
         * Check whether an element is null.
         * @param index The index at which to read the validity bitmap.
         */
        isValid(index) {
            return this.data.getValid(index);
        }
        /**
         * Get a row by position.
         * @param index The index of the element to read.
         */
        get(index) {
            return instance$4.visit(this.data, index);
        }
        /**
         * Set a row by position.
         * @param index The index of the element to write.
         * @param value The value to set.
         */
        set(index, value) {
            return instance$3.visit(this.data, index, value);
        }
        /**
         * Retrieve the index of the first occurrence of a row in an RecordBatch.
         * @param element The row to locate in the RecordBatch.
         * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.
         */
        indexOf(element, offset) {
            return instance$5.visit(this.data, element, offset);
        }
        /**
         * Get the size (in bytes) of a row by index.
         * @param index The row index for which to compute the byteLength.
         */
        getByteLength(index) {
            return instance$7.visit(this.data, index);
        }
        /**
         * Iterator for rows in this RecordBatch.
         */
        [Symbol.iterator]() {
            return instance$6.visit(new Vector([this.data]));
        }
        /**
         * Return a JavaScript Array of the RecordBatch rows.
         * @returns An Array of RecordBatch rows.
         */
        toArray() {
            return [...this];
        }
        /**
         * Combines two or more RecordBatch of the same schema.
         * @param others Additional RecordBatch to add to the end of this RecordBatch.
         */
        concat(...others) {
            return new Table$1(this.schema, [this, ...others]);
        }
        /**
         * Return a zero-copy sub-section of this RecordBatch.
         * @param start The beginning of the specified portion of the RecordBatch.
         * @param end The end of the specified portion of the RecordBatch. This is exclusive of the element at the index 'end'.
         */
        slice(begin, end) {
            const [slice] = new Vector([this.data]).slice(begin, end).data;
            return new RecordBatch(this.schema, slice);
        }
        /**
         * Returns a child Vector by name, or null if this Vector has no child with the given name.
         * @param name The name of the child to retrieve.
         */
        getChild(name) {
            var _b;
            return this.getChildAt((_b = this.schema.fields) === null || _b === void 0 ? void 0 : _b.findIndex((f) => f.name === name));
        }
        /**
         * Returns a child Vector by index, or null if this Vector has no child at the supplied index.
         * @param index The index of the child to retrieve.
         */
        getChildAt(index) {
            if (index > -1 && index < this.schema.fields.length) {
                return new Vector([this.data.children[index]]);
            }
            return null;
        }
        /**
         * Sets a child Vector by name.
         * @param name The name of the child to overwrite.
         * @returns A new RecordBatch with the new child for the specified name.
         */
        setChild(name, child) {
            var _b;
            return this.setChildAt((_b = this.schema.fields) === null || _b === void 0 ? void 0 : _b.findIndex((f) => f.name === name), child);
        }
        setChildAt(index, child) {
            let schema = this.schema;
            let data = this.data;
            if (index > -1 && index < this.numCols) {
                if (!child) {
                    child = new Vector([makeData({ type: new Null, length: this.numRows })]);
                }
                const fields = schema.fields.slice();
                const children = data.children.slice();
                const field = fields[index].clone({ type: child.type });
                [fields[index], children[index]] = [field, child.data[0]];
                schema = new Schema$1(fields, new Map(this.schema.metadata));
                data = makeData({ type: new Struct(fields), children });
            }
            return new RecordBatch(schema, data);
        }
        /**
         * Construct a new RecordBatch containing only specified columns.
         *
         * @param columnNames Names of columns to keep.
         * @returns A new RecordBatch of columns matching the specified names.
         */
        select(columnNames) {
            const schema = this.schema.select(columnNames);
            const type = new Struct(schema.fields);
            const children = [];
            for (const name of columnNames) {
                const index = this.schema.fields.findIndex((f) => f.name === name);
                if (~index) {
                    children[index] = this.data.children[index];
                }
            }
            return new RecordBatch(schema, makeData({ type, length: this.numRows, children }));
        }
        /**
         * Construct a new RecordBatch containing only columns at the specified indices.
         *
         * @param columnIndices Indices of columns to keep.
         * @returns A new RecordBatch of columns matching at the specified indices.
         */
        selectAt(columnIndices) {
            const schema = this.schema.selectAt(columnIndices);
            const children = columnIndices.map((i) => this.data.children[i]).filter(Boolean);
            const subset = makeData({ type: new Struct(schema.fields), length: this.numRows, children });
            return new RecordBatch(schema, subset);
        }
    }
    _a$3 = Symbol.toStringTag;
    // Initialize this static property via an IIFE so bundlers don't tree-shake
    // out this logic, but also so we're still compliant with `"sideEffects": false`
    RecordBatch[_a$3] = ((proto) => {
        proto._nullCount = -1;
        proto[Symbol.isConcatSpreadable] = true;
        return 'RecordBatch';
    })(RecordBatch.prototype);
    /** @ignore */
    function ensureSameLengthData(schema, chunks, maxLength = chunks.reduce((max, col) => Math.max(max, col.length), 0)) {
        var _b;
        const fields = [...schema.fields];
        const children = [...chunks];
        const nullBitmapSize = ((maxLength + 63) & ~63) >> 3;
        for (const [idx, field] of schema.fields.entries()) {
            const chunk = chunks[idx];
            if (!chunk || chunk.length !== maxLength) {
                fields[idx] = field.clone({ nullable: true });
                children[idx] = (_b = chunk === null || chunk === void 0 ? void 0 : chunk._changeLengthAndBackfillNullBitmap(maxLength)) !== null && _b !== void 0 ? _b : makeData({
                    type: field.type,
                    length: maxLength,
                    nullCount: maxLength,
                    nullBitmap: new Uint8Array(nullBitmapSize)
                });
            }
        }
        return [
            schema.assign(fields),
            makeData({ type: new Struct(fields), length: maxLength, children })
        ];
    }
    /** @ignore */
    function collectDictionaries(fields, children, dictionaries = new Map()) {
        for (let i = -1, n = fields.length; ++i < n;) {
            const field = fields[i];
            const type = field.type;
            const data = children[i];
            if (DataType.isDictionary(type)) {
                if (!dictionaries.has(type.id)) {
                    if (data.dictionary) {
                        dictionaries.set(type.id, data.dictionary);
                    }
                }
                else if (dictionaries.get(type.id) !== data.dictionary) {
                    throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);
                }
            }
            if (type.children && type.children.length > 0) {
                collectDictionaries(type.children, data.children, dictionaries);
            }
        }
        return dictionaries;
    }
    /**
     * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`
     * implementations to differentiate between a stream with valid zero-length
     * RecordBatches, and a stream with a Schema message, but no RecordBatches.
     * @see https://github.com/apache/arrow/pull/4373
     * @ignore
     * @private
     */
    class _InternalEmptyPlaceholderRecordBatch extends RecordBatch {
        constructor(schema) {
            const children = schema.fields.map((f) => makeData({ type: f.type }));
            const data = makeData({ type: new Struct(schema.fields), nullCount: 0, children });
            super(schema, data);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * Provided for forward compatibility in case we need to support different
     * strategies for compressing the IPC message body (like whole-body
     * compression rather than buffer-level) in the future
     */
    var BodyCompressionMethod;
    (function (BodyCompressionMethod) {
        /**
         * Each constituent buffer is first compressed with the indicated
         * compressor, and then written with the uncompressed length in the first 8
         * bytes as a 64-bit little-endian signed integer followed by the compressed
         * buffer bytes (and then padding as required by the protocol). The
         * uncompressed length may be set to -1 to indicate that the data that
         * follows is not compressed, which can be useful for cases where
         * compression does not yield appreciable savings.
         */
        BodyCompressionMethod[BodyCompressionMethod["BUFFER"] = 0] = "BUFFER";
    })(BodyCompressionMethod || (BodyCompressionMethod = {}));

    // automatically generated by the FlatBuffers compiler, do not modify
    var CompressionType;
    (function (CompressionType) {
        CompressionType[CompressionType["LZ4_FRAME"] = 0] = "LZ4_FRAME";
        CompressionType[CompressionType["ZSTD"] = 1] = "ZSTD";
    })(CompressionType || (CompressionType = {}));

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * Optional compression for the memory buffers constituting IPC message
     * bodies. Intended for use with RecordBatch but could be used for other
     * message types
     */
    class BodyCompression {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsBodyCompression(bb, obj) {
            return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsBodyCompression(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        /**
         * Compressor library.
         * For LZ4_FRAME, each compressed buffer must consist of a single frame.
         */
        codec() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt8(this.bb_pos + offset) : CompressionType.LZ4_FRAME;
        }
        /**
         * Indicates the way the record batch body was compressed
         */
        method() {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? this.bb.readInt8(this.bb_pos + offset) : BodyCompressionMethod.BUFFER;
        }
        static startBodyCompression(builder) {
            builder.startObject(2);
        }
        static addCodec(builder, codec) {
            builder.addFieldInt8(0, codec, CompressionType.LZ4_FRAME);
        }
        static addMethod(builder, method) {
            builder.addFieldInt8(1, method, BodyCompressionMethod.BUFFER);
        }
        static endBodyCompression(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static createBodyCompression(builder, codec, method) {
            BodyCompression.startBodyCompression(builder);
            BodyCompression.addCodec(builder, codec);
            BodyCompression.addMethod(builder, method);
            return BodyCompression.endBodyCompression(builder);
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * ----------------------------------------------------------------------
     * A Buffer represents a single contiguous memory segment
     */
    class Buffer {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        /**
         * The relative offset into the shared memory page where the bytes for this
         * buffer starts
         */
        offset() {
            return this.bb.readInt64(this.bb_pos);
        }
        /**
         * The absolute length (in bytes) of the memory buffer. The memory is found
         * from offset (inclusive) to offset + length (non-inclusive). When building
         * messages using the encapsulated IPC message, padding bytes may be written
         * after a buffer, but such padding bytes do not need to be accounted for in
         * the size here.
         */
        length() {
            return this.bb.readInt64(this.bb_pos + 8);
        }
        static sizeOf() {
            return 16;
        }
        static createBuffer(builder, offset, length) {
            builder.prep(8, 16);
            builder.writeInt64(length);
            builder.writeInt64(offset);
            return builder.offset();
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * ----------------------------------------------------------------------
     * Data structures for describing a table row batch (a collection of
     * equal-length Arrow arrays)
     * Metadata about a field at some level of a nested type tree (but not
     * its children).
     *
     * For example, a List<Int16> with values `[[1, 2, 3], null, [4], [5, 6], null]`
     * would have {length: 5, null_count: 2} for its List node, and {length: 6,
     * null_count: 0} for its Int16 node, as separate FieldNode structs
     */
    class FieldNode {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        /**
         * The number of value slots in the Arrow array at this level of a nested
         * tree
         */
        length() {
            return this.bb.readInt64(this.bb_pos);
        }
        /**
         * The number of observed nulls. Fields with null_count == 0 may choose not
         * to write their physical validity bitmap out as a materialized buffer,
         * instead setting the length of the bitmap buffer to 0.
         */
        nullCount() {
            return this.bb.readInt64(this.bb_pos + 8);
        }
        static sizeOf() {
            return 16;
        }
        static createFieldNode(builder, length, null_count) {
            builder.prep(8, 16);
            builder.writeInt64(null_count);
            builder.writeInt64(length);
            return builder.offset();
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * A data header describing the shared memory layout of a "record" or "row"
     * batch. Some systems call this a "row batch" internally and others a "record
     * batch".
     */
    class RecordBatch$1 {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsRecordBatch(bb, obj) {
            return (obj || new RecordBatch$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsRecordBatch(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new RecordBatch$1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        /**
         * number of records / rows. The arrays in the batch should all have this
         * length
         */
        length() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
        }
        /**
         * Nodes correspond to the pre-ordered flattened logical schema
         */
        nodes(index, obj) {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? (obj || new FieldNode()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;
        }
        nodesLength() {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        /**
         * Buffers correspond to the pre-ordered flattened buffer tree
         *
         * The number of buffers appended to this list depends on the schema. For
         * example, most primitive arrays will have 2 buffers, 1 for the validity
         * bitmap and 1 for the values. For struct arrays, there will only be a
         * single buffer for the validity (nulls) bitmap
         */
        buffers(index, obj) {
            const offset = this.bb.__offset(this.bb_pos, 8);
            return offset ? (obj || new Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;
        }
        buffersLength() {
            const offset = this.bb.__offset(this.bb_pos, 8);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        /**
         * Optional compression of the message body
         */
        compression(obj) {
            const offset = this.bb.__offset(this.bb_pos, 10);
            return offset ? (obj || new BodyCompression()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
        }
        static startRecordBatch(builder) {
            builder.startObject(4);
        }
        static addLength(builder, length) {
            builder.addFieldInt64(0, length, builder.createLong(0, 0));
        }
        static addNodes(builder, nodesOffset) {
            builder.addFieldOffset(1, nodesOffset, 0);
        }
        static startNodesVector(builder, numElems) {
            builder.startVector(16, numElems, 8);
        }
        static addBuffers(builder, buffersOffset) {
            builder.addFieldOffset(2, buffersOffset, 0);
        }
        static startBuffersVector(builder, numElems) {
            builder.startVector(16, numElems, 8);
        }
        static addCompression(builder, compressionOffset) {
            builder.addFieldOffset(3, compressionOffset, 0);
        }
        static endRecordBatch(builder) {
            const offset = builder.endObject();
            return offset;
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * For sending dictionary encoding information. Any Field can be
     * dictionary-encoded, but in this case none of its children may be
     * dictionary-encoded.
     * There is one vector / column per dictionary, but that vector / column
     * may be spread across multiple dictionary batches by using the isDelta
     * flag
     */
    class DictionaryBatch {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsDictionaryBatch(bb, obj) {
            return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsDictionaryBatch(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        id() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
        }
        data(obj) {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? (obj || new RecordBatch$1()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
        }
        /**
         * If isDelta is true the values in the dictionary are to be appended to a
         * dictionary with the indicated id. If isDelta is false this dictionary
         * should replace the existing dictionary.
         */
        isDelta() {
            const offset = this.bb.__offset(this.bb_pos, 8);
            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
        }
        static startDictionaryBatch(builder) {
            builder.startObject(3);
        }
        static addId(builder, id) {
            builder.addFieldInt64(0, id, builder.createLong(0, 0));
        }
        static addData(builder, dataOffset) {
            builder.addFieldOffset(1, dataOffset, 0);
        }
        static addIsDelta(builder, isDelta) {
            builder.addFieldInt8(2, +isDelta, +false);
        }
        static endDictionaryBatch(builder) {
            const offset = builder.endObject();
            return offset;
        }
    }

    // automatically generated by the FlatBuffers compiler, do not modify
    /**
     * ----------------------------------------------------------------------
     * The root Message type
     * This union enables us to easily send different message types without
     * redundant storage, and in the future we can easily add new message types.
     *
     * Arrow implementations do not need to implement all of the message types,
     * which may include experimental metadata types. For maximum compatibility,
     * it is best to send data using RecordBatch
     */
    var MessageHeader$1;
    (function (MessageHeader) {
        MessageHeader[MessageHeader["NONE"] = 0] = "NONE";
        MessageHeader[MessageHeader["Schema"] = 1] = "Schema";
        MessageHeader[MessageHeader["DictionaryBatch"] = 2] = "DictionaryBatch";
        MessageHeader[MessageHeader["RecordBatch"] = 3] = "RecordBatch";
        MessageHeader[MessageHeader["Tensor"] = 4] = "Tensor";
        MessageHeader[MessageHeader["SparseTensor"] = 5] = "SparseTensor";
    })(MessageHeader$1 || (MessageHeader$1 = {}));

    // automatically generated by the FlatBuffers compiler, do not modify
    class Message {
        constructor() {
            this.bb = null;
            this.bb_pos = 0;
        }
        __init(i, bb) {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        }
        static getRootAsMessage(bb, obj) {
            return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        static getSizePrefixedRootAsMessage(bb, obj) {
            bb.setPosition(bb.position() + SIZE_PREFIX_LENGTH);
            return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
        }
        version() {
            const offset = this.bb.__offset(this.bb_pos, 4);
            return offset ? this.bb.readInt16(this.bb_pos + offset) : MetadataVersion$1.V1;
        }
        headerType() {
            const offset = this.bb.__offset(this.bb_pos, 6);
            return offset ? this.bb.readUint8(this.bb_pos + offset) : MessageHeader$1.NONE;
        }
        // @ts-ignore
        header(obj) {
            const offset = this.bb.__offset(this.bb_pos, 8);
            return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
        }
        bodyLength() {
            const offset = this.bb.__offset(this.bb_pos, 10);
            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
        }
        customMetadata(index, obj) {
            const offset = this.bb.__offset(this.bb_pos, 12);
            return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
        }
        customMetadataLength() {
            const offset = this.bb.__offset(this.bb_pos, 12);
            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
        }
        static startMessage(builder) {
            builder.startObject(5);
        }
        static addVersion(builder, version) {
            builder.addFieldInt16(0, version, MetadataVersion$1.V1);
        }
        static addHeaderType(builder, headerType) {
            builder.addFieldInt8(1, headerType, MessageHeader$1.NONE);
        }
        static addHeader(builder, headerOffset) {
            builder.addFieldOffset(2, headerOffset, 0);
        }
        static addBodyLength(builder, bodyLength) {
            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));
        }
        static addCustomMetadata(builder, customMetadataOffset) {
            builder.addFieldOffset(4, customMetadataOffset, 0);
        }
        static createCustomMetadataVector(builder, data) {
            builder.startVector(4, data.length, 4);
            for (let i = data.length - 1; i >= 0; i--) {
                builder.addOffset(data[i]);
            }
            return builder.endVector();
        }
        static startCustomMetadataVector(builder, numElems) {
            builder.startVector(4, numElems, 4);
        }
        static endMessage(builder) {
            const offset = builder.endObject();
            return offset;
        }
        static finishMessageBuffer(builder, offset) {
            builder.finish(offset);
        }
        static finishSizePrefixedMessageBuffer(builder, offset) {
            builder.finish(offset, undefined, true);
        }
        static createMessage(builder, version, headerType, headerOffset, bodyLength, customMetadataOffset) {
            Message.startMessage(builder);
            Message.addVersion(builder, version);
            Message.addHeaderType(builder, headerType);
            Message.addHeader(builder, headerOffset);
            Message.addBodyLength(builder, bodyLength);
            Message.addCustomMetadata(builder, customMetadataOffset);
            return Message.endMessage(builder);
        }
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    var Long$2 = Long;
    /** @ignore */
    class TypeAssembler extends Visitor {
        visit(node, builder) {
            return (node == null || builder == null) ? undefined : super.visit(node, builder);
        }
        visitNull(_node, b) {
            Null$1.startNull(b);
            return Null$1.endNull(b);
        }
        visitInt(node, b) {
            Int.startInt(b);
            Int.addBitWidth(b, node.bitWidth);
            Int.addIsSigned(b, node.isSigned);
            return Int.endInt(b);
        }
        visitFloat(node, b) {
            FloatingPoint.startFloatingPoint(b);
            FloatingPoint.addPrecision(b, node.precision);
            return FloatingPoint.endFloatingPoint(b);
        }
        visitBinary(_node, b) {
            Binary$1.startBinary(b);
            return Binary$1.endBinary(b);
        }
        visitBool(_node, b) {
            Bool$1.startBool(b);
            return Bool$1.endBool(b);
        }
        visitUtf8(_node, b) {
            Utf8$1.startUtf8(b);
            return Utf8$1.endUtf8(b);
        }
        visitDecimal(node, b) {
            Decimal$1.startDecimal(b);
            Decimal$1.addScale(b, node.scale);
            Decimal$1.addPrecision(b, node.precision);
            Decimal$1.addBitWidth(b, node.bitWidth);
            return Decimal$1.endDecimal(b);
        }
        visitDate(node, b) {
            Date$1.startDate(b);
            Date$1.addUnit(b, node.unit);
            return Date$1.endDate(b);
        }
        visitTime(node, b) {
            Time.startTime(b);
            Time.addUnit(b, node.unit);
            Time.addBitWidth(b, node.bitWidth);
            return Time.endTime(b);
        }
        visitTimestamp(node, b) {
            const timezone = (node.timezone && b.createString(node.timezone)) || undefined;
            Timestamp.startTimestamp(b);
            Timestamp.addUnit(b, node.unit);
            if (timezone !== undefined) {
                Timestamp.addTimezone(b, timezone);
            }
            return Timestamp.endTimestamp(b);
        }
        visitInterval(node, b) {
            Interval.startInterval(b);
            Interval.addUnit(b, node.unit);
            return Interval.endInterval(b);
        }
        visitList(_node, b) {
            List$1.startList(b);
            return List$1.endList(b);
        }
        visitStruct(_node, b) {
            Struct_.startStruct_(b);
            return Struct_.endStruct_(b);
        }
        visitUnion(node, b) {
            Union.startTypeIdsVector(b, node.typeIds.length);
            const typeIds = Union.createTypeIdsVector(b, node.typeIds);
            Union.startUnion(b);
            Union.addMode(b, node.mode);
            Union.addTypeIds(b, typeIds);
            return Union.endUnion(b);
        }
        visitDictionary(node, b) {
            const indexType = this.visit(node.indices, b);
            DictionaryEncoding.startDictionaryEncoding(b);
            DictionaryEncoding.addId(b, new Long$2(node.id, 0));
            DictionaryEncoding.addIsOrdered(b, node.isOrdered);
            if (indexType !== undefined) {
                DictionaryEncoding.addIndexType(b, indexType);
            }
            return DictionaryEncoding.endDictionaryEncoding(b);
        }
        visitFixedSizeBinary(node, b) {
            FixedSizeBinary$1.startFixedSizeBinary(b);
            FixedSizeBinary$1.addByteWidth(b, node.byteWidth);
            return FixedSizeBinary$1.endFixedSizeBinary(b);
        }
        visitFixedSizeList(node, b) {
            FixedSizeList$1.startFixedSizeList(b);
            FixedSizeList$1.addListSize(b, node.listSize);
            return FixedSizeList$1.endFixedSizeList(b);
        }
        visitMap(node, b) {
            Map$1.startMap(b);
            Map$1.addKeysSorted(b, node.keysSorted);
            return Map$1.endMap(b);
        }
    }
    /** @ignore */
    const instance$a = new TypeAssembler();

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    function schemaFromJSON(_schema, dictionaries = new Map()) {
        return new Schema$1(schemaFieldsFromJSON(_schema, dictionaries), customMetadataFromJSON(_schema['customMetadata']), dictionaries);
    }
    /** @ignore */
    function recordBatchFromJSON(b) {
        return new RecordBatch$2(b['count'], fieldNodesFromJSON(b['columns']), buffersFromJSON(b['columns']));
    }
    /** @ignore */
    function dictionaryBatchFromJSON(b) {
        return new DictionaryBatch$1(recordBatchFromJSON(b['data']), b['id'], b['isDelta']);
    }
    /** @ignore */
    function schemaFieldsFromJSON(_schema, dictionaries) {
        return (_schema['fields'] || []).filter(Boolean).map((f) => Field$1.fromJSON(f, dictionaries));
    }
    /** @ignore */
    function fieldChildrenFromJSON(_field, dictionaries) {
        return (_field['children'] || []).filter(Boolean).map((f) => Field$1.fromJSON(f, dictionaries));
    }
    /** @ignore */
    function fieldNodesFromJSON(xs) {
        return (xs || []).reduce((fieldNodes, column) => [
            ...fieldNodes,
            new FieldNode$1(column['count'], nullCountFromJSON(column['VALIDITY'])),
            ...fieldNodesFromJSON(column['children'])
        ], []);
    }
    /** @ignore */
    function buffersFromJSON(xs, buffers = []) {
        for (let i = -1, n = (xs || []).length; ++i < n;) {
            const column = xs[i];
            column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));
            column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));
            column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));
            column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));
            buffers = buffersFromJSON(column['children'], buffers);
        }
        return buffers;
    }
    /** @ignore */
    function nullCountFromJSON(validity) {
        return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);
    }
    /** @ignore */
    function fieldFromJSON(_field, dictionaries) {
        let id;
        let keys;
        let field;
        let dictMeta;
        let type;
        let dictType;
        // If no dictionary encoding
        if (!dictionaries || !(dictMeta = _field['dictionary'])) {
            type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));
            field = new Field$1(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));
        }
        // If dictionary encoded and the first time we've seen this dictionary id, decode
        // the data type and child fields, then wrap in a Dictionary type and insert the
        // data type into the dictionary types map.
        else if (!dictionaries.has(id = dictMeta['id'])) {
            // a dictionary index defaults to signed 32 bit int if unspecified
            keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new Int32();
            dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));
            dictType = new Dictionary$1(type, keys, id, dictMeta['isOrdered']);
            field = new Field$1(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));
        }
        // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the
        // data type and wrap in a new Dictionary type and field.
        else {
            // a dictionary index defaults to signed 32 bit int if unspecified
            keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new Int32();
            dictType = new Dictionary$1(dictionaries.get(id), keys, id, dictMeta['isOrdered']);
            field = new Field$1(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));
        }
        return field || null;
    }
    /** @ignore */
    function customMetadataFromJSON(_metadata) {
        return new Map(Object.entries(_metadata || {}));
    }
    /** @ignore */
    function indexTypeFromJSON(_type) {
        return new Int_(_type['isSigned'], _type['bitWidth']);
    }
    /** @ignore */
    function typeFromJSON(f, children) {
        const typeId = f['type']['name'];
        switch (typeId) {
            case 'NONE': return new Null();
            case 'null': return new Null();
            case 'binary': return new Binary();
            case 'utf8': return new Utf8();
            case 'bool': return new Bool();
            case 'list': return new List((children || [])[0]);
            case 'struct': return new Struct(children || []);
            case 'struct_': return new Struct(children || []);
        }
        switch (typeId) {
            case 'int': {
                const t = f['type'];
                return new Int_(t['isSigned'], t['bitWidth']);
            }
            case 'floatingpoint': {
                const t = f['type'];
                return new Float(Precision[t['precision']]);
            }
            case 'decimal': {
                const t = f['type'];
                return new Decimal(t['scale'], t['precision'], t['bitWidth']);
            }
            case 'date': {
                const t = f['type'];
                return new Date_(DateUnit[t['unit']]);
            }
            case 'time': {
                const t = f['type'];
                return new Time_(TimeUnit[t['unit']], t['bitWidth']);
            }
            case 'timestamp': {
                const t = f['type'];
                return new Timestamp_(TimeUnit[t['unit']], t['timezone']);
            }
            case 'interval': {
                const t = f['type'];
                return new Interval_(IntervalUnit[t['unit']]);
            }
            case 'union': {
                const t = f['type'];
                return new Union_(UnionMode[t['mode']], (t['typeIds'] || []), children || []);
            }
            case 'fixedsizebinary': {
                const t = f['type'];
                return new FixedSizeBinary(t['byteWidth']);
            }
            case 'fixedsizelist': {
                const t = f['type'];
                return new FixedSizeList(t['listSize'], (children || [])[0]);
            }
            case 'map': {
                const t = f['type'];
                return new Map_((children || [])[0], t['keysSorted']);
            }
        }
        throw new Error(`Unrecognized type: "${typeId}"`);
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    var Long$3 = Long;
    var Builder$3 = Builder$1;
    var ByteBuffer$2 = ByteBuffer;
    /**
     * @ignore
     * @private
     **/
    class Message$1 {
        constructor(bodyLength, version, headerType, header) {
            this._version = version;
            this._headerType = headerType;
            this.body = new Uint8Array(0);
            header && (this._createHeader = () => header);
            this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;
        }
        /** @nocollapse */
        static fromJSON(msg, headerType) {
            const message = new Message$1(0, MetadataVersion.V4, headerType);
            message._createHeader = messageHeaderFromJSON(msg, headerType);
            return message;
        }
        /** @nocollapse */
        static decode(buf) {
            buf = new ByteBuffer$2(toUint8Array(buf));
            const _message = Message.getRootAsMessage(buf);
            const bodyLength = _message.bodyLength();
            const version = _message.version();
            const headerType = _message.headerType();
            const message = new Message$1(bodyLength, version, headerType);
            message._createHeader = decodeMessageHeader(_message, headerType);
            return message;
        }
        /** @nocollapse */
        static encode(message) {
            const b = new Builder$3();
            let headerOffset = -1;
            if (message.isSchema()) {
                headerOffset = Schema$1.encode(b, message.header());
            }
            else if (message.isRecordBatch()) {
                headerOffset = RecordBatch$2.encode(b, message.header());
            }
            else if (message.isDictionaryBatch()) {
                headerOffset = DictionaryBatch$1.encode(b, message.header());
            }
            Message.startMessage(b);
            Message.addVersion(b, MetadataVersion.V4);
            Message.addHeader(b, headerOffset);
            Message.addHeaderType(b, message.headerType);
            Message.addBodyLength(b, new Long$3(message.bodyLength, 0));
            Message.finishMessageBuffer(b, Message.endMessage(b));
            return b.asUint8Array();
        }
        /** @nocollapse */
        static from(header, bodyLength = 0) {
            if (header instanceof Schema$1) {
                return new Message$1(0, MetadataVersion.V4, MessageHeader.Schema, header);
            }
            if (header instanceof RecordBatch$2) {
                return new Message$1(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);
            }
            if (header instanceof DictionaryBatch$1) {
                return new Message$1(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);
            }
            throw new Error(`Unrecognized Message header: ${header}`);
        }
        get type() { return this.headerType; }
        get version() { return this._version; }
        get headerType() { return this._headerType; }
        get bodyLength() { return this._bodyLength; }
        header() { return this._createHeader(); }
        isSchema() { return this.headerType === MessageHeader.Schema; }
        isRecordBatch() { return this.headerType === MessageHeader.RecordBatch; }
        isDictionaryBatch() { return this.headerType === MessageHeader.DictionaryBatch; }
    }
    /**
     * @ignore
     * @private
     **/
    class RecordBatch$2 {
        constructor(length, nodes, buffers) {
            this._nodes = nodes;
            this._buffers = buffers;
            this._length = typeof length === 'number' ? length : length.low;
        }
        get nodes() { return this._nodes; }
        get length() { return this._length; }
        get buffers() { return this._buffers; }
    }
    /**
     * @ignore
     * @private
     **/
    class DictionaryBatch$1 {
        constructor(data, id, isDelta = false) {
            this._data = data;
            this._isDelta = isDelta;
            this._id = typeof id === 'number' ? id : id.low;
        }
        get id() { return this._id; }
        get data() { return this._data; }
        get isDelta() { return this._isDelta; }
        get length() { return this.data.length; }
        get nodes() { return this.data.nodes; }
        get buffers() { return this.data.buffers; }
    }
    /**
     * @ignore
     * @private
     **/
    class BufferRegion {
        constructor(offset, length) {
            this.offset = typeof offset === 'number' ? offset : offset.low;
            this.length = typeof length === 'number' ? length : length.low;
        }
    }
    /**
     * @ignore
     * @private
     **/
    class FieldNode$1 {
        constructor(length, nullCount) {
            this.length = typeof length === 'number' ? length : length.low;
            this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;
        }
    }
    /** @ignore */
    function messageHeaderFromJSON(message, type) {
        return (() => {
            switch (type) {
                case MessageHeader.Schema: return Schema$1.fromJSON(message);
                case MessageHeader.RecordBatch: return RecordBatch$2.fromJSON(message);
                case MessageHeader.DictionaryBatch: return DictionaryBatch$1.fromJSON(message);
            }
            throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);
        });
    }
    /** @ignore */
    function decodeMessageHeader(message, type) {
        return (() => {
            switch (type) {
                case MessageHeader.Schema: return Schema$1.decode(message.header(new Schema()));
                case MessageHeader.RecordBatch: return RecordBatch$2.decode(message.header(new RecordBatch$1()), message.version());
                case MessageHeader.DictionaryBatch: return DictionaryBatch$1.decode(message.header(new DictionaryBatch()), message.version());
            }
            throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);
        });
    }
    Field$1['encode'] = encodeField;
    Field$1['decode'] = decodeField;
    Field$1['fromJSON'] = fieldFromJSON;
    Schema$1['encode'] = encodeSchema;
    Schema$1['decode'] = decodeSchema;
    Schema$1['fromJSON'] = schemaFromJSON;
    RecordBatch$2['encode'] = encodeRecordBatch;
    RecordBatch$2['decode'] = decodeRecordBatch;
    RecordBatch$2['fromJSON'] = recordBatchFromJSON;
    DictionaryBatch$1['encode'] = encodeDictionaryBatch;
    DictionaryBatch$1['decode'] = decodeDictionaryBatch;
    DictionaryBatch$1['fromJSON'] = dictionaryBatchFromJSON;
    FieldNode$1['encode'] = encodeFieldNode;
    FieldNode$1['decode'] = decodeFieldNode;
    BufferRegion['encode'] = encodeBufferRegion;
    BufferRegion['decode'] = decodeBufferRegion;
    /** @ignore */
    function decodeSchema(_schema, dictionaries = new Map()) {
        const fields = decodeSchemaFields(_schema, dictionaries);
        return new Schema$1(fields, decodeCustomMetadata(_schema), dictionaries);
    }
    /** @ignore */
    function decodeRecordBatch(batch, version = MetadataVersion.V4) {
        if (batch.compression() !== null) {
            throw new Error('Record batch compression not implemented');
        }
        return new RecordBatch$2(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));
    }
    /** @ignore */
    function decodeDictionaryBatch(batch, version = MetadataVersion.V4) {
        return new DictionaryBatch$1(RecordBatch$2.decode(batch.data(), version), batch.id(), batch.isDelta());
    }
    /** @ignore */
    function decodeBufferRegion(b) {
        return new BufferRegion(b.offset(), b.length());
    }
    /** @ignore */
    function decodeFieldNode(f) {
        return new FieldNode$1(f.length(), f.nullCount());
    }
    /** @ignore */
    function decodeFieldNodes(batch) {
        const nodes = [];
        for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {
            if (f = batch.nodes(i)) {
                nodes[++j] = FieldNode$1.decode(f);
            }
        }
        return nodes;
    }
    /** @ignore */
    function decodeBuffers(batch, version) {
        const bufferRegions = [];
        for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {
            if (b = batch.buffers(i)) {
                // If this Arrow buffer was written before version 4,
                // advance the buffer's bb_pos 8 bytes to skip past
                // the now-removed page_id field
                if (version < MetadataVersion.V4) {
                    b.bb_pos += (8 * (i + 1));
                }
                bufferRegions[++j] = BufferRegion.decode(b);
            }
        }
        return bufferRegions;
    }
    /** @ignore */
    function decodeSchemaFields(schema, dictionaries) {
        const fields = [];
        for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {
            if (f = schema.fields(i)) {
                fields[++j] = Field$1.decode(f, dictionaries);
            }
        }
        return fields;
    }
    /** @ignore */
    function decodeFieldChildren(field, dictionaries) {
        const children = [];
        for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {
            if (f = field.children(i)) {
                children[++j] = Field$1.decode(f, dictionaries);
            }
        }
        return children;
    }
    /** @ignore */
    function decodeField(f, dictionaries) {
        let id;
        let field;
        let type;
        let keys;
        let dictType;
        let dictMeta;
        // If no dictionary encoding
        if (!dictionaries || !(dictMeta = f.dictionary())) {
            type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));
            field = new Field$1(f.name(), type, f.nullable(), decodeCustomMetadata(f));
        }
        // If dictionary encoded and the first time we've seen this dictionary id, decode
        // the data type and child fields, then wrap in a Dictionary type and insert the
        // data type into the dictionary types map.
        else if (!dictionaries.has(id = dictMeta.id().low)) {
            // a dictionary index defaults to signed 32 bit int if unspecified
            keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();
            dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));
            dictType = new Dictionary$1(type, keys, id, dictMeta.isOrdered());
            field = new Field$1(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));
        }
        // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the
        // data type and wrap in a new Dictionary type and field.
        else {
            // a dictionary index defaults to signed 32 bit int if unspecified
            keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();
            dictType = new Dictionary$1(dictionaries.get(id), keys, id, dictMeta.isOrdered());
            field = new Field$1(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));
        }
        return field || null;
    }
    /** @ignore */
    function decodeCustomMetadata(parent) {
        const data = new Map();
        if (parent) {
            for (let entry, key, i = -1, n = Math.trunc(parent.customMetadataLength()); ++i < n;) {
                if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {
                    data.set(key, entry.value());
                }
            }
        }
        return data;
    }
    /** @ignore */
    function decodeIndexType(_type) {
        return new Int_(_type.isSigned(), _type.bitWidth());
    }
    /** @ignore */
    function decodeFieldType(f, children) {
        const typeId = f.typeType();
        switch (typeId) {
            case Type$1['NONE']: return new Null();
            case Type$1['Null']: return new Null();
            case Type$1['Binary']: return new Binary();
            case Type$1['Utf8']: return new Utf8();
            case Type$1['Bool']: return new Bool();
            case Type$1['List']: return new List((children || [])[0]);
            case Type$1['Struct_']: return new Struct(children || []);
        }
        switch (typeId) {
            case Type$1['Int']: {
                const t = f.type(new Int());
                return new Int_(t.isSigned(), t.bitWidth());
            }
            case Type$1['FloatingPoint']: {
                const t = f.type(new FloatingPoint());
                return new Float(t.precision());
            }
            case Type$1['Decimal']: {
                const t = f.type(new Decimal$1());
                return new Decimal(t.scale(), t.precision(), t.bitWidth());
            }
            case Type$1['Date']: {
                const t = f.type(new Date$1());
                return new Date_(t.unit());
            }
            case Type$1['Time']: {
                const t = f.type(new Time());
                return new Time_(t.unit(), t.bitWidth());
            }
            case Type$1['Timestamp']: {
                const t = f.type(new Timestamp());
                return new Timestamp_(t.unit(), t.timezone());
            }
            case Type$1['Interval']: {
                const t = f.type(new Interval());
                return new Interval_(t.unit());
            }
            case Type$1['Union']: {
                const t = f.type(new Union());
                return new Union_(t.mode(), t.typeIdsArray() || [], children || []);
            }
            case Type$1['FixedSizeBinary']: {
                const t = f.type(new FixedSizeBinary$1());
                return new FixedSizeBinary(t.byteWidth());
            }
            case Type$1['FixedSizeList']: {
                const t = f.type(new FixedSizeList$1());
                return new FixedSizeList(t.listSize(), (children || [])[0]);
            }
            case Type$1['Map']: {
                const t = f.type(new Map$1());
                return new Map_((children || [])[0], t.keysSorted());
            }
        }
        throw new Error(`Unrecognized type: "${Type$1[typeId]}" (${typeId})`);
    }
    /** @ignore */
    function encodeSchema(b, schema) {
        const fieldOffsets = schema.fields.map((f) => Field$1.encode(b, f));
        Schema.startFieldsVector(b, fieldOffsets.length);
        const fieldsVectorOffset = Schema.createFieldsVector(b, fieldOffsets);
        const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :
            Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {
                const key = b.createString(`${k}`);
                const val = b.createString(`${v}`);
                KeyValue.startKeyValue(b);
                KeyValue.addKey(b, key);
                KeyValue.addValue(b, val);
                return KeyValue.endKeyValue(b);
            }));
        Schema.startSchema(b);
        Schema.addFields(b, fieldsVectorOffset);
        Schema.addEndianness(b, platformIsLittleEndian ? Endianness.Little : Endianness.Big);
        if (metadataOffset !== -1) {
            Schema.addCustomMetadata(b, metadataOffset);
        }
        return Schema.endSchema(b);
    }
    /** @ignore */
    function encodeField(b, field) {
        let nameOffset = -1;
        let typeOffset = -1;
        let dictionaryOffset = -1;
        const type = field.type;
        let typeId = field.typeId;
        if (!DataType.isDictionary(type)) {
            typeOffset = instance$a.visit(type, b);
        }
        else {
            typeId = type.dictionary.typeId;
            dictionaryOffset = instance$a.visit(type, b);
            typeOffset = instance$a.visit(type.dictionary, b);
        }
        const childOffsets = (type.children || []).map((f) => Field$1.encode(b, f));
        const childrenVectorOffset = Field.createChildrenVector(b, childOffsets);
        const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :
            Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {
                const key = b.createString(`${k}`);
                const val = b.createString(`${v}`);
                KeyValue.startKeyValue(b);
                KeyValue.addKey(b, key);
                KeyValue.addValue(b, val);
                return KeyValue.endKeyValue(b);
            }));
        if (field.name) {
            nameOffset = b.createString(field.name);
        }
        Field.startField(b);
        Field.addType(b, typeOffset);
        Field.addTypeType(b, typeId);
        Field.addChildren(b, childrenVectorOffset);
        Field.addNullable(b, !!field.nullable);
        if (nameOffset !== -1) {
            Field.addName(b, nameOffset);
        }
        if (dictionaryOffset !== -1) {
            Field.addDictionary(b, dictionaryOffset);
        }
        if (metadataOffset !== -1) {
            Field.addCustomMetadata(b, metadataOffset);
        }
        return Field.endField(b);
    }
    /** @ignore */
    function encodeRecordBatch(b, recordBatch) {
        const nodes = recordBatch.nodes || [];
        const buffers = recordBatch.buffers || [];
        RecordBatch$1.startNodesVector(b, nodes.length);
        for (const n of nodes.slice().reverse())
            FieldNode$1.encode(b, n);
        const nodesVectorOffset = b.endVector();
        RecordBatch$1.startBuffersVector(b, buffers.length);
        for (const b_ of buffers.slice().reverse())
            BufferRegion.encode(b, b_);
        const buffersVectorOffset = b.endVector();
        RecordBatch$1.startRecordBatch(b);
        RecordBatch$1.addLength(b, new Long$3(recordBatch.length, 0));
        RecordBatch$1.addNodes(b, nodesVectorOffset);
        RecordBatch$1.addBuffers(b, buffersVectorOffset);
        return RecordBatch$1.endRecordBatch(b);
    }
    /** @ignore */
    function encodeDictionaryBatch(b, dictionaryBatch) {
        const dataOffset = RecordBatch$2.encode(b, dictionaryBatch.data);
        DictionaryBatch.startDictionaryBatch(b);
        DictionaryBatch.addId(b, new Long$3(dictionaryBatch.id, 0));
        DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);
        DictionaryBatch.addData(b, dataOffset);
        return DictionaryBatch.endDictionaryBatch(b);
    }
    /** @ignore */
    function encodeFieldNode(b, node) {
        return FieldNode.createFieldNode(b, new Long$3(node.length, 0), new Long$3(node.nullCount, 0));
    }
    /** @ignore */
    function encodeBufferRegion(b, node) {
        return Buffer.createBuffer(b, new Long$3(node.offset, 0), new Long$3(node.length, 0));
    }
    /** @ignore */
    const platformIsLittleEndian = (() => {
        const buffer = new ArrayBuffer(2);
        new DataView(buffer).setInt16(0, 256, true /* littleEndian */);
        // Int16Array uses the platform's endianness.
        return new Int16Array(buffer)[0] === 256;
    })();

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */ const invalidMessageType = (type) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;
    /** @ignore */ const nullMessage = (type) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;
    /** @ignore */ const invalidMessageMetadata = (expected, actual) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;
    /** @ignore */ const invalidMessageBodyLength = (expected, actual) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;
    /** @ignore */
    class MessageReader {
        constructor(source) {
            this.source = source instanceof ByteStream ? source : new ByteStream(source);
        }
        [Symbol.iterator]() { return this; }
        next() {
            let r;
            if ((r = this.readMetadataLength()).done) {
                return ITERATOR_DONE;
            }
            // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read
            // the next 4 for the 32-bit metadata length. Otherwise, assume this is a
            // pre-v0.15 message, where the first 4 bytes are the metadata length.
            if ((r.value === -1) &&
                (r = this.readMetadataLength()).done) {
                return ITERATOR_DONE;
            }
            if ((r = this.readMetadata(r.value)).done) {
                return ITERATOR_DONE;
            }
            return r;
        }
        throw(value) { return this.source.throw(value); }
        return(value) { return this.source.return(value); }
        readMessage(type) {
            let r;
            if ((r = this.next()).done) {
                return null;
            }
            if ((type != null) && r.value.headerType !== type) {
                throw new Error(invalidMessageType(type));
            }
            return r.value;
        }
        readMessageBody(bodyLength) {
            if (bodyLength <= 0) {
                return new Uint8Array(0);
            }
            const buf = toUint8Array(this.source.read(bodyLength));
            if (buf.byteLength < bodyLength) {
                throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));
            }
            // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817
            // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126
            return /* 1. */ (buf.byteOffset % 8 === 0) &&
                /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();
        }
        readSchema(throwIfNull = false) {
            const type = MessageHeader.Schema;
            const message = this.readMessage(type);
            const schema = message === null || message === void 0 ? void 0 : message.header();
            if (throwIfNull && !schema) {
                throw new Error(nullMessage(type));
            }
            return schema;
        }
        readMetadataLength() {
            const buf = this.source.read(PADDING);
            const bb = buf && new ByteBuffer(buf);
            const len = (bb === null || bb === void 0 ? void 0 : bb.readInt32(0)) || 0;
            return { done: len === 0, value: len };
        }
        readMetadata(metadataLength) {
            const buf = this.source.read(metadataLength);
            if (!buf) {
                return ITERATOR_DONE;
            }
            if (buf.byteLength < metadataLength) {
                throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));
            }
            return { done: false, value: Message$1.decode(buf) };
        }
    }
    /** @ignore */
    class AsyncMessageReader {
        constructor(source, byteLength) {
            this.source = source instanceof AsyncByteStream ? source
                : isFileHandle(source)
                    ? new AsyncRandomAccessFile(source, byteLength)
                    : new AsyncByteStream(source);
        }
        [Symbol.asyncIterator]() { return this; }
        next() {
            return __awaiter(this, void 0, void 0, function* () {
                let r;
                if ((r = yield this.readMetadataLength()).done) {
                    return ITERATOR_DONE;
                }
                // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read
                // the next 4 for the 32-bit metadata length. Otherwise, assume this is a
                // pre-v0.15 message, where the first 4 bytes are the metadata length.
                if ((r.value === -1) &&
                    (r = yield this.readMetadataLength()).done) {
                    return ITERATOR_DONE;
                }
                if ((r = yield this.readMetadata(r.value)).done) {
                    return ITERATOR_DONE;
                }
                return r;
            });
        }
        throw(value) {
            return __awaiter(this, void 0, void 0, function* () { return yield this.source.throw(value); });
        }
        return(value) {
            return __awaiter(this, void 0, void 0, function* () { return yield this.source.return(value); });
        }
        readMessage(type) {
            return __awaiter(this, void 0, void 0, function* () {
                let r;
                if ((r = yield this.next()).done) {
                    return null;
                }
                if ((type != null) && r.value.headerType !== type) {
                    throw new Error(invalidMessageType(type));
                }
                return r.value;
            });
        }
        readMessageBody(bodyLength) {
            return __awaiter(this, void 0, void 0, function* () {
                if (bodyLength <= 0) {
                    return new Uint8Array(0);
                }
                const buf = toUint8Array(yield this.source.read(bodyLength));
                if (buf.byteLength < bodyLength) {
                    throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));
                }
                // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817
                // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126
                return /* 1. */ (buf.byteOffset % 8 === 0) &&
                    /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();
            });
        }
        readSchema(throwIfNull = false) {
            return __awaiter(this, void 0, void 0, function* () {
                const type = MessageHeader.Schema;
                const message = yield this.readMessage(type);
                const schema = message === null || message === void 0 ? void 0 : message.header();
                if (throwIfNull && !schema) {
                    throw new Error(nullMessage(type));
                }
                return schema;
            });
        }
        readMetadataLength() {
            return __awaiter(this, void 0, void 0, function* () {
                const buf = yield this.source.read(PADDING);
                const bb = buf && new ByteBuffer(buf);
                const len = (bb === null || bb === void 0 ? void 0 : bb.readInt32(0)) || 0;
                return { done: len === 0, value: len };
            });
        }
        readMetadata(metadataLength) {
            return __awaiter(this, void 0, void 0, function* () {
                const buf = yield this.source.read(metadataLength);
                if (!buf) {
                    return ITERATOR_DONE;
                }
                if (buf.byteLength < metadataLength) {
                    throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));
                }
                return { done: false, value: Message$1.decode(buf) };
            });
        }
    }
    /** @ignore */
    class JSONMessageReader extends MessageReader {
        constructor(source) {
            super(new Uint8Array(0));
            this._schema = false;
            this._body = [];
            this._batchIndex = 0;
            this._dictionaryIndex = 0;
            this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);
        }
        next() {
            const { _json } = this;
            if (!this._schema) {
                this._schema = true;
                const message = Message$1.fromJSON(_json.schema, MessageHeader.Schema);
                return { done: false, value: message };
            }
            if (this._dictionaryIndex < _json.dictionaries.length) {
                const batch = _json.dictionaries[this._dictionaryIndex++];
                this._body = batch['data']['columns'];
                const message = Message$1.fromJSON(batch, MessageHeader.DictionaryBatch);
                return { done: false, value: message };
            }
            if (this._batchIndex < _json.batches.length) {
                const batch = _json.batches[this._batchIndex++];
                this._body = batch['columns'];
                const message = Message$1.fromJSON(batch, MessageHeader.RecordBatch);
                return { done: false, value: message };
            }
            this._body = [];
            return ITERATOR_DONE;
        }
        readMessageBody(_bodyLength) {
            return flattenDataSources(this._body);
            function flattenDataSources(xs) {
                return (xs || []).reduce((buffers, column) => [
                    ...buffers,
                    ...(column['VALIDITY'] && [column['VALIDITY']] || []),
                    ...(column['TYPE'] && [column['TYPE']] || []),
                    ...(column['OFFSET'] && [column['OFFSET']] || []),
                    ...(column['DATA'] && [column['DATA']] || []),
                    ...flattenDataSources(column['children'])
                ], []);
            }
        }
        readMessage(type) {
            let r;
            if ((r = this.next()).done) {
                return null;
            }
            if ((type != null) && r.value.headerType !== type) {
                throw new Error(invalidMessageType(type));
            }
            return r.value;
        }
        readSchema() {
            const type = MessageHeader.Schema;
            const message = this.readMessage(type);
            const schema = message === null || message === void 0 ? void 0 : message.header();
            if (!message || !schema) {
                throw new Error(nullMessage(type));
            }
            return schema;
        }
    }
    /** @ignore */
    const PADDING = 4;
    /** @ignore */
    const MAGIC_STR = 'ARROW1';
    /** @ignore */
    const MAGIC = new Uint8Array(MAGIC_STR.length);
    for (let i = 0; i < MAGIC_STR.length; i += 1) {
        MAGIC[i] = MAGIC_STR.codePointAt(i);
    }
    /** @ignore */
    function checkForMagicArrowString(buffer, index = 0) {
        for (let i = -1, n = MAGIC.length; ++i < n;) {
            if (MAGIC[i] !== buffer[index + i]) {
                return false;
            }
        }
        return true;
    }
    /** @ignore */
    const magicLength = MAGIC.length;
    /** @ignore */
    const magicAndPadding = magicLength + PADDING;
    /** @ignore */
    const magicX2AndPadding = magicLength * 2 + PADDING;

    // Licensed to the Apache Software Foundation (ASF) under one
    class RecordBatchReader extends ReadableInterop {
        constructor(impl) {
            super();
            this._impl = impl;
        }
        get closed() { return this._impl.closed; }
        get schema() { return this._impl.schema; }
        get autoDestroy() { return this._impl.autoDestroy; }
        get dictionaries() { return this._impl.dictionaries; }
        get numDictionaries() { return this._impl.numDictionaries; }
        get numRecordBatches() { return this._impl.numRecordBatches; }
        get footer() { return this._impl.isFile() ? this._impl.footer : null; }
        isSync() { return this._impl.isSync(); }
        isAsync() { return this._impl.isAsync(); }
        isFile() { return this._impl.isFile(); }
        isStream() { return this._impl.isStream(); }
        next() {
            return this._impl.next();
        }
        throw(value) {
            return this._impl.throw(value);
        }
        return(value) {
            return this._impl.return(value);
        }
        cancel() {
            return this._impl.cancel();
        }
        reset(schema) {
            this._impl.reset(schema);
            this._DOMStream = undefined;
            this._nodeStream = undefined;
            return this;
        }
        open(options) {
            const opening = this._impl.open(options);
            return isPromise(opening) ? opening.then(() => this) : this;
        }
        readRecordBatch(index) {
            return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;
        }
        [Symbol.iterator]() {
            return this._impl[Symbol.iterator]();
        }
        [Symbol.asyncIterator]() {
            return this._impl[Symbol.asyncIterator]();
        }
        toDOMStream() {
            return streamAdapters.toDOMStream((this.isSync()
                ? { [Symbol.iterator]: () => this }
                : { [Symbol.asyncIterator]: () => this }));
        }
        toNodeStream() {
            return streamAdapters.toNodeStream((this.isSync()
                ? { [Symbol.iterator]: () => this }
                : { [Symbol.asyncIterator]: () => this }), { objectMode: true });
        }
        /** @nocollapse */
        // @ts-ignore
        static throughNode(options) {
            throw new Error(`"throughNode" not available in this environment`);
        }
        /** @nocollapse */
        static throughDOM(
        // @ts-ignore
        writableStrategy, 
        // @ts-ignore
        readableStrategy) {
            throw new Error(`"throughDOM" not available in this environment`);
        }
        /** @nocollapse */
        static from(source) {
            if (source instanceof RecordBatchReader) {
                return source;
            }
            else if (isArrowJSON(source)) {
                return fromArrowJSON(source);
            }
            else if (isFileHandle(source)) {
                return fromFileHandle(source);
            }
            else if (isPromise(source)) {
                return (() => __awaiter(this, void 0, void 0, function* () { return yield RecordBatchReader.from(yield source); }))();
            }
            else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {
                return fromAsyncByteStream(new AsyncByteStream(source));
            }
            return fromByteStream(new ByteStream(source));
        }
        /** @nocollapse */
        static readAll(source) {
            if (source instanceof RecordBatchReader) {
                return source.isSync() ? readAllSync(source) : readAllAsync(source);
            }
            else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable(source) || isIteratorResult(source)) {
                return readAllSync(source);
            }
            return readAllAsync(source);
        }
    }
    //
    // Since TS is a structural type system, we define the following subclass stubs
    // so that concrete types exist to associate with with the interfaces below.
    //
    // The implementation for each RecordBatchReader is hidden away in the set of
    // `RecordBatchReaderImpl` classes in the second half of this file. This allows
    // us to export a single RecordBatchReader class, and swap out the impl based
    // on the io primitives or underlying arrow (JSON, file, or stream) at runtime.
    //
    // Async/await makes our job a bit harder, since it forces everything to be
    // either fully sync or fully async. This is why the logic for the reader impls
    // has been duplicated into both sync and async variants. Since the RBR
    // delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for
    // example will return async/await-friendly Promises, but one with a (sync)
    // RecordBatchStreamReaderImpl will always return values. Nothing should be
    // different about their logic, aside from the async handling. This is also why
    // this code looks highly structured, as it should be nearly identical and easy
    // to follow.
    //
    /** @ignore */
    class RecordBatchStreamReader extends RecordBatchReader {
        constructor(_impl) {
            super(_impl);
            this._impl = _impl;
        }
        readAll() { return [...this]; }
        [Symbol.iterator]() { return this._impl[Symbol.iterator](); }
        [Symbol.asyncIterator]() { return __asyncGenerator(this, arguments, function* _a() { yield __await(yield* __asyncDelegator(__asyncValues(this[Symbol.iterator]()))); }); }
    }
    /** @ignore */
    class AsyncRecordBatchStreamReader extends RecordBatchReader {
        constructor(_impl) {
            super(_impl);
            this._impl = _impl;
        }
        readAll() {
            var e_1, _a;
            return __awaiter(this, void 0, void 0, function* () {
                const batches = new Array();
                try {
                    for (var _b = __asyncValues(this), _c; _c = yield _b.next(), !_c.done;) {
                        const batch = _c.value;
                        batches.push(batch);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return batches;
            });
        }
        [Symbol.iterator]() { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }
        [Symbol.asyncIterator]() { return this._impl[Symbol.asyncIterator](); }
    }
    /** @ignore */
    class RecordBatchFileReader extends RecordBatchStreamReader {
        constructor(_impl) {
            super(_impl);
            this._impl = _impl;
        }
    }
    /** @ignore */
    class AsyncRecordBatchFileReader extends AsyncRecordBatchStreamReader {
        constructor(_impl) {
            super(_impl);
            this._impl = _impl;
        }
    }
    /** @ignore */
    class RecordBatchReaderImpl {
        constructor(dictionaries = new Map()) {
            this.closed = false;
            this.autoDestroy = true;
            this._dictionaryIndex = 0;
            this._recordBatchIndex = 0;
            this.dictionaries = dictionaries;
        }
        get numDictionaries() { return this._dictionaryIndex; }
        get numRecordBatches() { return this._recordBatchIndex; }
        isSync() { return false; }
        isAsync() { return false; }
        isFile() { return false; }
        isStream() { return false; }
        reset(schema) {
            this._dictionaryIndex = 0;
            this._recordBatchIndex = 0;
            this.schema = schema;
            this.dictionaries = new Map();
            return this;
        }
        _loadRecordBatch(header, body) {
            const children = this._loadVectors(header, body, this.schema.fields);
            const data = makeData({ type: new Struct(this.schema.fields), length: header.length, children });
            return new RecordBatch(this.schema, data);
        }
        _loadDictionaryBatch(header, body) {
            const { id, isDelta } = header;
            const { dictionaries, schema } = this;
            const dictionary = dictionaries.get(id);
            if (isDelta || !dictionary) {
                const type = schema.dictionaries.get(id);
                const data = this._loadVectors(header.data, body, [type]);
                return (dictionary && isDelta ? dictionary.concat(new Vector(data)) :
                    new Vector(data)).memoize();
            }
            return dictionary.memoize();
        }
        _loadVectors(header, body, types) {
            return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);
        }
    }
    /** @ignore */
    class RecordBatchStreamReaderImpl extends RecordBatchReaderImpl {
        constructor(source, dictionaries) {
            super(dictionaries);
            this._reader = !isArrowJSON(source)
                ? new MessageReader(this._handle = source)
                : new JSONMessageReader(this._handle = source);
        }
        isSync() { return true; }
        isStream() { return true; }
        [Symbol.iterator]() {
            return this;
        }
        cancel() {
            if (!this.closed && (this.closed = true)) {
                this.reset()._reader.return();
                this._reader = null;
                this.dictionaries = null;
            }
        }
        open(options) {
            if (!this.closed) {
                this.autoDestroy = shouldAutoDestroy(this, options);
                if (!(this.schema || (this.schema = this._reader.readSchema()))) {
                    this.cancel();
                }
            }
            return this;
        }
        throw(value) {
            if (!this.closed && this.autoDestroy && (this.closed = true)) {
                return this.reset()._reader.throw(value);
            }
            return ITERATOR_DONE;
        }
        return(value) {
            if (!this.closed && this.autoDestroy && (this.closed = true)) {
                return this.reset()._reader.return(value);
            }
            return ITERATOR_DONE;
        }
        next() {
            if (this.closed) {
                return ITERATOR_DONE;
            }
            let message;
            const { _reader: reader } = this;
            while (message = this._readNextMessageAndValidate()) {
                if (message.isSchema()) {
                    this.reset(message.header());
                }
                else if (message.isRecordBatch()) {
                    this._recordBatchIndex++;
                    const header = message.header();
                    const buffer = reader.readMessageBody(message.bodyLength);
                    const recordBatch = this._loadRecordBatch(header, buffer);
                    return { done: false, value: recordBatch };
                }
                else if (message.isDictionaryBatch()) {
                    this._dictionaryIndex++;
                    const header = message.header();
                    const buffer = reader.readMessageBody(message.bodyLength);
                    const vector = this._loadDictionaryBatch(header, buffer);
                    this.dictionaries.set(header.id, vector);
                }
            }
            if (this.schema && this._recordBatchIndex === 0) {
                this._recordBatchIndex++;
                return { done: false, value: new _InternalEmptyPlaceholderRecordBatch(this.schema) };
            }
            return this.return();
        }
        _readNextMessageAndValidate(type) {
            return this._reader.readMessage(type);
        }
    }
    /** @ignore */
    class AsyncRecordBatchStreamReaderImpl extends RecordBatchReaderImpl {
        constructor(source, dictionaries) {
            super(dictionaries);
            this._reader = new AsyncMessageReader(this._handle = source);
        }
        isAsync() { return true; }
        isStream() { return true; }
        [Symbol.asyncIterator]() {
            return this;
        }
        cancel() {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.closed && (this.closed = true)) {
                    yield this.reset()._reader.return();
                    this._reader = null;
                    this.dictionaries = null;
                }
            });
        }
        open(options) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.closed) {
                    this.autoDestroy = shouldAutoDestroy(this, options);
                    if (!(this.schema || (this.schema = (yield this._reader.readSchema())))) {
                        yield this.cancel();
                    }
                }
                return this;
            });
        }
        throw(value) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.closed && this.autoDestroy && (this.closed = true)) {
                    return yield this.reset()._reader.throw(value);
                }
                return ITERATOR_DONE;
            });
        }
        return(value) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.closed && this.autoDestroy && (this.closed = true)) {
                    return yield this.reset()._reader.return(value);
                }
                return ITERATOR_DONE;
            });
        }
        next() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.closed) {
                    return ITERATOR_DONE;
                }
                let message;
                const { _reader: reader } = this;
                while (message = yield this._readNextMessageAndValidate()) {
                    if (message.isSchema()) {
                        yield this.reset(message.header());
                    }
                    else if (message.isRecordBatch()) {
                        this._recordBatchIndex++;
                        const header = message.header();
                        const buffer = yield reader.readMessageBody(message.bodyLength);
                        const recordBatch = this._loadRecordBatch(header, buffer);
                        return { done: false, value: recordBatch };
                    }
                    else if (message.isDictionaryBatch()) {
                        this._dictionaryIndex++;
                        const header = message.header();
                        const buffer = yield reader.readMessageBody(message.bodyLength);
                        const vector = this._loadDictionaryBatch(header, buffer);
                        this.dictionaries.set(header.id, vector);
                    }
                }
                if (this.schema && this._recordBatchIndex === 0) {
                    this._recordBatchIndex++;
                    return { done: false, value: new _InternalEmptyPlaceholderRecordBatch(this.schema) };
                }
                return yield this.return();
            });
        }
        _readNextMessageAndValidate(type) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this._reader.readMessage(type);
            });
        }
    }
    /** @ignore */
    class RecordBatchFileReaderImpl extends RecordBatchStreamReaderImpl {
        constructor(source, dictionaries) {
            super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);
        }
        get footer() { return this._footer; }
        get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }
        get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }
        isSync() { return true; }
        isFile() { return true; }
        open(options) {
            if (!this.closed && !this._footer) {
                this.schema = (this._footer = this._readFooter()).schema;
                for (const block of this._footer.dictionaryBatches()) {
                    block && this._readDictionaryBatch(this._dictionaryIndex++);
                }
            }
            return super.open(options);
        }
        readRecordBatch(index) {
            var _a;
            if (this.closed) {
                return null;
            }
            if (!this._footer) {
                this.open();
            }
            const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getRecordBatch(index);
            if (block && this._handle.seek(block.offset)) {
                const message = this._reader.readMessage(MessageHeader.RecordBatch);
                if (message === null || message === void 0 ? void 0 : message.isRecordBatch()) {
                    const header = message.header();
                    const buffer = this._reader.readMessageBody(message.bodyLength);
                    const recordBatch = this._loadRecordBatch(header, buffer);
                    return recordBatch;
                }
            }
            return null;
        }
        _readDictionaryBatch(index) {
            var _a;
            const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getDictionaryBatch(index);
            if (block && this._handle.seek(block.offset)) {
                const message = this._reader.readMessage(MessageHeader.DictionaryBatch);
                if (message === null || message === void 0 ? void 0 : message.isDictionaryBatch()) {
                    const header = message.header();
                    const buffer = this._reader.readMessageBody(message.bodyLength);
                    const vector = this._loadDictionaryBatch(header, buffer);
                    this.dictionaries.set(header.id, vector);
                }
            }
        }
        _readFooter() {
            const { _handle } = this;
            const offset = _handle.size - magicAndPadding;
            const length = _handle.readInt32(offset);
            const buffer = _handle.readAt(offset - length, length);
            return Footer_.decode(buffer);
        }
        _readNextMessageAndValidate(type) {
            var _a;
            if (!this._footer) {
                this.open();
            }
            if (this._footer && this._recordBatchIndex < this.numRecordBatches) {
                const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getRecordBatch(this._recordBatchIndex);
                if (block && this._handle.seek(block.offset)) {
                    return this._reader.readMessage(type);
                }
            }
            return null;
        }
    }
    /** @ignore */
    class AsyncRecordBatchFileReaderImpl extends AsyncRecordBatchStreamReaderImpl {
        constructor(source, ...rest) {
            const byteLength = typeof rest[0] !== 'number' ? rest.shift() : undefined;
            const dictionaries = rest[0] instanceof Map ? rest.shift() : undefined;
            super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);
        }
        get footer() { return this._footer; }
        get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }
        get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }
        isFile() { return true; }
        isAsync() { return true; }
        open(options) {
            const _super = Object.create(null, {
                open: { get: () => super.open }
            });
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.closed && !this._footer) {
                    this.schema = (this._footer = yield this._readFooter()).schema;
                    for (const block of this._footer.dictionaryBatches()) {
                        block && (yield this._readDictionaryBatch(this._dictionaryIndex++));
                    }
                }
                return yield _super.open.call(this, options);
            });
        }
        readRecordBatch(index) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                if (this.closed) {
                    return null;
                }
                if (!this._footer) {
                    yield this.open();
                }
                const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getRecordBatch(index);
                if (block && (yield this._handle.seek(block.offset))) {
                    const message = yield this._reader.readMessage(MessageHeader.RecordBatch);
                    if (message === null || message === void 0 ? void 0 : message.isRecordBatch()) {
                        const header = message.header();
                        const buffer = yield this._reader.readMessageBody(message.bodyLength);
                        const recordBatch = this._loadRecordBatch(header, buffer);
                        return recordBatch;
                    }
                }
                return null;
            });
        }
        _readDictionaryBatch(index) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const block = (_a = this._footer) === null || _a === void 0 ? void 0 : _a.getDictionaryBatch(index);
                if (block && (yield this._handle.seek(block.offset))) {
                    const message = yield this._reader.readMessage(MessageHeader.DictionaryBatch);
                    if (message === null || message === void 0 ? void 0 : message.isDictionaryBatch()) {
                        const header = message.header();
                        const buffer = yield this._reader.readMessageBody(message.bodyLength);
                        const vector = this._loadDictionaryBatch(header, buffer);
                        this.dictionaries.set(header.id, vector);
                    }
                }
            });
        }
        _readFooter() {
            return __awaiter(this, void 0, void 0, function* () {
                const { _handle } = this;
                _handle._pending && (yield _handle._pending);
                const offset = _handle.size - magicAndPadding;
                const length = yield _handle.readInt32(offset);
                const buffer = yield _handle.readAt(offset - length, length);
                return Footer_.decode(buffer);
            });
        }
        _readNextMessageAndValidate(type) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this._footer) {
                    yield this.open();
                }
                if (this._footer && this._recordBatchIndex < this.numRecordBatches) {
                    const block = this._footer.getRecordBatch(this._recordBatchIndex);
                    if (block && (yield this._handle.seek(block.offset))) {
                        return yield this._reader.readMessage(type);
                    }
                }
                return null;
            });
        }
    }
    /** @ignore */
    class RecordBatchJSONReaderImpl extends RecordBatchStreamReaderImpl {
        constructor(source, dictionaries) {
            super(source, dictionaries);
        }
        _loadVectors(header, body, types) {
            return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);
        }
    }
    //
    // Define some helper functions and static implementations down here. There's
    // a bit of branching in the static methods that can lead to the same routines
    // being executed, so we've broken those out here for readability.
    //
    /** @ignore */
    function shouldAutoDestroy(self, options) {
        return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];
    }
    /** @ignore */
    function* readAllSync(source) {
        const reader = RecordBatchReader.from(source);
        try {
            if (!reader.open({ autoDestroy: false }).closed) {
                do {
                    yield reader;
                } while (!(reader.reset().open()).closed);
            }
        }
        finally {
            reader.cancel();
        }
    }
    /** @ignore */
    function readAllAsync(source) {
        return __asyncGenerator(this, arguments, function* readAllAsync_1() {
            const reader = yield __await(RecordBatchReader.from(source));
            try {
                if (!(yield __await(reader.open({ autoDestroy: false }))).closed) {
                    do {
                        yield yield __await(reader);
                    } while (!(yield __await(reader.reset().open())).closed);
                }
            }
            finally {
                yield __await(reader.cancel());
            }
        });
    }
    /** @ignore */
    function fromArrowJSON(source) {
        return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl(source));
    }
    /** @ignore */
    function fromByteStream(source) {
        const bytes = source.peek((magicLength + 7) & ~7);
        return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)
            ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(source))
            : new RecordBatchFileReader(new RecordBatchFileReaderImpl(source.read()))
            : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(function* () { }()));
    }
    /** @ignore */
    function fromAsyncByteStream(source) {
        return __awaiter(this, void 0, void 0, function* () {
            const bytes = yield source.peek((magicLength + 7) & ~7);
            return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)
                ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(source))
                : new RecordBatchFileReader(new RecordBatchFileReaderImpl(yield source.read()))
                : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(function () { return __asyncGenerator(this, arguments, function* () { }); }()));
        });
    }
    /** @ignore */
    function fromFileHandle(source) {
        return __awaiter(this, void 0, void 0, function* () {
            const { size } = yield source.stat();
            const file = new AsyncRandomAccessFile(source, size);
            if (size >= magicX2AndPadding && checkForMagicArrowString(yield file.readAt(0, (magicLength + 7) & ~7))) {
                return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl(file));
            }
            return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(file));
        });
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    /** @ignore */
    class VectorAssembler extends Visitor {
        constructor() {
            super();
            this._byteLength = 0;
            this._nodes = [];
            this._buffers = [];
            this._bufferRegions = [];
        }
        /** @nocollapse */
        static assemble(...args) {
            const unwrap = (nodes) => nodes.flatMap((node) => Array.isArray(node) ? unwrap(node) :
                (node instanceof RecordBatch) ? node.data.children : node.data);
            const assembler = new VectorAssembler();
            assembler.visitMany(unwrap(args));
            return assembler;
        }
        visit(data) {
            if (data instanceof Vector) {
                this.visitMany(data.data);
                return this;
            }
            const { type } = data;
            if (!DataType.isDictionary(type)) {
                const { length, nullCount } = data;
                if (length > 2147483647) {
                    /* istanbul ignore next */
                    throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');
                }
                if (!DataType.isNull(type)) {
                    addBuffer.call(this, nullCount <= 0
                        ? new Uint8Array(0) // placeholder validity buffer
                        : truncateBitmap(data.offset, length, data.nullBitmap));
                }
                this.nodes.push(new FieldNode$1(length, nullCount));
            }
            return super.visit(data);
        }
        visitNull(_null) {
            return this;
        }
        visitDictionary(data) {
            // Assemble the indices here, Dictionary assembled separately.
            return this.visit(data.clone(data.type.indices));
        }
        get nodes() { return this._nodes; }
        get buffers() { return this._buffers; }
        get byteLength() { return this._byteLength; }
        get bufferRegions() { return this._bufferRegions; }
    }
    /** @ignore */
    function addBuffer(values) {
        const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8
        this.buffers.push(values);
        this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));
        this._byteLength += byteLength;
        return this;
    }
    /** @ignore */
    function assembleUnion(data) {
        const { type, length, typeIds, valueOffsets } = data;
        // All Union Vectors have a typeIds buffer
        addBuffer.call(this, typeIds);
        // If this is a Sparse Union, treat it like all other Nested types
        if (type.mode === UnionMode.Sparse) {
            return assembleNestedVector.call(this, data);
        }
        else if (type.mode === UnionMode.Dense) {
            // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children
            if (data.offset <= 0) {
                // If the Vector hasn't been sliced, write the existing valueOffsets
                addBuffer.call(this, valueOffsets);
                // We can treat this like all other Nested types
                return assembleNestedVector.call(this, data);
            }
            else {
                // A sliced Dense Union is an unpleasant case. Because the offsets are different for
                // each child vector, we need to "rebase" the valueOffsets for each child
                // Union typeIds are not necessary 0-indexed
                const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);
                const childLengths = new Int32Array(maxChildTypeId + 1);
                // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet
                const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);
                const shiftedOffsets = new Int32Array(length);
                // If we have a non-zero offset, then the value offsets do not start at
                // zero. We must a) create a new offsets array with shifted offsets and
                // b) slice the values array accordingly
                const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);
                for (let typeId, shift, index = -1; ++index < length;) {
                    if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {
                        shift = childOffsets[typeId] = unshiftedOffsets[typeId];
                    }
                    shiftedOffsets[index] = unshiftedOffsets[index] - shift;
                    ++childLengths[typeId];
                }
                addBuffer.call(this, shiftedOffsets);
                // Slice and visit children accordingly
                for (let child, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {
                    if (child = data.children[childIndex]) {
                        const typeId = type.typeIds[childIndex];
                        const childLength = Math.min(length, childLengths[typeId]);
                        this.visit(child.slice(childOffsets[typeId], childLength));
                    }
                }
            }
        }
        return this;
    }
    /** @ignore */
    function assembleBoolVector(data) {
        // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed
        let values;
        if (data.nullCount >= data.length) {
            // If all values are null, just insert a placeholder empty data buffer (fastest path)
            return addBuffer.call(this, new Uint8Array(0));
        }
        else if ((values = data.values) instanceof Uint8Array) {
            // If values is already a Uint8Array, slice the bitmap (fast path)
            return addBuffer.call(this, truncateBitmap(data.offset, data.length, values));
        }
        // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the
        // values as bools and re-pack them into a Uint8Array. This code isn't
        // reachable unless you're trying to manipulate the Data internals,
        // we're only doing this for safety.
        /* istanbul ignore next */
        return addBuffer.call(this, packBools(data.values));
    }
    /** @ignore */
    function assembleFlatVector(data) {
        return addBuffer.call(this, data.values.subarray(0, data.length * data.stride));
    }
    /** @ignore */
    function assembleFlatListVector(data) {
        const { length, values, valueOffsets } = data;
        const firstOffset = valueOffsets[0];
        const lastOffset = valueOffsets[length];
        const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);
        // Push in the order FlatList types read their buffers
        addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first
        addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second
        return this;
    }
    /** @ignore */
    function assembleListVector(data) {
        const { length, valueOffsets } = data;
        // If we have valueOffsets (MapVector, ListVector), push that buffer first
        if (valueOffsets) {
            addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));
        }
        // Then insert the List's values child
        return this.visit(data.children[0]);
    }
    /** @ignore */
    function assembleNestedVector(data) {
        return this.visitMany(data.type.children.map((_, i) => data.children[i]).filter(Boolean))[0];
    }
    VectorAssembler.prototype.visitBool = assembleBoolVector;
    VectorAssembler.prototype.visitInt = assembleFlatVector;
    VectorAssembler.prototype.visitFloat = assembleFlatVector;
    VectorAssembler.prototype.visitUtf8 = assembleFlatListVector;
    VectorAssembler.prototype.visitBinary = assembleFlatListVector;
    VectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;
    VectorAssembler.prototype.visitDate = assembleFlatVector;
    VectorAssembler.prototype.visitTimestamp = assembleFlatVector;
    VectorAssembler.prototype.visitTime = assembleFlatVector;
    VectorAssembler.prototype.visitDecimal = assembleFlatVector;
    VectorAssembler.prototype.visitList = assembleListVector;
    VectorAssembler.prototype.visitStruct = assembleNestedVector;
    VectorAssembler.prototype.visitUnion = assembleUnion;
    VectorAssembler.prototype.visitInterval = assembleFlatVector;
    VectorAssembler.prototype.visitFixedSizeList = assembleListVector;
    VectorAssembler.prototype.visitMap = assembleListVector;

    // Licensed to the Apache Software Foundation (ASF) under one
    class RecordBatchWriter extends ReadableInterop {
        constructor(options) {
            super();
            this._position = 0;
            this._started = false;
            // @ts-ignore
            this._sink = new AsyncByteQueue();
            this._schema = null;
            this._dictionaryBlocks = [];
            this._recordBatchBlocks = [];
            this._dictionaryDeltaOffsets = new Map();
            isObject$1(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });
            this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;
            this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;
        }
        /** @nocollapse */
        // @ts-ignore
        static throughNode(options) {
            throw new Error(`"throughNode" not available in this environment`);
        }
        /** @nocollapse */
        static throughDOM(
        // @ts-ignore
        writableStrategy, 
        // @ts-ignore
        readableStrategy) {
            throw new Error(`"throughDOM" not available in this environment`);
        }
        toString(sync = false) {
            return this._sink.toString(sync);
        }
        toUint8Array(sync = false) {
            return this._sink.toUint8Array(sync);
        }
        writeAll(input) {
            if (isPromise(input)) {
                return input.then((x) => this.writeAll(x));
            }
            else if (isAsyncIterable(input)) {
                return writeAllAsync(this, input);
            }
            return writeAll(this, input);
        }
        get closed() { return this._sink.closed; }
        [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }
        toDOMStream(options) { return this._sink.toDOMStream(options); }
        toNodeStream(options) { return this._sink.toNodeStream(options); }
        close() {
            return this.reset()._sink.close();
        }
        abort(reason) {
            return this.reset()._sink.abort(reason);
        }
        finish() {
            this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);
            return this;
        }
        reset(sink = this._sink, schema = null) {
            if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {
                this._sink = sink;
            }
            else {
                this._sink = new AsyncByteQueue();
                if (sink && isWritableDOMStream(sink)) {
                    this.toDOMStream({ type: 'bytes' }).pipeTo(sink);
                }
                else if (sink && isWritableNodeStream(sink)) {
                    this.toNodeStream({ objectMode: false }).pipe(sink);
                }
            }
            if (this._started && this._schema) {
                this._writeFooter(this._schema);
            }
            this._started = false;
            this._dictionaryBlocks = [];
            this._recordBatchBlocks = [];
            this._dictionaryDeltaOffsets = new Map();
            if (!schema || !(compareSchemas(schema, this._schema))) {
                if (schema == null) {
                    this._position = 0;
                    this._schema = null;
                }
                else {
                    this._started = true;
                    this._schema = schema;
                    this._writeSchema(schema);
                }
            }
            return this;
        }
        write(payload) {
            let schema = null;
            if (!this._sink) {
                throw new Error(`RecordBatchWriter is closed`);
            }
            else if (payload == null) {
                return this.finish() && undefined;
            }
            else if (payload instanceof Table$1 && !(schema = payload.schema)) {
                return this.finish() && undefined;
            }
            else if (payload instanceof RecordBatch && !(schema = payload.schema)) {
                return this.finish() && undefined;
            }
            if (schema && !compareSchemas(schema, this._schema)) {
                if (this._started && this._autoDestroy) {
                    return this.close();
                }
                this.reset(this._sink, schema);
            }
            if (payload instanceof RecordBatch) {
                if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {
                    this._writeRecordBatch(payload);
                }
            }
            else if (payload instanceof Table$1) {
                this.writeAll(payload.batches);
            }
            else if (isIterable(payload)) {
                this.writeAll(payload);
            }
        }
        _writeMessage(message, alignment = 8) {
            const a = alignment - 1;
            const buffer = Message$1.encode(message);
            const flatbufferSize = buffer.byteLength;
            const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;
            const alignedSize = (flatbufferSize + prefixSize + a) & ~a;
            const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;
            if (message.headerType === MessageHeader.RecordBatch) {
                this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));
            }
            else if (message.headerType === MessageHeader.DictionaryBatch) {
                this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));
            }
            // If not in legacy pre-0.15.0 mode, write the stream continuation indicator
            if (!this._writeLegacyIpcFormat) {
                this._write(Int32Array.of(-1));
            }
            // Write the flatbuffer size prefix including padding
            this._write(Int32Array.of(alignedSize - prefixSize));
            // Write the flatbuffer
            if (flatbufferSize > 0) {
                this._write(buffer);
            }
            // Write any padding
            return this._writePadding(nPaddingBytes);
        }
        _write(chunk) {
            if (this._started) {
                const buffer = toUint8Array(chunk);
                if (buffer && buffer.byteLength > 0) {
                    this._sink.write(buffer);
                    this._position += buffer.byteLength;
                }
            }
            return this;
        }
        _writeSchema(schema) {
            return this._writeMessage(Message$1.from(schema));
        }
        // @ts-ignore
        _writeFooter(schema) {
            // eos bytes
            return this._writeLegacyIpcFormat
                ? this._write(Int32Array.of(0))
                : this._write(Int32Array.of(-1, 0));
        }
        _writeMagic() {
            return this._write(MAGIC);
        }
        _writePadding(nBytes) {
            return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;
        }
        _writeRecordBatch(batch) {
            const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);
            const recordBatch = new RecordBatch$2(batch.numRows, nodes, bufferRegions);
            const message = Message$1.from(recordBatch, byteLength);
            return this
                ._writeDictionaries(batch)
                ._writeMessage(message)
                ._writeBodyBuffers(buffers);
        }
        _writeDictionaryBatch(dictionary, id, isDelta = false) {
            this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));
            const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(new Vector([dictionary]));
            const recordBatch = new RecordBatch$2(dictionary.length, nodes, bufferRegions);
            const dictionaryBatch = new DictionaryBatch$1(recordBatch, id, isDelta);
            const message = Message$1.from(dictionaryBatch, byteLength);
            return this
                ._writeMessage(message)
                ._writeBodyBuffers(buffers);
        }
        _writeBodyBuffers(buffers) {
            let buffer;
            let size, padding;
            for (let i = -1, n = buffers.length; ++i < n;) {
                if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {
                    this._write(buffer);
                    if ((padding = ((size + 7) & ~7) - size) > 0) {
                        this._writePadding(padding);
                    }
                }
            }
            return this;
        }
        _writeDictionaries(batch) {
            for (let [id, dictionary] of batch.dictionaries) {
                let offset = this._dictionaryDeltaOffsets.get(id) || 0;
                if (offset === 0 || (dictionary = dictionary === null || dictionary === void 0 ? void 0 : dictionary.slice(offset)).length > 0) {
                    for (const data of dictionary.data) {
                        this._writeDictionaryBatch(data, id, offset > 0);
                        offset += data.length;
                    }
                }
            }
            return this;
        }
    }
    /** @ignore */
    class RecordBatchStreamWriter extends RecordBatchWriter {
        /** @nocollapse */
        static writeAll(input, options) {
            const writer = new RecordBatchStreamWriter(options);
            if (isPromise(input)) {
                return input.then((x) => writer.writeAll(x));
            }
            else if (isAsyncIterable(input)) {
                return writeAllAsync(writer, input);
            }
            return writeAll(writer, input);
        }
    }
    /** @ignore */
    class RecordBatchFileWriter extends RecordBatchWriter {
        /** @nocollapse */
        static writeAll(input) {
            const writer = new RecordBatchFileWriter();
            if (isPromise(input)) {
                return input.then((x) => writer.writeAll(x));
            }
            else if (isAsyncIterable(input)) {
                return writeAllAsync(writer, input);
            }
            return writeAll(writer, input);
        }
        constructor() {
            super();
            this._autoDestroy = true;
        }
        // @ts-ignore
        _writeSchema(schema) {
            return this._writeMagic()._writePadding(2);
        }
        _writeFooter(schema) {
            const buffer = Footer_.encode(new Footer_(schema, MetadataVersion.V4, this._recordBatchBlocks, this._dictionaryBlocks));
            return super
                ._writeFooter(schema) // EOS bytes for sequential readers
                ._write(buffer) // Write the flatbuffer
                ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix
                ._writeMagic(); // then the magic suffix
        }
    }
    /** @ignore */
    function writeAll(writer, input) {
        let chunks = input;
        if (input instanceof Table$1) {
            chunks = input.batches;
            writer.reset(undefined, input.schema);
        }
        for (const batch of chunks) {
            writer.write(batch);
        }
        return writer.finish();
    }
    /** @ignore */
    function writeAllAsync(writer, batches) {
        var batches_1, batches_1_1;
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                for (batches_1 = __asyncValues(batches); batches_1_1 = yield batches_1.next(), !batches_1_1.done;) {
                    const batch = batches_1_1.value;
                    writer.write(batch);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (batches_1_1 && !batches_1_1.done && (_a = batches_1.return)) yield _a.call(batches_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return writer.finish();
        });
    }

    // Licensed to the Apache Software Foundation (ASF) under one
    function tableFromIPC(input) {
        const reader = RecordBatchReader.from(input);
        if (isPromise(reader)) {
            return reader.then((reader) => tableFromIPC(reader));
        }
        if (reader.isAsync()) {
            return reader.readAll().then((xs) => new Table$1(xs));
        }
        return new Table$1(reader.readAll());
    }
    /**
     * Serialize a {@link Table} to the IPC format. This function is a convenience
     * wrapper for {@link RecordBatchStreamWriter} and {@link RecordBatchFileWriter}.
     * Opposite of {@link tableFromIPC}.
     *
     * @param table The Table to serialize.
     * @param type Whether to serialize the Table as a file or a stream.
     */
    function tableToIPC(table, type = 'stream') {
        return (type === 'stream' ? RecordBatchStreamWriter : RecordBatchFileWriter)
            .writeAll(table)
            .toUint8Array(true);
    }

    function ceil64Bytes(length, bpe = 1) {
      return ((((length * bpe) + 63) & ~63) || 64) / bpe;
    }

    function array$3(Type, length, bpe = Type.BYTES_PER_ELEMENT) {
      return new Type(ceil64Bytes(length, bpe));
    }

    function arrowData(d) {
      return d instanceof Data
        ? d
        : new Data(d.type, 0, d.length, d.nulls, d.buffers, null, d.dict);
    }

    function arrowVector(data) {
      return new Vector([arrowData(data)]);
    }

    const encoder$1 = new TextEncoder();

    function encode(data, idx, str) {
      const bytes = encoder$1.encode(str);
      data.set(bytes, idx);
      return bytes.length;
    }

    function encodeInto(data, idx, str) {
      return encoder$1.encodeInto(str, data.subarray(idx)).written;
    }

    const writeUtf8 = encoder$1.encodeInto ? encodeInto : encode;

    function arrayBuilder(type, length) {
      const data = array$3(type.ArrayType, length);
      return {
        set(value, index) { data[index] = value; },
        data: () => ({ type, length, buffers: [null, data] })
      };
    }

    function boolBuilder(type, length) {
      const data = array$3(type.ArrayType, length / 8);
      return {
        set(value, index) {
          if (value) data[index >> 3] |= (1 << (index % 8));
        },
        data: () => ({ type, length, buffers: [null, data] })
      };
    }

    function dateDayBuilder(type, length) {
      const data = array$3(type.ArrayType, length);
      return {
        set(value, index) { data[index] = (value / 86400000) | 0; },
        data: () => ({ type, length, buffers: [null, data] })
      };
    }

    function dateMillisBuilder(type, length) {
      const data = array$3(type.ArrayType, length << 1);
      return {
        set(value, index) {
          const i = index << 1;
          data[  i] = (value % 4294967296) | 0;
          data[i+1] = (value / 4294967296) | 0;
        },
        data: () => ({ type, length, buffers: [null, data] })
      };
    }

    function defaultBuilder(type) {
      const b = makeBuilder({
        type,
        nullValues: [null, undefined]
      });
      return {
        set(value, index) { b.set(index, value); },
        data: () => b.finish().flush()
      };
    }

    function utf8Builder(type, length, strlen) {
      const offset = array$3(Int32Array, length + 1);
      const buf = array$3(Uint8Array, 3 * strlen);

      let idx = 0;

      return {
        set(value, index) {
          idx += writeUtf8(buf, idx, value);
          offset[index + 1] = idx;
        },
        data: () => {
          // slice utf buffer if over-allocated
          const dlen = ceil64Bytes(idx);
          const data = buf.length > dlen ? buf.subarray(0, dlen) : buf;
          return { type, length, buffers: [offset, data] };
        }
      };
    }

    function dictionaryBuilder(type, length) {
      const values = [];
      const data = array$3(type.indices.ArrayType, length);
      const keys = Object.create(null);

      let next = -1;
      let strlen = 0;

      return {
        set(value, index) {
          const v = String(value);
          let k = keys[v];
          if (k === undefined) {
            strlen += v.length;
            keys[v] = k = ++next;
            values.push(v);
          }
          data[index] = k;
        },
        data: () => ({
          type,
          length,
          buffers: [null, data],
          dict: dictionary(type.dictionary, values, strlen)
        })
      };
    }

    function dictionary(type, values, strlen) {
      const b = utf8Builder(type, values.length, strlen);
      values.forEach(b.set);
      return arrowVector(b.data());
    }

    function validBuilder(builder, length) {
      const valid = array$3(Uint8Array, length / 8);
      let nulls = 0;

      return {
        set(value, index) {
          if (value == null) {
            ++nulls;
          } else {
            builder.set(value, index);
            valid[index >> 3] |= (1 << (index % 8));
          }
        },
        data: () => {
          const d = builder.data();
          if (nulls) {
            d.nulls = nulls;
            d.buffers[2] = valid;
          }
          return d;
        }
      };
    }

    function builder(type, nrows, nullable = true) {
      let method;

      switch (type.typeId) {
        case Type.Int:
          method = type.bitWidth < 64 ? arrayBuilder : null;
          break;
        case Type.Float:
          method = type.precision > 0 ? arrayBuilder : null;
          break;
        case Type.Dictionary:
          // check sub-types against builder assumptions
          // if check fails, fallback to default builder
          method = (
            type.dictionary.typeId === Type.Utf8 &&
            type.indices.typeId === Type.Int &&
            type.indices.bitWidth < 64
          ) ? dictionaryBuilder : null;
          break;
        case Type.Bool:
          method = boolBuilder;
          break;
        case Type.Date:
          method = type.unit ? dateMillisBuilder : dateDayBuilder;
          break;
      }

      return method == null ? defaultBuilder(type)
        : nullable ? validBuilder(method(type, nrows), nrows)
        : method(type, nrows);
    }

    function dataFromArray(array, type) {
      const length = array.length;
      const size = ceil64Bytes(length, array.BYTES_PER_ELEMENT);

      let data = array;
      if (length !== size) {
        data = new array.constructor(size);
        data.set(array);
      }

      return arrowData({ type, length, buffers: [null, data] });
    }

    function dataFromScan(nrows, scan, column, type, nullable = true) {
      const b = builder(type, nrows, nullable);
      scan(column, b.set);
      return arrowData(b.data());
    }

    function resolveType(type) {
      if (type instanceof DataType || type == null) {
        return type;
      }

      switch (type) {
        case Type.Binary:
          return new Binary();
        case Type.Bool:
          return new Bool();
        case Type.DateDay:
          return new DateDay();
        case Type.DateMillisecond:
        case Type.Date:
          return new DateMillisecond();
        case Type.Dictionary:
          return new Dictionary$1(new Utf8(), new Int32());
        case Type.Float16:
          return new Float16();
        case Type.Float32:
          return new Float32();
        case Type.Float64:
        case Type.Float:
          return new Float64();
        case Type.Int8:
          return new Int8();
        case Type.Int16:
          return new Int16();
        case Type.Int32:
        case Type.Int:
          return new Int32();
        case Type.Int64:
          return new Int64();
        case Type.IntervalDayTime:
          return new IntervalDayTime();
        case Type.Interval:
        case Type.IntervalYearMonth:
          return new IntervalYearMonth();
        case Type.Null:
          return new Null();
        case Type.TimeMicrosecond:
          return new TimeMicrosecond();
        case Type.TimeMillisecond:
        case Type.Time:
          return new TimeMillisecond();
        case Type.TimeNanosecond:
          return new TimeNanosecond();
        case Type.TimeSecond:
          return new TimeSecond();
        case Type.Uint8:
          return new Uint8();
        case Type.Uint16:
          return new Uint16();
        case Type.Uint32:
          return new Uint32();
        case Type.Uint64:
          return new Uint64();
        case Type.Utf8:
          return new Utf8();
        default:
          error(
            `Unsupported type code: ${toString(type)}. ` +
            'Use a data type constructor instead?'
          );
      }
    }

    function isExactUTCDate(d) {
      return d.getUTCHours() === 0
        && d.getUTCMinutes() === 0
        && d.getUTCSeconds() === 0
        && d.getUTCMilliseconds() === 0;
    }

    function profile(scan, column) {
      const p = profiler();
      scan(column, p.add);
      return p;
    }

    function profiler() {
      const p = {
        count: 0,
        nulls: 0,
        bools: 0,
        nums: 0,
        ints: 0,
        bigints: 0,
        min: Infinity,
        max: -Infinity,
        digits: 0,
        dates: 0,
        utcdays: 0,
        strings: 0,
        strlen: 0,
        arrays: 0,
        minlen: Infinity,
        maxlen: 0,
        structs: 0,

        add(value) {
          ++p.count;
          if (value == null) {
            ++p.nulls;
            return;
          }

          const type = typeof value;
          if (type === 'string') {
            ++p.strings;
          } else if (type === 'number') {
            ++p.nums;
            if (value < p.min) p.min = value;
            if (value > p.max) p.max = value;
            if (Number.isInteger(value)) ++p.ints;
          } else if (type === 'boolean') {
            ++p.bools;
          } else if (type === 'object') {
            if (isDate(value)) {
              ++p.dates;
              if (isExactUTCDate(value)) {
                ++p.utcdays;
              }
            } else if (isArrayType(value)) {
              ++p.arrays;
              if (value.length < p.minlen) p.minlen = value.length;
              if (value.length > p.maxlen) p.maxlen = value.length;
              const ap = p.array_prof || (p.array_prof = profiler());
              value.forEach(ap.add);
            } else {
              ++p.structs;
              const sp = p.struct_prof || (p.struct_prof = {});
              for (const key in value) {
                const fp = sp[key] || (sp[key] = profiler());
                fp.add(value[key]);
              }
            }
          } else if (type === 'bigint') {
            ++p.bigints;
            if (value < p.min) p.min = value;
            if (value > p.max) p.max = value;
          }
        },
        type() {
          return resolveType(infer(p));
        }
      };

      return p;
    }

    function infer(p) {
      const valid = p.count - p.nulls;

      if (valid === 0) {
        return Type.Null;
      }
      else if (p.ints === valid) {
        const v = Math.max(Math.abs(p.min) - 1, p.max);
        return p.min < 0
          ? v >= 2 ** 31 ? Type.Float64
            : v < (1 << 7) ? Type.Int8 : v < (1 << 15) ? Type.Int16 : Type.Int32
          : v >= 2 ** 32 ? Type.Float64
            : v < (1 << 8) ? Type.Uint8 : v < (1 << 16) ? Type.Uint16 : Type.Uint32;
      }
      else if (p.nums === valid) {
        return Type.Float64;
      }
      else if (p.bigints === valid) {
        const v = -p.min > p.max ? -p.min - 1n : p.max;
        return p.min < 0
          ? v < 2 ** 63 ? Type.Int64
            : error(`BigInt exceeds 64 bits: ${v}`)
          : p.max < 2 ** 64 ? Type.Uint64
            : error(`BigInt exceeds 64 bits: ${p.max}`);
      }
      else if (p.bools === valid) {
        return Type.Bool;
      }
      else if (p.utcdays === valid) {
        return Type.DateDay;
      }
      else if (p.dates === valid) {
        return Type.DateMillisecond;
      }
      else if (p.arrays === valid) {
        const type = Field$1.new('value', p.array_prof.type(), true);
        return p.minlen === p.maxlen
          ? new FixedSizeList(p.minlen, type)
          : new List(type);
      }
      else if (p.structs === valid) {
        const sp = p.struct_prof;
        return new Struct(
          Object.keys(sp).map(name => Field$1.new(name, sp[name].type(), true))
        );
      }
      else if (p.strings > 0) {
        return Type.Dictionary;
      }
      else {
        error('Type inference failure');
      }
    }

    function dataFromObjects(data, name, nrows, scan, type, nullable = true) {
      type = resolveType(type);

      // perform type inference if needed
      if (!type) {
        const p = profile(scan, name);
        nullable = p.nulls > 0;
        type = p.type();
      }

      return dataFromScan(nrows, scan, name, type, nullable);
    }

    function dataFromTable(table, name, nrows, scan, type, nullable = true) {
      type = resolveType(type);
      const column = table.column(name);
      const reified = !(table.isFiltered() || table.isOrdered());

      // use existing arrow data if types match
      const vec = arrowVector$1(column);
      if (vec && reified && typeCompatible(vec.type, type)) {
        return vec;
      }

      // if backing data is a typed array, leverage that
      const data = column.data;
      if (isTypedArray(data)) {
        const dtype = typeFromArray(data);
        if (reified && dtype && typeCompatible(dtype, type)) {
          return dataFromArray(data, dtype);
        } else {
          type = type || dtype;
          nullable = false;
        }
      }

      // perform type inference if needed
      if (!type) {
        const p = profile(scan, column);
        nullable = p.nulls > 0;
        type = p.type();
      }

      return dataFromScan(nrows, scan, column, type, nullable);
    }

    function arrowVector$1(value) {
      return value instanceof Vector ? value
        : value.vector instanceof Vector ? value.vector
        : null;
    }

    function typeFromArray(data) {
      const types = {
        Float32Array:    Float32,
        Float64Array:    Float64,
        Int8Array:       Int8,
        Int16Array:      Int16,
        Int32Array:      Int32,
        Uint8Array:      Uint8,
        Uint16Array:     Uint16,
        Uint32Array:     Uint32,
        BigInt64Array:   Int64,
        BigUint64Array:  Uint64
      };
      const Type = types[data.constructor.name];
      return Type ? new Type() : null;
    }

    function typeCompatible(a, b) {
      return !a || !b ? true : a.compareTo(b);
    }

    function scanArray(data, limit, offset) {
      const n = Math.min(data.length, offset + limit);
      return (name, visit) => {
        for (let i = offset; i < n; ++i) {
          visit(data[i][name], i);
        }
      };
    }

    function scanTable(table, limit, offset) {
      const scanAll = offset === 0 && table.numRows() <= limit
                   && !table.isFiltered() && !table.isOrdered();

      return (column, visit) => {
        let i = -1;
        scanAll && isArrayType(column.data)
          ? column.data.forEach(visit)
          : table.scan(
              row => visit(column.get(row), ++i),
              true, limit, offset
            );
      };
    }

    const fail = () => error(
      'Apache Arrow not imported, ' +
      'see https://github.com/uwdata/arquero#usage'
    );

    function table() {
      // trap access to provide a helpful message
      // when Apache Arrow has not been imported
      try {
        return Table$1;
      } catch (err) {
        fail();
      }
    }

    function fromIPC() {
      // trap access to provide a helpful message
      // when Apache Arrow has not been imported
      try {
        return tableFromIPC;
      } catch (err) {
        fail();
      }
    }

    /**
     * Options for Arrow encoding.
     * @typedef {object} ArrowFormatOptions
     * @property {number} [limit=Infinity] The maximum number of rows to include.
     * @property {number} [offset=0] The row offset indicating how many initial
     *  rows to skip.
     * @property {string[]|(data: object) => string[]} [columns] Ordered list of
     *  column names to include. If function-valued, the function should accept
     *  a dataset as input and return an array of column name strings.
     * @property {object} [types] The Arrow data types to use. If specified,
     *  the input should be an object with column names for keys and Arrow data
     *  types for values. If a column type is not explicitly provided, type
     *  inference will be performed to guess an appropriate type.
     */

    /**
     * Create an Apache Arrow table for an input dataset.
     * @param {Array|object} data An input dataset to convert to Arrow format.
     *  If array-valued, the data should consist of an array of objects where
     *  each entry represents a row and named properties represent columns.
     *  Otherwise, the input data should be an Arquero table.
     * @param {ArrowFormatOptions} [options] Encoding options, including
     *  column data types.
     * @return {Table} An Apache Arrow Table instance.
     */
    function toArrow(data, options = {}) {
      const { types = {} } = options;
      const { dataFrom, names, nrows, scan } = init$1(data, options);
      const cols = {};
      names.forEach(name => {
        const col = dataFrom(data, name, nrows, scan, types[name]);
        if (col.length !== nrows) {
          error('Column length mismatch');
        }
        cols[name] = col;
      });
      const T = table();
      return new T(cols);
    }

    function init$1(data, options) {
      const { columns, limit = Infinity, offset = 0 } = options;
      const names = isFunction(columns) ? columns(data)
        : isArray(columns) ? columns
        : null;
      if (isArray(data)) {
        return {
          dataFrom: dataFromObjects,
          names: names || Object.keys(data[0]),
          nrows: Math.min(limit, data.length - offset),
          scan: scanArray(data, limit, offset)
        };
      } else if (isTable(data)) {
        return {
          dataFrom: dataFromTable,
          names: names || data.columnNames(),
          nrows: Math.min(limit, data.numRows() - offset),
          scan: scanTable(data, limit, offset)
        };
      } else {
        error('Unsupported input data type');
      }
    }

    function isTable(data) {
      return data && isFunction(data.reify);
    }

    function toArrowIPC(table, options) {
      return tableToIPC(toArrow(table, options));
    }

    function isExactDateUTC(d) {
      return d.getUTCHours() === 0
        && d.getUTCMinutes() === 0
        && d.getUTCSeconds() === 0
        && d.getUTCMilliseconds() === 0;
    }

    function inferFormat(scan, options = {}) {
      let count = 0;
      let nulls = 0;
      let dates = 0;
      let dutcs = 0;
      let nums = 0;
      let digits = 0;

      scan(value => {
        ++count;
        if (value == null) {
          ++nulls;
          return;
        }

        const type = typeof value;
        if (type === 'object' && isDate(value)) {
          ++dates;
          if (isExactDateUTC(value)) ++dutcs;
        } else if (type === 'number') {
          ++nums;
          if (value === value &&  (value | 0) !== value) {
            const s = value + '';
            const p = s.indexOf('.');
            if (p >= 0) {
              const e = s.indexOf('e');
              const l = e > 0 ? e : s.length;
              digits = Math.max(digits, l - p - 1);
            }
          }
        }
      });

      return {
        align:  (nulls + nums + dates) / count > 0.5 ? 'r' : 'l',
        format: {
          utc:    dates === dutcs,
          digits: Math.min(digits, options.maxdigits || 6)
        }
      };
    }

    /**
     * Column selection function.
     * @typedef {(table: Table) => string[]} ColumnSelectFunction
     */

    /**
     * Column selection options.
     * @typedef {string[]|ColumnSelectFunction} ColumnSelectOptions
     */

    /**
     * Column format options. The object keys should be column names.
     * The object values should be formatting functions or objects.
     * If specified, these override any automatically inferred options.
     * @typedef {Object.<string, import('./value').ValueFormatOptions} ColumnFormatOptions
     */

    /**
     * Column alignment options. The object keys should be column names.
     * The object values should be aligment strings, one of 'l' (left),
     * 'c' (center), or 'r' (right).
     * If specified, these override any automatically inferred options.
     * @typedef {Object.<string, 'l'|'c'|'r'>} ColumnAlignOptions
     */

    function columns(table, names) {
      return isFunction(names)
        ? names(table)
        : names || table.columnNames();
    }

    function formats(table, names, options) {
      const formatOpt = options.format || {};
      const alignOpt = options.align || {};
      const format = {};
      const align = {};

      names.forEach(name => {
        const auto = inferFormat(values(table, name), options);
        align[name] = alignOpt[name] || auto.align;
        format[name] = formatOpt[name] || auto.format;
      });

      return { align, format };
    }

    function values(table, columnName) {
      const column = table.column(columnName);
      return fn => table.scan(row => fn(column.get(row)));
    }

    function scan(table, names, limit = 100, offset, ctx) {
      const data = table.data();
      const n = names.length;
      table.scan(row => {
        ctx.row(row);
        for (let i = 0; i < n; ++i) {
          const name = names[i];
          ctx.cell(data[names[i]].get(row), name, i);
        }
      }, true, limit, offset);
    }

    /**
     * Options for CSV formatting.
     * @typedef {object} CSVFormatOptions
     * @property {string} [delimiter=','] The delimiter between values.
     * @property {number} [limit=Infinity] The maximum number of rows to print.
     * @property {number} [offset=0] The row offset indicating how many initial rows to skip.
     * @property {import('./util').ColumnSelectOptions} [columns] Ordered list
     *  of column names to include. If function-valued, the function should
     *  accept a table as input and return an array of column name strings.
     * @property {Object.<string, (value: any) => any>} [format] Object of column
     *  format options. The object keys should be column names. The object values
     *  should be formatting functions to invoke to transform column values prior
     *  to output. If specified, these override automatically inferred options.
     */

    /**
     * Format a table as a comma-separated values (CSV) string. Other
     * delimiters, such as tabs or pipes ('|'), can be specified using
     * the options argument.
     * @param {ColumnTable} table The table to format.
     * @param {CSVFormatOptions} options The formatting options.
     * @return {string} A delimited-value format string.
     */
    function toCSV(table, options = {}) {
      const names = columns(table, options.columns);
      const format = options.format || {};
      const delim = options.delimiter || ',';
      const reFormat = new RegExp(`["${delim}\n\r]`);

      const formatValue = value => value == null ? ''
        : isDate(value) ? formatUTCDate(value, true)
        : reFormat.test(value += '') ? '"' + value.replace(/"/g, '""') + '"'
        : value;

      const vals = names.map(formatValue);
      let text = '';

      scan(table, names, options.limit || Infinity, options.offset, {
        row() {
          text += vals.join(delim) + '\n';
        },
        cell(value, name, index) {
          vals[index] = formatValue(format[name] ? format[name](value) : value);
        }
      });

      return text + vals.join(delim);
    }

    /**
     * Column format object.
     * @typedef {object} ValueFormatObject
     * @property {boolean} [utc=false] If true, format dates in UTC time.
     * @property {number} [digits=0] The number of fractional digits to include
     *  when formatting numbers.
     * @property {number} [maxlen=30] The maximum string length for formatting
     *  nested object or array values.
     */

    /**
     * @callback ValueFormatFunction
     * @param {*} value The value to format.
     * @return {*} A string-coercible or JSON-compatible formatted value.
     */

    /**
     * Value format options.
     * @typedef {ValueFormatObject|ValueFormatFunction} ValueFormatOptions
     */

    /**
     * Format a value as a string.
     * @param {*} v The value to format.
     * @param {ValueFormatOptions} options Formatting options.
     * @return {string} The formatted string.
     */
    function formatValue(v, options = {}) {
      if (isFunction(options)) {
        return options(v) + '';
      }

      const type = typeof v;

      if (type === 'object') {
        if (isDate(v)) {
          return options.utc ? formatUTCDate(v) : formatDate(v);
        } else {
          const s = JSON.stringify(
            v,
            (k, v) => isTypedArray(v) ? Array.from(v) : v
          );
          const maxlen = options.maxlen || 30;
          return s.length > maxlen
            ? s.slice(0, 28) + '\u2026' + (s[0] === '[' ? ']' : '}')
            : s;
        }
      } else if (type === 'number') {
        const digits = options.digits || 0;
        let a;
        return v !== 0 && ((a = Math.abs(v)) >= 1e18 || a < Math.pow(10, -digits))
          ? v.toExponential(digits)
          : v.toFixed(digits);
      } else {
        return v + '';
      }
    }

    function map$1(obj, fn, output = {}) {
      for (const key in obj) {
        output[key] = fn(obj[key], key);
      }
      return output;
    }

    /**
     * Null format function.
     * @callback NullFormat
     * @param {null|undefined} [value] The value to format.
     * @return {string} The formatted HTML string.
     */

    /**
     * CSS style function.
     * @callback StyleFunction
     * @param {string} name The column name.
     * @param {number} row The table row index.
     * @return {string} A CSS style string.
     */

    /**
     * CSS style options.
     * @typedef {Object.<string, string | StyleFunction>} StyleOptions
     */

    /**
     * Options for HTML formatting.
     * @typedef {object} HTMLFormatOptions
     * @property {number} [limit=Infinity] The maximum number of rows to print.
     * @property {number} [offset=0] The row offset indicating how many initial rows to skip.
     * @property {import('./util').ColumnSelectOptions} [columns] Ordered list
     *  of column names to include. If function-valued, the function should
     *  accept a table as input and return an array of column name strings.
     * @property {import('./util').ColumnAlignOptions} [align] Object of column
     *  alignment options. The object keys should be column names. The object
     *  values should be aligment strings, one of 'l' (left), 'c' (center), or
     *  'r' (right). If specified, these override automatically inferred options.
     * @property {import('./util').ColumnFormatOptions} [format] Object of column
     *  format options. The object keys should be column names. The object values
     *  should be formatting functions or specification objects. If specified,
     *  these override automatically inferred options.
     * @property {NullFormat} [null] Format function for null or undefined values.
     *  If specified, this function will be invoked with the null or undefined
     *  value as the sole input, and the return value will be used as the HTML
     *  output for the value.
     * @property {StyleOptions} [style] CSS styles to include in HTML output.
     *  The object keys should be HTML table tag names: 'table', 'thead',
     *  'tbody', 'tr', 'th', or 'td'. The object values should be strings of
     *  valid CSS style directives (such as "font-weight: bold;") or functions
     *  that take a column name and row as inputs and return a CSS string.
     * @property {number} [maxdigits=6] The maximum number of fractional digits
     *  to include when formatting numbers. This option is passed to the format
     *  inference method and is overridden by any explicit format options.
     */

    /**
     * Format a table as an HTML table string.
     * @param {ColumnTable} table The table to format.
     * @param {HTMLFormatOptions} options The formatting options.
     * @return {string} An HTML table string.
     */
    function toHTML(table, options = {}) {
      const names = columns(table, options.columns);
      const { align, format } = formats(table, names, options);
      const style = styles(options);
      const nullish = options.null;

      const alignValue = a => a === 'c' ? 'center' : a === 'r' ? 'right' : 'left';
      const escape = s => s.replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
      const baseFormat = (value, opt) => escape(formatValue(value, opt));
      const formatter = nullish
        ? (value, opt) => value == null ? nullish(value) : baseFormat(value, opt)
        : baseFormat;

      let r = -1;
      let idx = -1;

      const tag = (tag, name, shouldAlign) => {
        const a = shouldAlign ? alignValue(align[name]) : '';
        const s = style[tag] ? (style[tag](name, idx, r) || '') : '';
        const css = (a ? (`text-align: ${a};` + (s ? ' ' : '')) : '') + s;
        return `<${tag}${css ? ` style="${css}"` : ''}>`;
      };

      let text = tag('table')
        + tag('thead')
        + tag('tr', r)
        + names.map(name => `${tag('th', name, 1)}${name}</th>`).join('')
        + '</tr></thead>'
        + tag('tbody');

      scan(table, names, options.limit, options.offset, {
        row(row) {
          r = row;
          text += (++idx ? '</tr>' : '') + tag('tr');
        },
        cell(value, name) {
          text += tag('td', name, 1)
            + formatter(value, format[name])
            + '</td>';
        }
      });

      return text + '</tr></tbody></table>';
    }

    function styles(options) {
      return map$1(
        options.style,
        value => isFunction(value) ? value : () => value
      );
    }

    function defaultTrue(value, trueValue = true, falseValue = false) {
      return (value === undefined || value) ? trueValue : falseValue;
    }

    /**
     * Options for JSON formatting.
     * @typedef {object} JSONFormatOptions
     * @property {number} [limit=Infinity] The maximum number of rows to print.
     * @property {number} [offset=0] The row offset indicating how many initial
     *  rows to skip.
     * @property {boolean} [schema=true] Flag indicating if table schema metadata
     *  should be included in the JSON output. If false, only the data payload
     *  is included.
     * @property {import('./util').ColumnSelectOptions} [columns] Ordered list
     *  of column names to include. If function-valued, the function should
     *  accept a table as input and return an array of column name strings.
     * @property {Object.<string, (value: any) => any>} [format] Object of column
     *  format options. The object keys should be column names. The object values
     *  should be formatting functions to invoke to transform column values prior
     *  to output. If specified, these override automatically inferred options.
     */

    const defaultFormatter = value => isDate(value)
      ? formatUTCDate(value, true)
      : value;

    /**
     * Format a table as a JavaScript Object Notation (JSON) string.
     * @param {ColumnTable} table The table to format.
     * @param {JSONFormatOptions} options The formatting options.
     * @return {string} A JSON string.
     */
    function toJSON(table, options = {}) {
      const schema = defaultTrue(options.schema);
      const format = options.format || {};
      const names = columns(table, options.columns);
      let text = '{';

      if (schema) {
        text += '"schema":{"fields":'
          + JSON.stringify(names.map(name => ({ name })))
          + '},"data":{';
      }

      names.forEach((name, i) => {
        text += (i ? ',' : '') + JSON.stringify(name) + ':[';

        const column = table.column(name);
        const formatter = format[name] || defaultFormatter;
        let r = -1;
        table.scan(row => {
          const value = column.get(row);
          text += (++r ? ',' : '') + JSON.stringify(formatter(value));
        }, true, options.limit, options.offset);

        text += ']';
      });

      return text + '}' + (schema ? '}' : '');
    }

    /**
     * Options for Markdown formatting.
     * @typedef {object} MarkdownFormatOptions
     * @property {number} [limit=Infinity] The maximum number of rows to print.
     * @property {number} [offset=0] The row offset indicating how many initial rows to skip.
     * @property {import('./util').ColumnSelectOptions} [columns] Ordered list
     *  of column names to include. If function-valued, the function should
     *  accept a table as input and return an array of column name strings.
     * @property {import('./util').ColumnAlignOptions} [align] Object of column
     *  alignment options. The object keys should be column names. The object
     *  values should be aligment strings, one of 'l' (left), 'c' (center), or
     *  'r' (right). If specified, these override automatically inferred options.
     * @property {import('./util').ColumnFormatOptions} [format] Object of column
     *  format options. The object keys should be column names. The object values
     *  should be formatting functions or specification objects. If specified,
     *  these override automatically inferred options.
     * @property {number} [maxdigits=6] The maximum number of fractional digits
     *  to include when formatting numbers. This option is passed to the format
     *  inference method and is overridden by any explicit format options.
     */

    /**
     * Format a table as a GitHub-Flavored Markdown table string.
     * @param {ColumnTable} table The table to format.
     * @param {MarkdownFormatOptions} options The formatting options.
     * @return {string} A GitHub-Flavored Markdown table string.
     */
    function toMarkdown(table, options = {}) {
      const names = columns(table, options.columns);
      const { align, format } = formats(table, names, options);

      const alignValue = a => a === 'c' ? ':-:' : a === 'r' ? '-:' : ':-';
      const escape = s => s.replace(/\|/g, '\\|');

      let text = '|'
        + names.map(escape).join('|')
        + '|\n|'
        + names.map(name => alignValue(align[name])).join('|')
        + '|';

      scan(table, names, options.limit, options.offset, {
        row() {
          text += '\n|';
        },
        cell(value, name) {
          text += escape(formatValue(value, format[name])) + '|';
        }
      });

      return text + '\n';
    }

    function assign(map, pairs) {
      for (const [key, value] of entries(pairs)) {
        map.set(key, value);
      }
      return map;
    }

    function escapeRegExp(str) {
      return str.replace(/[.*+\-?^${}()|[\]\\]/g, '\\$&');
    }

    function resolve(table, sel, map = new Map()) {
      sel = isNumber(sel) ? table.columnName(sel) : sel;

      if (isString(sel)) {
        map.set(sel, sel);
      } else if (isArray(sel)) {
        sel.forEach(r => resolve(table, r, map));
      } else if (isFunction(sel)) {
        resolve(table, sel(table), map);
      } else if (isObject(sel)) {
        assign(map, sel);
      } else {
        error(`Invalid column selection: ${toString(sel)}`);
      }

      return map;
    }

    function decorate(value, toObject) {
      value.toObject = toObject;
      return value;
    }

    function toObject(value) {
      return isArray(value) ? value.map(toObject)
        : value && value.toObject ? value.toObject()
        : value;
    }

    /**
     * Proxy type for SelectHelper function.
     * @typedef {import('../table/transformable').SelectHelper} SelectHelper
     */

    /**
     * Select all columns in a table.
     * Returns a function-valued selection compatible with {@link Table#select}.
     * @return {SelectHelper} Selection function compatible with select().
     */
    function all() {
      return decorate(
        table => table.columnNames(),
        () => ({ all: [] })
      );
    }

    /**
     * Negate a column selection, selecting all other columns in a table.
     * Returns a function-valued selection compatible with {@link Table#select}.
     * @param {...any} selection The selection to negate. May be a column name,
     *  column index, array of either, or a selection function (e.g., from range).
     * @return {SelectHelper} Selection function compatible with select().
     */
    function not(...selection) {
      selection = selection.flat();
      return decorate(
        table => {
          const drop = resolve(table, selection);
          return table.columnNames(name => !drop.has(name));
        },
        () => ({ not: toObject(selection) })
      );
    }

    /**
     * Select a contiguous range of columns.
     * @param {string|number} start The name/index of the first selected column.
     * @param {string|number} end The name/index of the last selected column.
     * @return {SelectHelper} Selection function compatible with select().
     */
    function range(start, end) {
      return decorate(
        table => {
          let i = isNumber(start) ? start : table.columnIndex(start);
          let j = isNumber(end) ? end : table.columnIndex(end);
          if (j < i) { const t = j; j = i; i = t; }
          return table.columnNames().slice(i, j + 1);
        },
        () => ({ range: [start, end] })
      );
    }

    /**
     * Select all columns whose names match a pattern.
     * @param {string|RegExp} pattern A string or regular expression pattern to match.
     * @return {SelectHelper} Selection function compatible with select().
     */
    function matches(pattern) {
      if (isString(pattern)) pattern = RegExp(escapeRegExp(pattern));
      return decorate(
        table => table.columnNames(name => pattern.test(name)),
        () => ({ matches: [pattern.source, pattern.flags] })
      );
    }

    /**
     * Select all columns whose names start with a string.
     * @param {string} string The string to match at the start of the column name.
     * @return {SelectHelper} Selection function compatible with select().
     */
    function startswith(string) {
      return matches(RegExp('^' + escapeRegExp(string)));
    }

    /**
     * Select all columns whose names end with a string.
     * @param {string} string The string to match at the end of the column name.
     * @return {SelectHelper} Selection function compatible with select().
     */
    function endswith(string) {
      return matches(RegExp(escapeRegExp(string) + '$'));
    }

    function arrayType(column) {
      return isTypedArray(column.data) ? column.data.constructor : Array;
    }

    /**
     * Class representing a table backed by a named set of columns.
     */
    class ColumnTable extends Table {

      /**
       * Create a new ColumnTable from existing input data.
       * @param {object[]|Iterable<object>|object|Map} values The backing table data values.
       *  If array-valued, should be a list of JavaScript objects with
       *  key-value properties for each column value.
       *  If object- or Map-valued, a table with two columns (one for keys,
       *  one for values) will be created.
       * @param {string[]} [names] The named columns to include.
       * @return {ColumnTable} A new ColumnTable instance.
       */
      static from(values, names) {
        return new ColumnTable(columnsFrom(values, names), names);
      }

      /**
       * Create a new table for a set of named columns.
       * @param {object|Map} columns
       *  The set of named column arrays. Keys are column names.
       *  The enumeration order of the keys determines the column indices,
       *  unless the names parameter is specified.
       *  Values must be arrays (or array-like values) of identical length.
       * @param {string[]} [names] Ordered list of column names. If specified,
       *  this array determines the column indices. If not specified, the
       *  key enumeration order of the columns object is used.
       * @return {ColumnTable} the instantiated ColumnTable instance.
       */
      static new(columns, names) {
        if (columns instanceof ColumnTable) return columns;
        const data = {};
        const keys = [];
        for (const [key, value] of entries(columns)) {
          data[key] = value;
          keys.push(key);
        }
        return new ColumnTable(data, names || keys);
      }

      /**
       * Instantiate a new ColumnTable instance.
       * @param {object} columns An object mapping column names to values.
       * @param {string[]} [names] An ordered list of column names.
       * @param {BitSet} [filter] A filtering BitSet.
       * @param {GroupBySpec} [group] A groupby specification.
       * @param {RowComparator} [order] A row comparator function.
       * @param {Params} [params] An object mapping parameter names to values.
       */
      constructor(columns, names, filter, group, order, params) {
        map$1(columns, defaultColumnFactory, columns);
        names = names || Object.keys(columns);
        const nrows = names.length ? columns[names[0]].length : 0;
        super(names, nrows, columns, filter, group, order, params);
      }

      /**
       * Create a new table with the same type as this table.
       * The new table may have different data, filter, grouping, or ordering
       * based on the values of the optional configuration argument. If a
       * setting is not specified, it is inherited from the current table.
       * @param {CreateOptions} [options] Creation options for the new table.
       * @return {ColumnTable} A newly created table.
       */
      create({ data, names, filter, groups, order }) {
        const f = filter !== undefined ? filter : this.mask();

        return new ColumnTable(
          data || this._data,
          names || (!data ? this._names : null),
          f,
          groups !== undefined ? groups : regroup(this._group, filter && f),
          order !== undefined ? order : this._order,
          this._params
        );
      }

      /**
       * Create a new table with additional columns drawn from one or more input
       * tables. All tables must have the same numer of rows and are reified
       * prior to assignment. In the case of repeated column names, input table
       * columns overwrite existing columns.
       * @param {...ColumnTable} tables The tables to merge with this table.
       * @return {ColumnTable} A new table with merged columns.
       * @example table.assign(table1, table2)
       */
      assign(...tables) {
        const nrows = this.numRows();
        const base = this.reify();
        const cset = columnSet(base).groupby(base.groups());
        tables.forEach(input => {
          input = ColumnTable.new(input);
          if (input.numRows() !== nrows) error('Assign row counts do not match');
          input = input.reify();
          input.columnNames(name => cset.add(name, input.column(name)));
        });
        return this.create(cset.new());
      }

      /**
       * Get the backing set of columns for this table.
       * @return {ColumnData} Object of named column instances.
       */
      columns() {
        return this._data;
      }

      /**
       * Get the column instance with the given name.
       * @param {string} name The column name.
       * @return {ColumnType | undefined} The named column, or undefined if it does not exist.
       */
      column(name) {
        return this._data[name];
      }

      /**
       * Get the column instance at the given index position.
       * @param {number} index The zero-based column index.
       * @return {ColumnType | undefined} The column, or undefined if it does not exist.
       */
      columnAt(index) {
        return this._data[this._names[index]];
      }

      /**
       * Get an array of values contained in a column. The resulting array
       * respects any table filter or orderby criteria.
       * @param {string} name The column name.
       * @param {ArrayConstructor|import('./table').TypedArrayConstructor} [constructor=Array]
       *  The array constructor for instantiating the output array.
       * @return {import('./table').DataValue[]|import('./table).TypedArray} The array of column values.
       */
      array(name, constructor = Array) {
        const column = this.column(name);
        const array = new constructor(this.numRows());
        let idx = -1;
        this.scan(row => array[++idx] = column.get(row), true);
        return array;
      }

      /**
       * Get the value for the given column and row.
       * @param {string} name The column name.
       * @param {number} [row=0] The row index, defaults to zero if not specified.
       * @return {import('./table').DataValue} The table value at (column, row).
       */
      get(name, row = 0) {
        const column = this.column(name);
        return this.isFiltered() || this.isOrdered()
          ? column.get(this.indices()[row])
          : column.get(row);
      }

      /**
       * Returns an accessor ("getter") function for a column. The returned
       * function takes a row index as its single argument and returns the
       * corresponding column value.
       * @param {string} name The column name.
       * @return {import('./table').ColumnGetter} The column getter function.
       */
      getter(name) {
        const column = this.column(name);
        const indices = this.isFiltered() || this.isOrdered() ? this.indices() : null;
        return indices ? row => column.get(indices[row])
          : column ? row => column.get(row)
          : error(`Unrecognized column: ${name}`);
      }

      /**
       * Returns an object representing a table row.
       * @param {number} [row=0] The row index, defaults to zero if not specified.
       * @return {object} A row object with named properties for each column.
       */
      object(row = 0) {
        return objectBuilder(this)(row);
      }

      /**
       * Returns an array of objects representing table rows.
       * @param {ObjectsOptions} [options] The options for row object generation.
       * @return {object[]} An array of row objects.
       */
      objects(options = {}) {
        const { grouped, limit, offset } = options;

        // generate array of row objects
        const names = resolve(this, options.columns || all());
        const create = rowObjectBuilder(names);
        const obj = [];
        this.scan(
          (row, data) => obj.push(create(row, data)),
          true, limit, offset
        );

        // produce nested output as requested
        if (grouped && this.isGrouped()) {
          const idx = [];
          this.scan(row => idx.push(row), true, limit, offset);
          return nest(this, idx, obj, grouped);
        }

        return obj;
      }

      /**
       * Returns an iterator over objects representing table rows.
       * @return {Iterator<object>} An iterator over row objects.
       */
      *[Symbol.iterator]() {
        const create = objectBuilder(this);
        const n = this.numRows();
        for (let i = 0; i < n; ++i) {
          yield create(i);
        }
      }

      /**
       * Create a new fully-materialized instance of this table.
       * All filter and orderby settings are removed from the new table.
       * Instead, the backing data itself is filtered and ordered as needed.
       * @param {number[]} [indices] Ordered row indices to materialize.
       *  If unspecified, all rows passing the table filter are used.
       * @return {ColumnTable} A reified table.
       */
      reify(indices) {
        const nrows = indices ? indices.length : this.numRows();
        const names = this._names;
        let data, groups;

        if (!indices && !this.isOrdered()) {
          if (!this.isFiltered()) {
            return this; // data already reified
          } else if (nrows === this.totalRows()) {
            data = this.data(); // all rows pass filter, skip copy
          }
        }

        if (!data) {
          const scan = indices ? f => indices.forEach(f) : f => this.scan(f, true);
          const ncols = names.length;
          data = {};

          for (let i = 0; i < ncols; ++i) {
            const name = names[i];
            const prev = this.column(name);
            const curr = data[name] = new (arrayType(prev))(nrows);
            let r = -1;
            scan(row => curr[++r] = prev.get(row));
          }

          if (this.isGrouped()) {
            groups = reindex(this.groups(), scan, !!indices, nrows);
          }
        }

        return this.create({ data, names, groups, filter: null, order: null });
      }

      /**
       * Apply a sequence of transformations to this table. The output
       * of each transform is passed as input to the next transform, and
       * the output of the last transform is then returned.
       * @param {...(Transform|Transform[])} transforms Transformation
       *  functions to apply to the table in sequence. Each function should
       *  take a single table as input and return a table as output.
       * @return {ColumnTable} The output of the last transform.
       */
      transform(...transforms) {
        return transforms.flat().reduce((t, f) => f(t), this);
      }

      /**
       * Format this table as an Apache Arrow table.
       * @param {ArrowFormatOptions} [options] The formatting options.
       * @return {import('apache-arrow').Table} An Apache Arrow table.
       */
      toArrow(options) {
        return toArrow(this, options);
      }

      /**
       * Format this table as binary data in the Apache Arrow IPC format.
       * @param {ArrowFormatOptions} [options] The formatting options.
       * @return {Uint8Array} A new Uint8Array of Arrow-encoded binary data.
       */
      toArrowBuffer(options) {
        return toArrowIPC(this, options);
      }

      /**
       * Format this table as a comma-separated values (CSV) string. Other
       * delimiters, such as tabs or pipes ('|'), can be specified using
       * the options argument.
       * @param {CSVFormatOptions} [options] The formatting options.
       * @return {string} A delimited value string.
       */
      toCSV(options) {
        return toCSV(this, options);
      }

      /**
       * Format this table as an HTML table string.
       * @param {HTMLFormatOptions} [options] The formatting options.
       * @return {string} An HTML table string.
       */
      toHTML(options) {
        return toHTML(this, options);
      }

      /**
       * Format this table as a JavaScript Object Notation (JSON) string.
       * @param {JSONFormatOptions} [options] The formatting options.
       * @return {string} A JSON string.
       */
      toJSON(options) {
        return toJSON(this, options);
      }

      /**
       * Format this table as a GitHub-Flavored Markdown table string.
       * @param {MarkdownFormatOptions} [options] The formatting options.
       * @return {string} A GitHub-Flavored Markdown table string.
       */
      toMarkdown(options) {
        return toMarkdown(this, options);
      }
    }

    function objectBuilder(table) {
      let b = table._builder;

      if (!b) {
        const create = rowObjectBuilder(table.columnNames());
        const data = table.data();
        if (table.isOrdered() || table.isFiltered()) {
          const indices = table.indices();
          b = row => create(indices[row], data);
        } else {
          b = row => create(row, data);
        }
        table._builder = b;
      }

      return b;
    }

    /**
     * A table transformation.
     * @typedef {(table: ColumnTable) => ColumnTable} Transform
     */

    /**
     * Proxy type for BitSet class.
     * @typedef {import('./table').BitSet} BitSet
     */

    /**
     * Proxy type for ColumnType interface.
     * @typedef {import('./column').ColumnType} ColumnType
     */

    /**
     * A named collection of columns.
     * @typedef {{[key: string]: ColumnType}} ColumnData
     */

    /**
     * Proxy type for GroupBySpec.
     * @typedef {import('./table').GroupBySpec} GroupBySpec
     */

    /**
     * Proxy type for RowComparator.
     * @typedef {import('./table').RowComparator} RowComparator
     */

    /**
     * Proxy type for Params.
     * @typedef {import('./table').Params} Params
     */

    /**
     * Options for Arrow formatting.
     * @typedef {import('../arrow/encode').ArrowFormatOptions} ArrowFormatOptions
     */

    /**
     * Options for CSV formatting.
     * @typedef {import('../format/to-csv').CSVFormatOptions} CSVFormatOptions
     */

    /**
     * Options for HTML formatting.
     * @typedef {import('../format/to-html').HTMLFormatOptions} HTMLFormatOptions
     */

    /**
     * Options for JSON formatting.
     * @typedef {import('../format/to-json').JSONFormatOptions} JSONFormatOptions
     */

    /**
     * Options for Markdown formatting.
     * @typedef {import('../format/to-markdown').MarkdownFormatOptions} MarkdownFormatOptions
     */

    /**
     * Abstract class for custom aggregation operations.
     */
    class Reducer {
      constructor(outputs) {
        this._outputs = outputs;
      }

      size() {
        return this._outputs.length;
      }

      outputs() {
        return this._outputs;
      }

      init(/* columns */) {
        return {};
      }

      add(/* state, row, data */) {
        // no-op, subclasses should override
      }

      rem(/* state, row, data */) {
        // no-op, subclasses should override
      }

      write(/* state, values, index */) {
      }
    }

    function walk(node, ctx, visitors, parent) {
      const visit = visitors[node.type] || visitors['Default'];
      if (visit && visit(node, ctx, parent) === false) return;

      const walker = walkers[node.type];
      if (walker) walker(node, ctx, visitors);
    }

    const unary = (node, ctx, visitors) => {
      walk(node.argument, ctx, visitors, node);
    };

    const binary$1 = (node, ctx, visitors) => {
      walk(node.left, ctx, visitors, node);
      walk(node.right, ctx, visitors, node);
    };

    const ternary = (node, ctx, visitors) => {
      walk(node.test, ctx, visitors, node);
      walk(node.consequent, ctx, visitors, node);
      if (node.alternate) walk(node.alternate, ctx, visitors, node);
    };

    const func$1 = (node, ctx, visitors) => {
      list$1(node.params, ctx, visitors, node);
      walk(node.body, ctx, visitors, node);
    };

    const call$1 = (node, ctx, visitors) => {
      walk(node.callee, ctx, visitors, node);
      list$1(node.arguments, ctx, visitors, node);
    };

    const list$1 = (nodes, ctx, visitors, node) => {
      nodes.forEach(item => walk(item, ctx, visitors, node));
    };

    const walkers = {
      TemplateLiteral: (node, ctx, visitors) => {
        list$1(node.expressions, ctx, visitors, node);
        list$1(node.quasis, ctx, visitors, node);
      },
      MemberExpression: (node, ctx, visitors) => {
        walk(node.object, ctx, visitors, node);
        walk(node.property, ctx, visitors, node);
      },
      CallExpression: call$1,
      NewExpression: call$1,
      ArrayExpression: (node, ctx, visitors) => {
        list$1(node.elements, ctx, visitors, node);
      },
      AssignmentExpression: binary$1,
      AwaitExpression: unary,
      BinaryExpression: binary$1,
      LogicalExpression: binary$1,
      UnaryExpression: unary,
      UpdateExpression: unary,
      ConditionalExpression: ternary,
      ObjectExpression: (node, ctx, visitors) => {
        list$1(node.properties, ctx, visitors, node);
      },
      Property: (node, ctx, visitors) => {
        walk(node.key, ctx, visitors, node);
        walk(node.value, ctx, visitors, node);
      },

      ArrowFunctionExpression: func$1,
      FunctionExpression: func$1,
      FunctionDeclaration: func$1,

      VariableDeclaration: (node, ctx, visitors) => {
        list$1(node.declarations, ctx, visitors, node);
      },
      VariableDeclarator: (node, ctx, visitors) => {
        walk(node.id, ctx, visitors, node);
        walk(node.init, ctx, visitors, node);
      },
      SpreadElement: (node, ctx, visitors) => {
        walk(node.argument, ctx, visitors, node);
      },

      BlockStatement: (node, ctx, visitors) => {
        list$1(node.body, ctx, visitors, node);
      },
      ExpressionStatement: (node, ctx, visitors) => {
        walk(node.expression, ctx, visitors, node);
      },
      IfStatement: ternary,
      ForStatement: (node, ctx, visitors) => {
        walk(node.init, ctx, visitors, node);
        walk(node.test, ctx, visitors, node);
        walk(node.update, ctx, visitors, node);
        walk(node.body, ctx, visitors, node);
      },
      WhileStatement: (node, ctx, visitors) => {
        walk(node.test, ctx, visitors, node);
        walk(node.body, ctx, visitors, node);
      },
      DoWhileStatement: (node, ctx, visitors) => {
        walk(node.body, ctx, visitors, node);
        walk(node.test, ctx, visitors, node);
      },
      SwitchStatement: (node, ctx, visitors) => {
        walk(node.discriminant, ctx, visitors, node);
        list$1(node.cases, ctx, visitors, node);
      },
      SwitchCase: (node, ctx, visitors) => {
        if (node.test) walk(node.test, ctx, visitors, node);
        list$1(node.consequent, ctx, visitors, node);
      },
      ReturnStatement: unary,

      Program: (node, ctx, visitors) => {
        walk(node.body[0], ctx, visitors, node);
      }
    };

    function strip(node) {
      delete node.start;
      delete node.end;
      delete node.optional;
    }

    function stripMember(node) {
      strip(node);
      delete node.object;
      delete node.property;
      delete node.computed;
      if (!node.table) delete node.table;
    }

    function clean(ast) {
      walk(ast, null, {
        Column: stripMember,
        Constant: stripMember,
        Default: strip
      });
      return ast;
    }

    function is(type, node) {
      return node && node.type === type;
    }

    function isFunctionExpression(node) {
      return is(FunctionExpression, node)
        || is(ArrowFunctionExpression, node);
    }

    function toFunction(value) {
      return isFunction(value) ? value : () => value;
    }

    const ERROR_ESC_AGGRONLY = 'Escaped functions are not valid as rollup or pivot values.';

    function parseEscape(ctx, spec, params) {
      if (ctx.aggronly) error(ERROR_ESC_AGGRONLY);

      // generate escaped function invocation code
      const code = '(row,data)=>fn('
        + rowObjectCode(ctx.table.columnNames())
        + ',$)';

      return { escape: compile$1.escape(code, toFunction(spec.expr), params) };
    }

    // This file was generated. Do not modify manually!
    var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];

    // This file was generated. Do not modify manually!
    var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];

    // This file was generated. Do not modify manually!
    var nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u0898-\u089f\u08ca-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3c\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u180f-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf-\u1ace\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";

    // This file was generated. Do not modify manually!
    var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u0870-\u0887\u0889-\u088e\u08a0-\u08c9\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c5d\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cdd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u1711\u171f-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4c\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ca\ua7d0\ua7d1\ua7d3\ua7d5-\ua7d9\ua7f2-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";

    // These are a run-length and offset encoded representation of the

    // Reserved word lists for various dialects of the language

    var reservedWords = {
      3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
      5: "class enum extends super const export import",
      6: "enum",
      strict: "implements interface let package private protected public static yield",
      strictBind: "eval arguments"
    };

    // And the keywords

    var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";

    var keywords$1 = {
      5: ecma5AndLessKeywords,
      "5module": ecma5AndLessKeywords + " export import",
      6: ecma5AndLessKeywords + " const class extends export import super"
    };

    var keywordRelationalOperator = /^in(stanceof)?$/;

    // ## Character categories

    var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
    var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

    // This has a complexity linear to the value of the code. The
    // assumption is that looking up astral identifier characters is
    // rare.
    function isInAstralSet(code, set) {
      var pos = 0x10000;
      for (var i = 0; i < set.length; i += 2) {
        pos += set[i];
        if (pos > code) { return false }
        pos += set[i + 1];
        if (pos >= code) { return true }
      }
    }

    // Test whether a given character code starts an identifier.

    function isIdentifierStart(code, astral) {
      if (code < 65) { return code === 36 }
      if (code < 91) { return true }
      if (code < 97) { return code === 95 }
      if (code < 123) { return true }
      if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }
      if (astral === false) { return false }
      return isInAstralSet(code, astralIdentifierStartCodes)
    }

    // Test whether a given character is part of an identifier.

    function isIdentifierChar(code, astral) {
      if (code < 48) { return code === 36 }
      if (code < 58) { return true }
      if (code < 65) { return false }
      if (code < 91) { return true }
      if (code < 97) { return code === 95 }
      if (code < 123) { return true }
      if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }
      if (astral === false) { return false }
      return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)
    }

    // ## Token types

    // The assignment of fine-grained, information-carrying type objects
    // allows the tokenizer to store the information it has about a
    // token in a way that is very cheap for the parser to look up.

    // All token type variables start with an underscore, to make them
    // easy to recognize.

    // The `beforeExpr` property is used to disambiguate between regular
    // expressions and divisions. It is set on all token types that can
    // be followed by an expression (thus, a slash after them would be a
    // regular expression).
    //
    // The `startsExpr` property is used to check if the token ends a
    // `yield` expression. It is set on all token types that either can
    // directly start an expression (like a quotation mark) or can
    // continue an expression (like the body of a string).
    //
    // `isLoop` marks a keyword as starting a loop, which is important
    // to know when parsing a label, in order to allow or disallow
    // continue jumps to that label.

    var TokenType = function TokenType(label, conf) {
      if ( conf === void 0 ) conf = {};

      this.label = label;
      this.keyword = conf.keyword;
      this.beforeExpr = !!conf.beforeExpr;
      this.startsExpr = !!conf.startsExpr;
      this.isLoop = !!conf.isLoop;
      this.isAssign = !!conf.isAssign;
      this.prefix = !!conf.prefix;
      this.postfix = !!conf.postfix;
      this.binop = conf.binop || null;
      this.updateContext = null;
    };

    function binop(name, prec) {
      return new TokenType(name, {beforeExpr: true, binop: prec})
    }
    var beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};

    // Map keyword names to token types.

    var keywords = {};

    // Succinct definitions of keyword token types
    function kw(name, options) {
      if ( options === void 0 ) options = {};

      options.keyword = name;
      return keywords[name] = new TokenType(name, options)
    }

    var types$1 = {
      num: new TokenType("num", startsExpr),
      regexp: new TokenType("regexp", startsExpr),
      string: new TokenType("string", startsExpr),
      name: new TokenType("name", startsExpr),
      privateId: new TokenType("privateId", startsExpr),
      eof: new TokenType("eof"),

      // Punctuation token types.
      bracketL: new TokenType("[", {beforeExpr: true, startsExpr: true}),
      bracketR: new TokenType("]"),
      braceL: new TokenType("{", {beforeExpr: true, startsExpr: true}),
      braceR: new TokenType("}"),
      parenL: new TokenType("(", {beforeExpr: true, startsExpr: true}),
      parenR: new TokenType(")"),
      comma: new TokenType(",", beforeExpr),
      semi: new TokenType(";", beforeExpr),
      colon: new TokenType(":", beforeExpr),
      dot: new TokenType("."),
      question: new TokenType("?", beforeExpr),
      questionDot: new TokenType("?."),
      arrow: new TokenType("=>", beforeExpr),
      template: new TokenType("template"),
      invalidTemplate: new TokenType("invalidTemplate"),
      ellipsis: new TokenType("...", beforeExpr),
      backQuote: new TokenType("`", startsExpr),
      dollarBraceL: new TokenType("${", {beforeExpr: true, startsExpr: true}),

      // Operators. These carry several kinds of properties to help the
      // parser use them properly (the presence of these properties is
      // what categorizes them as operators).
      //
      // `binop`, when present, specifies that this operator is a binary
      // operator, and will refer to its precedence.
      //
      // `prefix` and `postfix` mark the operator as a prefix or postfix
      // unary operator.
      //
      // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
      // binary operators with a very low precedence, that should result
      // in AssignmentExpression nodes.

      eq: new TokenType("=", {beforeExpr: true, isAssign: true}),
      assign: new TokenType("_=", {beforeExpr: true, isAssign: true}),
      incDec: new TokenType("++/--", {prefix: true, postfix: true, startsExpr: true}),
      prefix: new TokenType("!/~", {beforeExpr: true, prefix: true, startsExpr: true}),
      logicalOR: binop("||", 1),
      logicalAND: binop("&&", 2),
      bitwiseOR: binop("|", 3),
      bitwiseXOR: binop("^", 4),
      bitwiseAND: binop("&", 5),
      equality: binop("==/!=/===/!==", 6),
      relational: binop("</>/<=/>=", 7),
      bitShift: binop("<</>>/>>>", 8),
      plusMin: new TokenType("+/-", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),
      modulo: binop("%", 10),
      star: binop("*", 10),
      slash: binop("/", 10),
      starstar: new TokenType("**", {beforeExpr: true}),
      coalesce: binop("??", 1),

      // Keyword token types.
      _break: kw("break"),
      _case: kw("case", beforeExpr),
      _catch: kw("catch"),
      _continue: kw("continue"),
      _debugger: kw("debugger"),
      _default: kw("default", beforeExpr),
      _do: kw("do", {isLoop: true, beforeExpr: true}),
      _else: kw("else", beforeExpr),
      _finally: kw("finally"),
      _for: kw("for", {isLoop: true}),
      _function: kw("function", startsExpr),
      _if: kw("if"),
      _return: kw("return", beforeExpr),
      _switch: kw("switch"),
      _throw: kw("throw", beforeExpr),
      _try: kw("try"),
      _var: kw("var"),
      _const: kw("const"),
      _while: kw("while", {isLoop: true}),
      _with: kw("with"),
      _new: kw("new", {beforeExpr: true, startsExpr: true}),
      _this: kw("this", startsExpr),
      _super: kw("super", startsExpr),
      _class: kw("class", startsExpr),
      _extends: kw("extends", beforeExpr),
      _export: kw("export"),
      _import: kw("import", startsExpr),
      _null: kw("null", startsExpr),
      _true: kw("true", startsExpr),
      _false: kw("false", startsExpr),
      _in: kw("in", {beforeExpr: true, binop: 7}),
      _instanceof: kw("instanceof", {beforeExpr: true, binop: 7}),
      _typeof: kw("typeof", {beforeExpr: true, prefix: true, startsExpr: true}),
      _void: kw("void", {beforeExpr: true, prefix: true, startsExpr: true}),
      _delete: kw("delete", {beforeExpr: true, prefix: true, startsExpr: true})
    };

    // Matches a whole line break (where CRLF is considered a single
    // line break). Used to count lines.

    var lineBreak = /\r\n?|\n|\u2028|\u2029/;
    var lineBreakG = new RegExp(lineBreak.source, "g");

    function isNewLine(code) {
      return code === 10 || code === 13 || code === 0x2028 || code === 0x2029
    }

    function nextLineBreak(code, from, end) {
      if ( end === void 0 ) end = code.length;

      for (var i = from; i < end; i++) {
        var next = code.charCodeAt(i);
        if (isNewLine(next))
          { return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1 }
      }
      return -1
    }

    var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;

    var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;

    var ref$1 = Object.prototype;
    var hasOwnProperty$1 = ref$1.hasOwnProperty;
    var toString$1 = ref$1.toString;

    var hasOwn = Object.hasOwn || (function (obj, propName) { return (
      hasOwnProperty$1.call(obj, propName)
    ); });

    var isArray$1 = Array.isArray || (function (obj) { return (
      toString$1.call(obj) === "[object Array]"
    ); });

    function wordsRegexp(words) {
      return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$")
    }

    function codePointToString(code) {
      // UTF-16 Decoding
      if (code <= 0xFFFF) { return String.fromCharCode(code) }
      code -= 0x10000;
      return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)
    }

    var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/;

    // These are used when `options.locations` is on, for the
    // `startLoc` and `endLoc` properties.

    var Position = function Position(line, col) {
      this.line = line;
      this.column = col;
    };

    Position.prototype.offset = function offset (n) {
      return new Position(this.line, this.column + n)
    };

    var SourceLocation = function SourceLocation(p, start, end) {
      this.start = start;
      this.end = end;
      if (p.sourceFile !== null) { this.source = p.sourceFile; }
    };

    // The `getLineInfo` function is mostly useful when the
    // `locations` option is off (for performance reasons) and you
    // want to find the line/column position for a given character
    // offset. `input` should be the code string that the offset refers
    // into.

    function getLineInfo(input, offset) {
      for (var line = 1, cur = 0;;) {
        var nextBreak = nextLineBreak(input, cur, offset);
        if (nextBreak < 0) { return new Position(line, offset - cur) }
        ++line;
        cur = nextBreak;
      }
    }

    // A second argument must be given to configure the parser process.
    // These options are recognized (only `ecmaVersion` is required):

    var defaultOptions = {
      // `ecmaVersion` indicates the ECMAScript version to parse. Must be
      // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10
      // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `"latest"`
      // (the latest version the library supports). This influences
      // support for strict mode, the set of reserved words, and support
      // for new syntax features.
      ecmaVersion: null,
      // `sourceType` indicates the mode the code should be parsed in.
      // Can be either `"script"` or `"module"`. This influences global
      // strict mode and parsing of `import` and `export` declarations.
      sourceType: "script",
      // `onInsertedSemicolon` can be a callback that will be called
      // when a semicolon is automatically inserted. It will be passed
      // the position of the comma as an offset, and if `locations` is
      // enabled, it is given the location as a `{line, column}` object
      // as second argument.
      onInsertedSemicolon: null,
      // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
      // trailing commas.
      onTrailingComma: null,
      // By default, reserved words are only enforced if ecmaVersion >= 5.
      // Set `allowReserved` to a boolean value to explicitly turn this on
      // an off. When this option has the value "never", reserved words
      // and keywords can also not be used as property names.
      allowReserved: null,
      // When enabled, a return at the top level is not considered an
      // error.
      allowReturnOutsideFunction: false,
      // When enabled, import/export statements are not constrained to
      // appearing at the top of the program, and an import.meta expression
      // in a script isn't considered an error.
      allowImportExportEverywhere: false,
      // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.
      // When enabled, await identifiers are allowed to appear at the top-level scope,
      // but they are still not allowed in non-async functions.
      allowAwaitOutsideFunction: null,
      // When enabled, super identifiers are not constrained to
      // appearing in methods and do not raise an error when they appear elsewhere.
      allowSuperOutsideMethod: null,
      // When enabled, hashbang directive in the beginning of file is
      // allowed and treated as a line comment. Enabled by default when
      // `ecmaVersion` >= 2023.
      allowHashBang: false,
      // When `locations` is on, `loc` properties holding objects with
      // `start` and `end` properties in `{line, column}` form (with
      // line being 1-based and column 0-based) will be attached to the
      // nodes.
      locations: false,
      // A function can be passed as `onToken` option, which will
      // cause Acorn to call that function with object in the same
      // format as tokens returned from `tokenizer().getToken()`. Note
      // that you are not allowed to call the parser from the
      // callback—that will corrupt its internal state.
      onToken: null,
      // A function can be passed as `onComment` option, which will
      // cause Acorn to call that function with `(block, text, start,
      // end)` parameters whenever a comment is skipped. `block` is a
      // boolean indicating whether this is a block (`/* */`) comment,
      // `text` is the content of the comment, and `start` and `end` are
      // character offsets that denote the start and end of the comment.
      // When the `locations` option is on, two more parameters are
      // passed, the full `{line, column}` locations of the start and
      // end of the comments. Note that you are not allowed to call the
      // parser from the callback—that will corrupt its internal state.
      onComment: null,
      // Nodes have their start and end characters offsets recorded in
      // `start` and `end` properties (directly on the node, rather than
      // the `loc` object, which holds line/column data. To also add a
      // [semi-standardized][range] `range` property holding a `[start,
      // end]` array with the same numbers, set the `ranges` option to
      // `true`.
      //
      // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
      ranges: false,
      // It is possible to parse multiple files into a single AST by
      // passing the tree produced by parsing the first file as
      // `program` option in subsequent parses. This will add the
      // toplevel forms of the parsed file to the `Program` (top) node
      // of an existing parse tree.
      program: null,
      // When `locations` is on, you can pass this to record the source
      // file in every node's `loc` object.
      sourceFile: null,
      // This value, if given, is stored in every node, whether
      // `locations` is on or off.
      directSourceFile: null,
      // When enabled, parenthesized expressions are represented by
      // (non-standard) ParenthesizedExpression nodes
      preserveParens: false
    };

    // Interpret and default an options object

    var warnedAboutEcmaVersion = false;

    function getOptions(opts) {
      var options = {};

      for (var opt in defaultOptions)
        { options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt]; }

      if (options.ecmaVersion === "latest") {
        options.ecmaVersion = 1e8;
      } else if (options.ecmaVersion == null) {
        if (!warnedAboutEcmaVersion && typeof console === "object" && console.warn) {
          warnedAboutEcmaVersion = true;
          console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.");
        }
        options.ecmaVersion = 11;
      } else if (options.ecmaVersion >= 2015) {
        options.ecmaVersion -= 2009;
      }

      if (options.allowReserved == null)
        { options.allowReserved = options.ecmaVersion < 5; }

      if (opts.allowHashBang == null)
        { options.allowHashBang = options.ecmaVersion >= 14; }

      if (isArray$1(options.onToken)) {
        var tokens = options.onToken;
        options.onToken = function (token) { return tokens.push(token); };
      }
      if (isArray$1(options.onComment))
        { options.onComment = pushComment(options, options.onComment); }

      return options
    }

    function pushComment(options, array) {
      return function(block, text, start, end, startLoc, endLoc) {
        var comment = {
          type: block ? "Block" : "Line",
          value: text,
          start: start,
          end: end
        };
        if (options.locations)
          { comment.loc = new SourceLocation(this, startLoc, endLoc); }
        if (options.ranges)
          { comment.range = [start, end]; }
        array.push(comment);
      }
    }

    // Each scope gets a bitset that may contain these flags
    var
        SCOPE_TOP = 1,
        SCOPE_FUNCTION = 2,
        SCOPE_ASYNC = 4,
        SCOPE_GENERATOR = 8,
        SCOPE_ARROW = 16,
        SCOPE_SIMPLE_CATCH = 32,
        SCOPE_SUPER = 64,
        SCOPE_DIRECT_SUPER = 128,
        SCOPE_CLASS_STATIC_BLOCK = 256,
        SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;

    function functionFlags(async, generator) {
      return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)
    }

    // Used in checkLVal* and declareName to determine the type of a binding
    var
        BIND_NONE = 0, // Not a binding
        BIND_VAR = 1, // Var-style binding
        BIND_LEXICAL = 2, // Let- or const-style binding
        BIND_FUNCTION = 3, // Function declaration
        BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding
        BIND_OUTSIDE = 5; // Special case for function names as bound inside the function

    var Parser = function Parser(options, input, startPos) {
      this.options = options = getOptions(options);
      this.sourceFile = options.sourceFile;
      this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
      var reserved = "";
      if (options.allowReserved !== true) {
        reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];
        if (options.sourceType === "module") { reserved += " await"; }
      }
      this.reservedWords = wordsRegexp(reserved);
      var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
      this.reservedWordsStrict = wordsRegexp(reservedStrict);
      this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
      this.input = String(input);

      // Used to signal to callers of `readWord1` whether the word
      // contained any escape sequences. This is needed because words with
      // escape sequences must not be interpreted as keywords.
      this.containsEsc = false;

      // Set up token state

      // The current position of the tokenizer in the input.
      if (startPos) {
        this.pos = startPos;
        this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
        this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
      } else {
        this.pos = this.lineStart = 0;
        this.curLine = 1;
      }

      // Properties of the current token:
      // Its type
      this.type = types$1.eof;
      // For tokens that include more information than their type, the value
      this.value = null;
      // Its start and end offset
      this.start = this.end = this.pos;
      // And, if locations are used, the {line, column} object
      // corresponding to those offsets
      this.startLoc = this.endLoc = this.curPosition();

      // Position information for the previous token
      this.lastTokEndLoc = this.lastTokStartLoc = null;
      this.lastTokStart = this.lastTokEnd = this.pos;

      // The context stack is used to superficially track syntactic
      // context to predict whether a regular expression is allowed in a
      // given position.
      this.context = this.initialContext();
      this.exprAllowed = true;

      // Figure out if it's a module code.
      this.inModule = options.sourceType === "module";
      this.strict = this.inModule || this.strictDirective(this.pos);

      // Used to signify the start of a potential arrow function
      this.potentialArrowAt = -1;
      this.potentialArrowInForAwait = false;

      // Positions to delayed-check that yield/await does not exist in default parameters.
      this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
      // Labels in scope.
      this.labels = [];
      // Thus-far undefined exports.
      this.undefinedExports = Object.create(null);

      // If enabled, skip leading hashbang line.
      if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!")
        { this.skipLineComment(2); }

      // Scope tracking for duplicate variable names (see scope.js)
      this.scopeStack = [];
      this.enterScope(SCOPE_TOP);

      // For RegExp validation
      this.regexpState = null;

      // The stack of private names.
      // Each element has two properties: 'declared' and 'used'.
      // When it exited from the outermost class definition, all used private names must be declared.
      this.privateNameStack = [];
    };

    var prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },canAwait: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true },allowNewDotTarget: { configurable: true },inClassStaticBlock: { configurable: true } };

    Parser.prototype.parse = function parse () {
      var node = this.options.program || this.startNode();
      this.nextToken();
      return this.parseTopLevel(node)
    };

    prototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };

    prototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit };

    prototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit };

    prototypeAccessors.canAwait.get = function () {
      for (var i = this.scopeStack.length - 1; i >= 0; i--) {
        var scope = this.scopeStack[i];
        if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) { return false }
        if (scope.flags & SCOPE_FUNCTION) { return (scope.flags & SCOPE_ASYNC) > 0 }
      }
      return (this.inModule && this.options.ecmaVersion >= 13) || this.options.allowAwaitOutsideFunction
    };

    prototypeAccessors.allowSuper.get = function () {
      var ref = this.currentThisScope();
        var flags = ref.flags;
        var inClassFieldInit = ref.inClassFieldInit;
      return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod
    };

    prototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };

    prototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };

    prototypeAccessors.allowNewDotTarget.get = function () {
      var ref = this.currentThisScope();
        var flags = ref.flags;
        var inClassFieldInit = ref.inClassFieldInit;
      return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit
    };

    prototypeAccessors.inClassStaticBlock.get = function () {
      return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0
    };

    Parser.extend = function extend () {
        var plugins = [], len = arguments.length;
        while ( len-- ) plugins[ len ] = arguments[ len ];

      var cls = this;
      for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }
      return cls
    };

    Parser.parse = function parse (input, options) {
      return new this(options, input).parse()
    };

    Parser.parseExpressionAt = function parseExpressionAt (input, pos, options) {
      var parser = new this(options, input, pos);
      parser.nextToken();
      return parser.parseExpression()
    };

    Parser.tokenizer = function tokenizer (input, options) {
      return new this(options, input)
    };

    Object.defineProperties( Parser.prototype, prototypeAccessors );

    var pp$9 = Parser.prototype;

    // ## Parser utilities

    var literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
    pp$9.strictDirective = function(start) {
      if (this.options.ecmaVersion < 5) { return false }
      for (;;) {
        // Try to find string literal.
        skipWhiteSpace.lastIndex = start;
        start += skipWhiteSpace.exec(this.input)[0].length;
        var match = literal.exec(this.input.slice(start));
        if (!match) { return false }
        if ((match[1] || match[2]) === "use strict") {
          skipWhiteSpace.lastIndex = start + match[0].length;
          var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
          var next = this.input.charAt(end);
          return next === ";" || next === "}" ||
            (lineBreak.test(spaceAfter[0]) &&
             !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "="))
        }
        start += match[0].length;

        // Skip semicolon, if any.
        skipWhiteSpace.lastIndex = start;
        start += skipWhiteSpace.exec(this.input)[0].length;
        if (this.input[start] === ";")
          { start++; }
      }
    };

    // Predicate that tests whether the next token is of the given
    // type, and if yes, consumes it as a side effect.

    pp$9.eat = function(type) {
      if (this.type === type) {
        this.next();
        return true
      } else {
        return false
      }
    };

    // Tests whether parsed token is a contextual keyword.

    pp$9.isContextual = function(name) {
      return this.type === types$1.name && this.value === name && !this.containsEsc
    };

    // Consumes contextual keyword if possible.

    pp$9.eatContextual = function(name) {
      if (!this.isContextual(name)) { return false }
      this.next();
      return true
    };

    // Asserts that following token is given contextual keyword.

    pp$9.expectContextual = function(name) {
      if (!this.eatContextual(name)) { this.unexpected(); }
    };

    // Test whether a semicolon can be inserted at the current position.

    pp$9.canInsertSemicolon = function() {
      return this.type === types$1.eof ||
        this.type === types$1.braceR ||
        lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
    };

    pp$9.insertSemicolon = function() {
      if (this.canInsertSemicolon()) {
        if (this.options.onInsertedSemicolon)
          { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }
        return true
      }
    };

    // Consume a semicolon, or, failing that, see if we are allowed to
    // pretend that there is a semicolon at this position.

    pp$9.semicolon = function() {
      if (!this.eat(types$1.semi) && !this.insertSemicolon()) { this.unexpected(); }
    };

    pp$9.afterTrailingComma = function(tokType, notNext) {
      if (this.type === tokType) {
        if (this.options.onTrailingComma)
          { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }
        if (!notNext)
          { this.next(); }
        return true
      }
    };

    // Expect a token of a given type. If found, consume it, otherwise,
    // raise an unexpected token error.

    pp$9.expect = function(type) {
      this.eat(type) || this.unexpected();
    };

    // Raise an unexpected token error.

    pp$9.unexpected = function(pos) {
      this.raise(pos != null ? pos : this.start, "Unexpected token");
    };

    var DestructuringErrors = function DestructuringErrors() {
      this.shorthandAssign =
      this.trailingComma =
      this.parenthesizedAssign =
      this.parenthesizedBind =
      this.doubleProto =
        -1;
    };

    pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
      if (!refDestructuringErrors) { return }
      if (refDestructuringErrors.trailingComma > -1)
        { this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element"); }
      var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
      if (parens > -1) { this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern"); }
    };

    pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
      if (!refDestructuringErrors) { return false }
      var shorthandAssign = refDestructuringErrors.shorthandAssign;
      var doubleProto = refDestructuringErrors.doubleProto;
      if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }
      if (shorthandAssign >= 0)
        { this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"); }
      if (doubleProto >= 0)
        { this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property"); }
    };

    pp$9.checkYieldAwaitInDefaultParams = function() {
      if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))
        { this.raise(this.yieldPos, "Yield expression cannot be a default value"); }
      if (this.awaitPos)
        { this.raise(this.awaitPos, "Await expression cannot be a default value"); }
    };

    pp$9.isSimpleAssignTarget = function(expr) {
      if (expr.type === "ParenthesizedExpression")
        { return this.isSimpleAssignTarget(expr.expression) }
      return expr.type === "Identifier" || expr.type === "MemberExpression"
    };

    var pp$8 = Parser.prototype;

    // ### Statement parsing

    // Parse a program. Initializes the parser, reads any number of
    // statements, and wraps them in a Program node.  Optionally takes a
    // `program` argument.  If present, the statements will be appended
    // to its body instead of creating a new node.

    pp$8.parseTopLevel = function(node) {
      var exports = Object.create(null);
      if (!node.body) { node.body = []; }
      while (this.type !== types$1.eof) {
        var stmt = this.parseStatement(null, true, exports);
        node.body.push(stmt);
      }
      if (this.inModule)
        { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)
          {
            var name = list[i];

            this.raiseRecoverable(this.undefinedExports[name].start, ("Export '" + name + "' is not defined"));
          } }
      this.adaptDirectivePrologue(node.body);
      this.next();
      node.sourceType = this.options.sourceType;
      return this.finishNode(node, "Program")
    };

    var loopLabel = {kind: "loop"}, switchLabel = {kind: "switch"};

    pp$8.isLet = function(context) {
      if (this.options.ecmaVersion < 6 || !this.isContextual("let")) { return false }
      skipWhiteSpace.lastIndex = this.pos;
      var skip = skipWhiteSpace.exec(this.input);
      var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
      // For ambiguous cases, determine if a LexicalDeclaration (or only a
      // Statement) is allowed here. If context is not empty then only a Statement
      // is allowed. However, `let [` is an explicit negative lookahead for
      // ExpressionStatement, so special-case it first.
      if (nextCh === 91 || nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true } // '[', '/', astral
      if (context) { return false }

      if (nextCh === 123) { return true } // '{'
      if (isIdentifierStart(nextCh, true)) {
        var pos = next + 1;
        while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) { ++pos; }
        if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true }
        var ident = this.input.slice(next, pos);
        if (!keywordRelationalOperator.test(ident)) { return true }
      }
      return false
    };

    // check 'async [no LineTerminator here] function'
    // - 'async /*foo*/ function' is OK.
    // - 'async /*\n*/ function' is invalid.
    pp$8.isAsyncFunction = function() {
      if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
        { return false }

      skipWhiteSpace.lastIndex = this.pos;
      var skip = skipWhiteSpace.exec(this.input);
      var next = this.pos + skip[0].length, after;
      return !lineBreak.test(this.input.slice(this.pos, next)) &&
        this.input.slice(next, next + 8) === "function" &&
        (next + 8 === this.input.length ||
         !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00))
    };

    // Parse a single statement.
    //
    // If expecting a statement and finding a slash operator, parse a
    // regular expression literal. This is to handle cases like
    // `if (foo) /blah/.exec(foo)`, where looking at the previous token
    // does not help.

    pp$8.parseStatement = function(context, topLevel, exports) {
      var starttype = this.type, node = this.startNode(), kind;

      if (this.isLet(context)) {
        starttype = types$1._var;
        kind = "let";
      }

      // Most types of statements are recognized by the keyword they
      // start with. Many are trivial to parse, some require a bit of
      // complexity.

      switch (starttype) {
      case types$1._break: case types$1._continue: return this.parseBreakContinueStatement(node, starttype.keyword)
      case types$1._debugger: return this.parseDebuggerStatement(node)
      case types$1._do: return this.parseDoStatement(node)
      case types$1._for: return this.parseForStatement(node)
      case types$1._function:
        // Function as sole body of either an if statement or a labeled statement
        // works, but not when it is part of a labeled statement that is the sole
        // body of an if statement.
        if ((context && (this.strict || context !== "if" && context !== "label")) && this.options.ecmaVersion >= 6) { this.unexpected(); }
        return this.parseFunctionStatement(node, false, !context)
      case types$1._class:
        if (context) { this.unexpected(); }
        return this.parseClass(node, true)
      case types$1._if: return this.parseIfStatement(node)
      case types$1._return: return this.parseReturnStatement(node)
      case types$1._switch: return this.parseSwitchStatement(node)
      case types$1._throw: return this.parseThrowStatement(node)
      case types$1._try: return this.parseTryStatement(node)
      case types$1._const: case types$1._var:
        kind = kind || this.value;
        if (context && kind !== "var") { this.unexpected(); }
        return this.parseVarStatement(node, kind)
      case types$1._while: return this.parseWhileStatement(node)
      case types$1._with: return this.parseWithStatement(node)
      case types$1.braceL: return this.parseBlock(true, node)
      case types$1.semi: return this.parseEmptyStatement(node)
      case types$1._export:
      case types$1._import:
        if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input);
          var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
          if (nextCh === 40 || nextCh === 46) // '(' or '.'
            { return this.parseExpressionStatement(node, this.parseExpression()) }
        }

        if (!this.options.allowImportExportEverywhere) {
          if (!topLevel)
            { this.raise(this.start, "'import' and 'export' may only appear at the top level"); }
          if (!this.inModule)
            { this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'"); }
        }
        return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports)

        // If the statement does not start with a statement keyword or a
        // brace, it's an ExpressionStatement or LabeledStatement. We
        // simply start parsing an expression, and afterwards, if the
        // next token is a colon and the expression was a simple
        // Identifier node, we switch to interpreting it as a label.
      default:
        if (this.isAsyncFunction()) {
          if (context) { this.unexpected(); }
          this.next();
          return this.parseFunctionStatement(node, true, !context)
        }

        var maybeName = this.value, expr = this.parseExpression();
        if (starttype === types$1.name && expr.type === "Identifier" && this.eat(types$1.colon))
          { return this.parseLabeledStatement(node, maybeName, expr, context) }
        else { return this.parseExpressionStatement(node, expr) }
      }
    };

    pp$8.parseBreakContinueStatement = function(node, keyword) {
      var isBreak = keyword === "break";
      this.next();
      if (this.eat(types$1.semi) || this.insertSemicolon()) { node.label = null; }
      else if (this.type !== types$1.name) { this.unexpected(); }
      else {
        node.label = this.parseIdent();
        this.semicolon();
      }

      // Verify that there is an actual destination to break or
      // continue to.
      var i = 0;
      for (; i < this.labels.length; ++i) {
        var lab = this.labels[i];
        if (node.label == null || lab.name === node.label.name) {
          if (lab.kind != null && (isBreak || lab.kind === "loop")) { break }
          if (node.label && isBreak) { break }
        }
      }
      if (i === this.labels.length) { this.raise(node.start, "Unsyntactic " + keyword); }
      return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement")
    };

    pp$8.parseDebuggerStatement = function(node) {
      this.next();
      this.semicolon();
      return this.finishNode(node, "DebuggerStatement")
    };

    pp$8.parseDoStatement = function(node) {
      this.next();
      this.labels.push(loopLabel);
      node.body = this.parseStatement("do");
      this.labels.pop();
      this.expect(types$1._while);
      node.test = this.parseParenExpression();
      if (this.options.ecmaVersion >= 6)
        { this.eat(types$1.semi); }
      else
        { this.semicolon(); }
      return this.finishNode(node, "DoWhileStatement")
    };

    // Disambiguating between a `for` and a `for`/`in` or `for`/`of`
    // loop is non-trivial. Basically, we have to parse the init `var`
    // statement or expression, disallowing the `in` operator (see
    // the second parameter to `parseExpression`), and then check
    // whether the next token is `in` or `of`. When there is no init
    // part (semicolon immediately after the opening parenthesis), it
    // is a regular `for` loop.

    pp$8.parseForStatement = function(node) {
      this.next();
      var awaitAt = (this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await")) ? this.lastTokStart : -1;
      this.labels.push(loopLabel);
      this.enterScope(0);
      this.expect(types$1.parenL);
      if (this.type === types$1.semi) {
        if (awaitAt > -1) { this.unexpected(awaitAt); }
        return this.parseFor(node, null)
      }
      var isLet = this.isLet();
      if (this.type === types$1._var || this.type === types$1._const || isLet) {
        var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
        this.next();
        this.parseVar(init$1, true, kind);
        this.finishNode(init$1, "VariableDeclaration");
        if ((this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) && init$1.declarations.length === 1) {
          if (this.options.ecmaVersion >= 9) {
            if (this.type === types$1._in) {
              if (awaitAt > -1) { this.unexpected(awaitAt); }
            } else { node.await = awaitAt > -1; }
          }
          return this.parseForIn(node, init$1)
        }
        if (awaitAt > -1) { this.unexpected(awaitAt); }
        return this.parseFor(node, init$1)
      }
      var startsWithLet = this.isContextual("let"), isForOf = false;
      var refDestructuringErrors = new DestructuringErrors;
      var init = this.parseExpression(awaitAt > -1 ? "await" : true, refDestructuringErrors);
      if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
        if (this.options.ecmaVersion >= 9) {
          if (this.type === types$1._in) {
            if (awaitAt > -1) { this.unexpected(awaitAt); }
          } else { node.await = awaitAt > -1; }
        }
        if (startsWithLet && isForOf) { this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'."); }
        this.toAssignable(init, false, refDestructuringErrors);
        this.checkLValPattern(init);
        return this.parseForIn(node, init)
      } else {
        this.checkExpressionErrors(refDestructuringErrors, true);
      }
      if (awaitAt > -1) { this.unexpected(awaitAt); }
      return this.parseFor(node, init)
    };

    pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {
      this.next();
      return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)
    };

    pp$8.parseIfStatement = function(node) {
      this.next();
      node.test = this.parseParenExpression();
      // allow function declarations in branches, but only in non-strict mode
      node.consequent = this.parseStatement("if");
      node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null;
      return this.finishNode(node, "IfStatement")
    };

    pp$8.parseReturnStatement = function(node) {
      if (!this.inFunction && !this.options.allowReturnOutsideFunction)
        { this.raise(this.start, "'return' outside of function"); }
      this.next();

      // In `return` (and `break`/`continue`), the keywords with
      // optional arguments, we eagerly look for a semicolon or the
      // possibility to insert one.

      if (this.eat(types$1.semi) || this.insertSemicolon()) { node.argument = null; }
      else { node.argument = this.parseExpression(); this.semicolon(); }
      return this.finishNode(node, "ReturnStatement")
    };

    pp$8.parseSwitchStatement = function(node) {
      this.next();
      node.discriminant = this.parseParenExpression();
      node.cases = [];
      this.expect(types$1.braceL);
      this.labels.push(switchLabel);
      this.enterScope(0);

      // Statements under must be grouped (by label) in SwitchCase
      // nodes. `cur` is used to keep the node that we are currently
      // adding statements to.

      var cur;
      for (var sawDefault = false; this.type !== types$1.braceR;) {
        if (this.type === types$1._case || this.type === types$1._default) {
          var isCase = this.type === types$1._case;
          if (cur) { this.finishNode(cur, "SwitchCase"); }
          node.cases.push(cur = this.startNode());
          cur.consequent = [];
          this.next();
          if (isCase) {
            cur.test = this.parseExpression();
          } else {
            if (sawDefault) { this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"); }
            sawDefault = true;
            cur.test = null;
          }
          this.expect(types$1.colon);
        } else {
          if (!cur) { this.unexpected(); }
          cur.consequent.push(this.parseStatement(null));
        }
      }
      this.exitScope();
      if (cur) { this.finishNode(cur, "SwitchCase"); }
      this.next(); // Closing brace
      this.labels.pop();
      return this.finishNode(node, "SwitchStatement")
    };

    pp$8.parseThrowStatement = function(node) {
      this.next();
      if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))
        { this.raise(this.lastTokEnd, "Illegal newline after throw"); }
      node.argument = this.parseExpression();
      this.semicolon();
      return this.finishNode(node, "ThrowStatement")
    };

    // Reused empty array added for node fields that are always empty.

    var empty$1 = [];

    pp$8.parseTryStatement = function(node) {
      this.next();
      node.block = this.parseBlock();
      node.handler = null;
      if (this.type === types$1._catch) {
        var clause = this.startNode();
        this.next();
        if (this.eat(types$1.parenL)) {
          clause.param = this.parseBindingAtom();
          var simple = clause.param.type === "Identifier";
          this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
          this.checkLValPattern(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
          this.expect(types$1.parenR);
        } else {
          if (this.options.ecmaVersion < 10) { this.unexpected(); }
          clause.param = null;
          this.enterScope(0);
        }
        clause.body = this.parseBlock(false);
        this.exitScope();
        node.handler = this.finishNode(clause, "CatchClause");
      }
      node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;
      if (!node.handler && !node.finalizer)
        { this.raise(node.start, "Missing catch or finally clause"); }
      return this.finishNode(node, "TryStatement")
    };

    pp$8.parseVarStatement = function(node, kind) {
      this.next();
      this.parseVar(node, false, kind);
      this.semicolon();
      return this.finishNode(node, "VariableDeclaration")
    };

    pp$8.parseWhileStatement = function(node) {
      this.next();
      node.test = this.parseParenExpression();
      this.labels.push(loopLabel);
      node.body = this.parseStatement("while");
      this.labels.pop();
      return this.finishNode(node, "WhileStatement")
    };

    pp$8.parseWithStatement = function(node) {
      if (this.strict) { this.raise(this.start, "'with' in strict mode"); }
      this.next();
      node.object = this.parseParenExpression();
      node.body = this.parseStatement("with");
      return this.finishNode(node, "WithStatement")
    };

    pp$8.parseEmptyStatement = function(node) {
      this.next();
      return this.finishNode(node, "EmptyStatement")
    };

    pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {
      for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)
        {
        var label = list[i$1];

        if (label.name === maybeName)
          { this.raise(expr.start, "Label '" + maybeName + "' is already declared");
      } }
      var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null;
      for (var i = this.labels.length - 1; i >= 0; i--) {
        var label$1 = this.labels[i];
        if (label$1.statementStart === node.start) {
          // Update information about previous labels on this node
          label$1.statementStart = this.start;
          label$1.kind = kind;
        } else { break }
      }
      this.labels.push({name: maybeName, kind: kind, statementStart: this.start});
      node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
      this.labels.pop();
      node.label = expr;
      return this.finishNode(node, "LabeledStatement")
    };

    pp$8.parseExpressionStatement = function(node, expr) {
      node.expression = expr;
      this.semicolon();
      return this.finishNode(node, "ExpressionStatement")
    };

    // Parse a semicolon-enclosed block of statements, handling `"use
    // strict"` declarations when `allowStrict` is true (used for
    // function bodies).

    pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {
      if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;
      if ( node === void 0 ) node = this.startNode();

      node.body = [];
      this.expect(types$1.braceL);
      if (createNewLexicalScope) { this.enterScope(0); }
      while (this.type !== types$1.braceR) {
        var stmt = this.parseStatement(null);
        node.body.push(stmt);
      }
      if (exitStrict) { this.strict = false; }
      this.next();
      if (createNewLexicalScope) { this.exitScope(); }
      return this.finishNode(node, "BlockStatement")
    };

    // Parse a regular `for` loop. The disambiguation code in
    // `parseStatement` will already have parsed the init statement or
    // expression.

    pp$8.parseFor = function(node, init) {
      node.init = init;
      this.expect(types$1.semi);
      node.test = this.type === types$1.semi ? null : this.parseExpression();
      this.expect(types$1.semi);
      node.update = this.type === types$1.parenR ? null : this.parseExpression();
      this.expect(types$1.parenR);
      node.body = this.parseStatement("for");
      this.exitScope();
      this.labels.pop();
      return this.finishNode(node, "ForStatement")
    };

    // Parse a `for`/`in` and `for`/`of` loop, which are almost
    // same from parser's perspective.

    pp$8.parseForIn = function(node, init) {
      var isForIn = this.type === types$1._in;
      this.next();

      if (
        init.type === "VariableDeclaration" &&
        init.declarations[0].init != null &&
        (
          !isForIn ||
          this.options.ecmaVersion < 8 ||
          this.strict ||
          init.kind !== "var" ||
          init.declarations[0].id.type !== "Identifier"
        )
      ) {
        this.raise(
          init.start,
          ((isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer")
        );
      }
      node.left = init;
      node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
      this.expect(types$1.parenR);
      node.body = this.parseStatement("for");
      this.exitScope();
      this.labels.pop();
      return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement")
    };

    // Parse a list of variable declarations.

    pp$8.parseVar = function(node, isFor, kind) {
      node.declarations = [];
      node.kind = kind;
      for (;;) {
        var decl = this.startNode();
        this.parseVarId(decl, kind);
        if (this.eat(types$1.eq)) {
          decl.init = this.parseMaybeAssign(isFor);
        } else if (kind === "const" && !(this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual("of")))) {
          this.unexpected();
        } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types$1._in || this.isContextual("of")))) {
          this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
        } else {
          decl.init = null;
        }
        node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
        if (!this.eat(types$1.comma)) { break }
      }
      return node
    };

    pp$8.parseVarId = function(decl, kind) {
      decl.id = this.parseBindingAtom();
      this.checkLValPattern(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
    };

    var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;

    // Parse a function declaration or literal (depending on the
    // `statement & FUNC_STATEMENT`).

    // Remove `allowExpressionBody` for 7.0.0, as it is only called with false
    pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
      this.initFunction(node);
      if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
        if (this.type === types$1.star && (statement & FUNC_HANGING_STATEMENT))
          { this.unexpected(); }
        node.generator = this.eat(types$1.star);
      }
      if (this.options.ecmaVersion >= 8)
        { node.async = !!isAsync; }

      if (statement & FUNC_STATEMENT) {
        node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types$1.name ? null : this.parseIdent();
        if (node.id && !(statement & FUNC_HANGING_STATEMENT))
          // If it is a regular function declaration in sloppy mode, then it is
          // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding
          // mode depends on properties of the current scope (see
          // treatFunctionsAsVar).
          { this.checkLValSimple(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }
      }

      var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
      this.yieldPos = 0;
      this.awaitPos = 0;
      this.awaitIdentPos = 0;
      this.enterScope(functionFlags(node.async, node.generator));

      if (!(statement & FUNC_STATEMENT))
        { node.id = this.type === types$1.name ? this.parseIdent() : null; }

      this.parseFunctionParams(node);
      this.parseFunctionBody(node, allowExpressionBody, false, forInit);

      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      this.awaitIdentPos = oldAwaitIdentPos;
      return this.finishNode(node, (statement & FUNC_STATEMENT) ? "FunctionDeclaration" : "FunctionExpression")
    };

    pp$8.parseFunctionParams = function(node) {
      this.expect(types$1.parenL);
      node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
      this.checkYieldAwaitInDefaultParams();
    };

    // Parse a class declaration or literal (depending on the
    // `isStatement` parameter).

    pp$8.parseClass = function(node, isStatement) {
      this.next();

      // ecma-262 14.6 Class Definitions
      // A class definition is always strict mode code.
      var oldStrict = this.strict;
      this.strict = true;

      this.parseClassId(node, isStatement);
      this.parseClassSuper(node);
      var privateNameMap = this.enterClassBody();
      var classBody = this.startNode();
      var hadConstructor = false;
      classBody.body = [];
      this.expect(types$1.braceL);
      while (this.type !== types$1.braceR) {
        var element = this.parseClassElement(node.superClass !== null);
        if (element) {
          classBody.body.push(element);
          if (element.type === "MethodDefinition" && element.kind === "constructor") {
            if (hadConstructor) { this.raise(element.start, "Duplicate constructor in the same class"); }
            hadConstructor = true;
          } else if (element.key && element.key.type === "PrivateIdentifier" && isPrivateNameConflicted(privateNameMap, element)) {
            this.raiseRecoverable(element.key.start, ("Identifier '#" + (element.key.name) + "' has already been declared"));
          }
        }
      }
      this.strict = oldStrict;
      this.next();
      node.body = this.finishNode(classBody, "ClassBody");
      this.exitClassBody();
      return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression")
    };

    pp$8.parseClassElement = function(constructorAllowsSuper) {
      if (this.eat(types$1.semi)) { return null }

      var ecmaVersion = this.options.ecmaVersion;
      var node = this.startNode();
      var keyName = "";
      var isGenerator = false;
      var isAsync = false;
      var kind = "method";
      var isStatic = false;

      if (this.eatContextual("static")) {
        // Parse static init block
        if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {
          this.parseClassStaticBlock(node);
          return node
        }
        if (this.isClassElementNameStart() || this.type === types$1.star) {
          isStatic = true;
        } else {
          keyName = "static";
        }
      }
      node.static = isStatic;
      if (!keyName && ecmaVersion >= 8 && this.eatContextual("async")) {
        if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {
          isAsync = true;
        } else {
          keyName = "async";
        }
      }
      if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {
        isGenerator = true;
      }
      if (!keyName && !isAsync && !isGenerator) {
        var lastValue = this.value;
        if (this.eatContextual("get") || this.eatContextual("set")) {
          if (this.isClassElementNameStart()) {
            kind = lastValue;
          } else {
            keyName = lastValue;
          }
        }
      }

      // Parse element name
      if (keyName) {
        // 'async', 'get', 'set', or 'static' were not a keyword contextually.
        // The last token is any of those. Make it the element name.
        node.computed = false;
        node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);
        node.key.name = keyName;
        this.finishNode(node.key, "Identifier");
      } else {
        this.parseClassElementName(node);
      }

      // Parse element value
      if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== "method" || isGenerator || isAsync) {
        var isConstructor = !node.static && checkKeyName(node, "constructor");
        var allowsDirectSuper = isConstructor && constructorAllowsSuper;
        // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.
        if (isConstructor && kind !== "method") { this.raise(node.key.start, "Constructor can't have get/set modifier"); }
        node.kind = isConstructor ? "constructor" : kind;
        this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
      } else {
        this.parseClassField(node);
      }

      return node
    };

    pp$8.isClassElementNameStart = function() {
      return (
        this.type === types$1.name ||
        this.type === types$1.privateId ||
        this.type === types$1.num ||
        this.type === types$1.string ||
        this.type === types$1.bracketL ||
        this.type.keyword
      )
    };

    pp$8.parseClassElementName = function(element) {
      if (this.type === types$1.privateId) {
        if (this.value === "constructor") {
          this.raise(this.start, "Classes can't have an element named '#constructor'");
        }
        element.computed = false;
        element.key = this.parsePrivateIdent();
      } else {
        this.parsePropertyName(element);
      }
    };

    pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
      // Check key and flags
      var key = method.key;
      if (method.kind === "constructor") {
        if (isGenerator) { this.raise(key.start, "Constructor can't be a generator"); }
        if (isAsync) { this.raise(key.start, "Constructor can't be an async method"); }
      } else if (method.static && checkKeyName(method, "prototype")) {
        this.raise(key.start, "Classes may not have a static property named prototype");
      }

      // Parse value
      var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);

      // Check value
      if (method.kind === "get" && value.params.length !== 0)
        { this.raiseRecoverable(value.start, "getter should have no params"); }
      if (method.kind === "set" && value.params.length !== 1)
        { this.raiseRecoverable(value.start, "setter should have exactly one param"); }
      if (method.kind === "set" && value.params[0].type === "RestElement")
        { this.raiseRecoverable(value.params[0].start, "Setter cannot use rest params"); }

      return this.finishNode(method, "MethodDefinition")
    };

    pp$8.parseClassField = function(field) {
      if (checkKeyName(field, "constructor")) {
        this.raise(field.key.start, "Classes can't have a field named 'constructor'");
      } else if (field.static && checkKeyName(field, "prototype")) {
        this.raise(field.key.start, "Classes can't have a static field named 'prototype'");
      }

      if (this.eat(types$1.eq)) {
        // To raise SyntaxError if 'arguments' exists in the initializer.
        var scope = this.currentThisScope();
        var inClassFieldInit = scope.inClassFieldInit;
        scope.inClassFieldInit = true;
        field.value = this.parseMaybeAssign();
        scope.inClassFieldInit = inClassFieldInit;
      } else {
        field.value = null;
      }
      this.semicolon();

      return this.finishNode(field, "PropertyDefinition")
    };

    pp$8.parseClassStaticBlock = function(node) {
      node.body = [];

      var oldLabels = this.labels;
      this.labels = [];
      this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);
      while (this.type !== types$1.braceR) {
        var stmt = this.parseStatement(null);
        node.body.push(stmt);
      }
      this.next();
      this.exitScope();
      this.labels = oldLabels;

      return this.finishNode(node, "StaticBlock")
    };

    pp$8.parseClassId = function(node, isStatement) {
      if (this.type === types$1.name) {
        node.id = this.parseIdent();
        if (isStatement)
          { this.checkLValSimple(node.id, BIND_LEXICAL, false); }
      } else {
        if (isStatement === true)
          { this.unexpected(); }
        node.id = null;
      }
    };

    pp$8.parseClassSuper = function(node) {
      node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(false) : null;
    };

    pp$8.enterClassBody = function() {
      var element = {declared: Object.create(null), used: []};
      this.privateNameStack.push(element);
      return element.declared
    };

    pp$8.exitClassBody = function() {
      var ref = this.privateNameStack.pop();
      var declared = ref.declared;
      var used = ref.used;
      var len = this.privateNameStack.length;
      var parent = len === 0 ? null : this.privateNameStack[len - 1];
      for (var i = 0; i < used.length; ++i) {
        var id = used[i];
        if (!hasOwn(declared, id.name)) {
          if (parent) {
            parent.used.push(id);
          } else {
            this.raiseRecoverable(id.start, ("Private field '#" + (id.name) + "' must be declared in an enclosing class"));
          }
        }
      }
    };

    function isPrivateNameConflicted(privateNameMap, element) {
      var name = element.key.name;
      var curr = privateNameMap[name];

      var next = "true";
      if (element.type === "MethodDefinition" && (element.kind === "get" || element.kind === "set")) {
        next = (element.static ? "s" : "i") + element.kind;
      }

      // `class { get #a(){}; static set #a(_){} }` is also conflict.
      if (
        curr === "iget" && next === "iset" ||
        curr === "iset" && next === "iget" ||
        curr === "sget" && next === "sset" ||
        curr === "sset" && next === "sget"
      ) {
        privateNameMap[name] = "true";
        return false
      } else if (!curr) {
        privateNameMap[name] = next;
        return false
      } else {
        return true
      }
    }

    function checkKeyName(node, name) {
      var computed = node.computed;
      var key = node.key;
      return !computed && (
        key.type === "Identifier" && key.name === name ||
        key.type === "Literal" && key.value === name
      )
    }

    // Parses module export declaration.

    pp$8.parseExport = function(node, exports) {
      this.next();
      // export * from '...'
      if (this.eat(types$1.star)) {
        if (this.options.ecmaVersion >= 11) {
          if (this.eatContextual("as")) {
            node.exported = this.parseModuleExportName();
            this.checkExport(exports, node.exported, this.lastTokStart);
          } else {
            node.exported = null;
          }
        }
        this.expectContextual("from");
        if (this.type !== types$1.string) { this.unexpected(); }
        node.source = this.parseExprAtom();
        this.semicolon();
        return this.finishNode(node, "ExportAllDeclaration")
      }
      if (this.eat(types$1._default)) { // export default ...
        this.checkExport(exports, "default", this.lastTokStart);
        var isAsync;
        if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
          var fNode = this.startNode();
          this.next();
          if (isAsync) { this.next(); }
          node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
        } else if (this.type === types$1._class) {
          var cNode = this.startNode();
          node.declaration = this.parseClass(cNode, "nullableID");
        } else {
          node.declaration = this.parseMaybeAssign();
          this.semicolon();
        }
        return this.finishNode(node, "ExportDefaultDeclaration")
      }
      // export var|const|let|function|class ...
      if (this.shouldParseExportStatement()) {
        node.declaration = this.parseStatement(null);
        if (node.declaration.type === "VariableDeclaration")
          { this.checkVariableExport(exports, node.declaration.declarations); }
        else
          { this.checkExport(exports, node.declaration.id, node.declaration.id.start); }
        node.specifiers = [];
        node.source = null;
      } else { // export { x, y as z } [from '...']
        node.declaration = null;
        node.specifiers = this.parseExportSpecifiers(exports);
        if (this.eatContextual("from")) {
          if (this.type !== types$1.string) { this.unexpected(); }
          node.source = this.parseExprAtom();
        } else {
          for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
            // check for keywords used as local names
            var spec = list[i];

            this.checkUnreserved(spec.local);
            // check if export is defined
            this.checkLocalExport(spec.local);

            if (spec.local.type === "Literal") {
              this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
            }
          }

          node.source = null;
        }
        this.semicolon();
      }
      return this.finishNode(node, "ExportNamedDeclaration")
    };

    pp$8.checkExport = function(exports, name, pos) {
      if (!exports) { return }
      if (typeof name !== "string")
        { name = name.type === "Identifier" ? name.name : name.value; }
      if (hasOwn(exports, name))
        { this.raiseRecoverable(pos, "Duplicate export '" + name + "'"); }
      exports[name] = true;
    };

    pp$8.checkPatternExport = function(exports, pat) {
      var type = pat.type;
      if (type === "Identifier")
        { this.checkExport(exports, pat, pat.start); }
      else if (type === "ObjectPattern")
        { for (var i = 0, list = pat.properties; i < list.length; i += 1)
          {
            var prop = list[i];

            this.checkPatternExport(exports, prop);
          } }
      else if (type === "ArrayPattern")
        { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
          var elt = list$1[i$1];

            if (elt) { this.checkPatternExport(exports, elt); }
        } }
      else if (type === "Property")
        { this.checkPatternExport(exports, pat.value); }
      else if (type === "AssignmentPattern")
        { this.checkPatternExport(exports, pat.left); }
      else if (type === "RestElement")
        { this.checkPatternExport(exports, pat.argument); }
      else if (type === "ParenthesizedExpression")
        { this.checkPatternExport(exports, pat.expression); }
    };

    pp$8.checkVariableExport = function(exports, decls) {
      if (!exports) { return }
      for (var i = 0, list = decls; i < list.length; i += 1)
        {
        var decl = list[i];

        this.checkPatternExport(exports, decl.id);
      }
    };

    pp$8.shouldParseExportStatement = function() {
      return this.type.keyword === "var" ||
        this.type.keyword === "const" ||
        this.type.keyword === "class" ||
        this.type.keyword === "function" ||
        this.isLet() ||
        this.isAsyncFunction()
    };

    // Parses a comma-separated list of module exports.

    pp$8.parseExportSpecifiers = function(exports) {
      var nodes = [], first = true;
      // export { x, y as z } [from '...']
      this.expect(types$1.braceL);
      while (!this.eat(types$1.braceR)) {
        if (!first) {
          this.expect(types$1.comma);
          if (this.afterTrailingComma(types$1.braceR)) { break }
        } else { first = false; }

        var node = this.startNode();
        node.local = this.parseModuleExportName();
        node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local;
        this.checkExport(
          exports,
          node.exported,
          node.exported.start
        );
        nodes.push(this.finishNode(node, "ExportSpecifier"));
      }
      return nodes
    };

    // Parses import declaration.

    pp$8.parseImport = function(node) {
      this.next();
      // import '...'
      if (this.type === types$1.string) {
        node.specifiers = empty$1;
        node.source = this.parseExprAtom();
      } else {
        node.specifiers = this.parseImportSpecifiers();
        this.expectContextual("from");
        node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();
      }
      this.semicolon();
      return this.finishNode(node, "ImportDeclaration")
    };

    // Parses a comma-separated list of module imports.

    pp$8.parseImportSpecifiers = function() {
      var nodes = [], first = true;
      if (this.type === types$1.name) {
        // import defaultObj, { x, y as z } from '...'
        var node = this.startNode();
        node.local = this.parseIdent();
        this.checkLValSimple(node.local, BIND_LEXICAL);
        nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
        if (!this.eat(types$1.comma)) { return nodes }
      }
      if (this.type === types$1.star) {
        var node$1 = this.startNode();
        this.next();
        this.expectContextual("as");
        node$1.local = this.parseIdent();
        this.checkLValSimple(node$1.local, BIND_LEXICAL);
        nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
        return nodes
      }
      this.expect(types$1.braceL);
      while (!this.eat(types$1.braceR)) {
        if (!first) {
          this.expect(types$1.comma);
          if (this.afterTrailingComma(types$1.braceR)) { break }
        } else { first = false; }

        var node$2 = this.startNode();
        node$2.imported = this.parseModuleExportName();
        if (this.eatContextual("as")) {
          node$2.local = this.parseIdent();
        } else {
          this.checkUnreserved(node$2.imported);
          node$2.local = node$2.imported;
        }
        this.checkLValSimple(node$2.local, BIND_LEXICAL);
        nodes.push(this.finishNode(node$2, "ImportSpecifier"));
      }
      return nodes
    };

    pp$8.parseModuleExportName = function() {
      if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
        var stringLiteral = this.parseLiteral(this.value);
        if (loneSurrogate.test(stringLiteral.value)) {
          this.raise(stringLiteral.start, "An export name cannot include a lone surrogate.");
        }
        return stringLiteral
      }
      return this.parseIdent(true)
    };

    // Set `ExpressionStatement#directive` property for directive prologues.
    pp$8.adaptDirectivePrologue = function(statements) {
      for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
        statements[i].directive = statements[i].expression.raw.slice(1, -1);
      }
    };
    pp$8.isDirectiveCandidate = function(statement) {
      return (
        this.options.ecmaVersion >= 5 &&
        statement.type === "ExpressionStatement" &&
        statement.expression.type === "Literal" &&
        typeof statement.expression.value === "string" &&
        // Reject parenthesized strings.
        (this.input[statement.start] === "\"" || this.input[statement.start] === "'")
      )
    };

    var pp$7 = Parser.prototype;

    // Convert existing expression atom to assignable pattern
    // if possible.

    pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {
      if (this.options.ecmaVersion >= 6 && node) {
        switch (node.type) {
        case "Identifier":
          if (this.inAsync && node.name === "await")
            { this.raise(node.start, "Cannot use 'await' as identifier inside an async function"); }
          break

        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
        case "RestElement":
          break

        case "ObjectExpression":
          node.type = "ObjectPattern";
          if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
          for (var i = 0, list = node.properties; i < list.length; i += 1) {
            var prop = list[i];

          this.toAssignable(prop, isBinding);
            // Early error:
            //   AssignmentRestProperty[Yield, Await] :
            //     `...` DestructuringAssignmentTarget[Yield, Await]
            //
            //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.
            if (
              prop.type === "RestElement" &&
              (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")
            ) {
              this.raise(prop.argument.start, "Unexpected token");
            }
          }
          break

        case "Property":
          // AssignmentProperty has type === "Property"
          if (node.kind !== "init") { this.raise(node.key.start, "Object pattern can't contain getter or setter"); }
          this.toAssignable(node.value, isBinding);
          break

        case "ArrayExpression":
          node.type = "ArrayPattern";
          if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
          this.toAssignableList(node.elements, isBinding);
          break

        case "SpreadElement":
          node.type = "RestElement";
          this.toAssignable(node.argument, isBinding);
          if (node.argument.type === "AssignmentPattern")
            { this.raise(node.argument.start, "Rest elements cannot have a default value"); }
          break

        case "AssignmentExpression":
          if (node.operator !== "=") { this.raise(node.left.end, "Only '=' operator can be used for specifying default value."); }
          node.type = "AssignmentPattern";
          delete node.operator;
          this.toAssignable(node.left, isBinding);
          break

        case "ParenthesizedExpression":
          this.toAssignable(node.expression, isBinding, refDestructuringErrors);
          break

        case "ChainExpression":
          this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
          break

        case "MemberExpression":
          if (!isBinding) { break }

        default:
          this.raise(node.start, "Assigning to rvalue");
        }
      } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
      return node
    };

    // Convert list of expression atoms to binding list.

    pp$7.toAssignableList = function(exprList, isBinding) {
      var end = exprList.length;
      for (var i = 0; i < end; i++) {
        var elt = exprList[i];
        if (elt) { this.toAssignable(elt, isBinding); }
      }
      if (end) {
        var last = exprList[end - 1];
        if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier")
          { this.unexpected(last.argument.start); }
      }
      return exprList
    };

    // Parses spread element.

    pp$7.parseSpread = function(refDestructuringErrors) {
      var node = this.startNode();
      this.next();
      node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
      return this.finishNode(node, "SpreadElement")
    };

    pp$7.parseRestBinding = function() {
      var node = this.startNode();
      this.next();

      // RestElement inside of a function parameter must be an identifier
      if (this.options.ecmaVersion === 6 && this.type !== types$1.name)
        { this.unexpected(); }

      node.argument = this.parseBindingAtom();

      return this.finishNode(node, "RestElement")
    };

    // Parses lvalue (assignable) atom.

    pp$7.parseBindingAtom = function() {
      if (this.options.ecmaVersion >= 6) {
        switch (this.type) {
        case types$1.bracketL:
          var node = this.startNode();
          this.next();
          node.elements = this.parseBindingList(types$1.bracketR, true, true);
          return this.finishNode(node, "ArrayPattern")

        case types$1.braceL:
          return this.parseObj(true)
        }
      }
      return this.parseIdent()
    };

    pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
      var elts = [], first = true;
      while (!this.eat(close)) {
        if (first) { first = false; }
        else { this.expect(types$1.comma); }
        if (allowEmpty && this.type === types$1.comma) {
          elts.push(null);
        } else if (allowTrailingComma && this.afterTrailingComma(close)) {
          break
        } else if (this.type === types$1.ellipsis) {
          var rest = this.parseRestBinding();
          this.parseBindingListItem(rest);
          elts.push(rest);
          if (this.type === types$1.comma) { this.raise(this.start, "Comma is not permitted after the rest element"); }
          this.expect(close);
          break
        } else {
          var elem = this.parseMaybeDefault(this.start, this.startLoc);
          this.parseBindingListItem(elem);
          elts.push(elem);
        }
      }
      return elts
    };

    pp$7.parseBindingListItem = function(param) {
      return param
    };

    // Parses assignment pattern around given atom if possible.

    pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
      left = left || this.parseBindingAtom();
      if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) { return left }
      var node = this.startNodeAt(startPos, startLoc);
      node.left = left;
      node.right = this.parseMaybeAssign();
      return this.finishNode(node, "AssignmentPattern")
    };

    // The following three functions all verify that a node is an lvalue —
    // something that can be bound, or assigned to. In order to do so, they perform
    // a variety of checks:
    //
    // - Check that none of the bound/assigned-to identifiers are reserved words.
    // - Record name declarations for bindings in the appropriate scope.
    // - Check duplicate argument names, if checkClashes is set.
    //
    // If a complex binding pattern is encountered (e.g., object and array
    // destructuring), the entire pattern is recursively checked.
    //
    // There are three versions of checkLVal*() appropriate for different
    // circumstances:
    //
    // - checkLValSimple() shall be used if the syntactic construct supports
    //   nothing other than identifiers and member expressions. Parenthesized
    //   expressions are also correctly handled. This is generally appropriate for
    //   constructs for which the spec says
    //
    //   > It is a Syntax Error if AssignmentTargetType of [the production] is not
    //   > simple.
    //
    //   It is also appropriate for checking if an identifier is valid and not
    //   defined elsewhere, like import declarations or function/class identifiers.
    //
    //   Examples where this is used include:
    //     a += …;
    //     import a from '…';
    //   where a is the node to be checked.
    //
    // - checkLValPattern() shall be used if the syntactic construct supports
    //   anything checkLValSimple() supports, as well as object and array
    //   destructuring patterns. This is generally appropriate for constructs for
    //   which the spec says
    //
    //   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor
    //   > an ArrayLiteral and AssignmentTargetType of [the production] is not
    //   > simple.
    //
    //   Examples where this is used include:
    //     (a = …);
    //     const a = …;
    //     try { … } catch (a) { … }
    //   where a is the node to be checked.
    //
    // - checkLValInnerPattern() shall be used if the syntactic construct supports
    //   anything checkLValPattern() supports, as well as default assignment
    //   patterns, rest elements, and other constructs that may appear within an
    //   object or array destructuring pattern.
    //
    //   As a special case, function parameters also use checkLValInnerPattern(),
    //   as they also support defaults and rest constructs.
    //
    // These functions deliberately support both assignment and binding constructs,
    // as the logic for both is exceedingly similar. If the node is the target of
    // an assignment, then bindingType should be set to BIND_NONE. Otherwise, it
    // should be set to the appropriate BIND_* constant, like BIND_VAR or
    // BIND_LEXICAL.
    //
    // If the function is called with a non-BIND_NONE bindingType, then
    // additionally a checkClashes object may be specified to allow checking for
    // duplicate argument names. checkClashes is ignored if the provided construct
    // is an assignment (i.e., bindingType is BIND_NONE).

    pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
      if ( bindingType === void 0 ) bindingType = BIND_NONE;

      var isBind = bindingType !== BIND_NONE;

      switch (expr.type) {
      case "Identifier":
        if (this.strict && this.reservedWordsStrictBind.test(expr.name))
          { this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"); }
        if (isBind) {
          if (bindingType === BIND_LEXICAL && expr.name === "let")
            { this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"); }
          if (checkClashes) {
            if (hasOwn(checkClashes, expr.name))
              { this.raiseRecoverable(expr.start, "Argument name clash"); }
            checkClashes[expr.name] = true;
          }
          if (bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }
        }
        break

      case "ChainExpression":
        this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
        break

      case "MemberExpression":
        if (isBind) { this.raiseRecoverable(expr.start, "Binding member expression"); }
        break

      case "ParenthesizedExpression":
        if (isBind) { this.raiseRecoverable(expr.start, "Binding parenthesized expression"); }
        return this.checkLValSimple(expr.expression, bindingType, checkClashes)

      default:
        this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
      }
    };

    pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
      if ( bindingType === void 0 ) bindingType = BIND_NONE;

      switch (expr.type) {
      case "ObjectPattern":
        for (var i = 0, list = expr.properties; i < list.length; i += 1) {
          var prop = list[i];

        this.checkLValInnerPattern(prop, bindingType, checkClashes);
        }
        break

      case "ArrayPattern":
        for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
          var elem = list$1[i$1];

        if (elem) { this.checkLValInnerPattern(elem, bindingType, checkClashes); }
        }
        break

      default:
        this.checkLValSimple(expr, bindingType, checkClashes);
      }
    };

    pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
      if ( bindingType === void 0 ) bindingType = BIND_NONE;

      switch (expr.type) {
      case "Property":
        // AssignmentProperty has type === "Property"
        this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
        break

      case "AssignmentPattern":
        this.checkLValPattern(expr.left, bindingType, checkClashes);
        break

      case "RestElement":
        this.checkLValPattern(expr.argument, bindingType, checkClashes);
        break

      default:
        this.checkLValPattern(expr, bindingType, checkClashes);
      }
    };

    // The algorithm used to determine whether a regexp can appear at a

    var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
      this.token = token;
      this.isExpr = !!isExpr;
      this.preserveSpace = !!preserveSpace;
      this.override = override;
      this.generator = !!generator;
    };

    var types = {
      b_stat: new TokContext("{", false),
      b_expr: new TokContext("{", true),
      b_tmpl: new TokContext("${", false),
      p_stat: new TokContext("(", false),
      p_expr: new TokContext("(", true),
      q_tmpl: new TokContext("`", true, true, function (p) { return p.tryReadTemplateToken(); }),
      f_stat: new TokContext("function", false),
      f_expr: new TokContext("function", true),
      f_expr_gen: new TokContext("function", true, false, null, true),
      f_gen: new TokContext("function", false, false, null, true)
    };

    var pp$6 = Parser.prototype;

    pp$6.initialContext = function() {
      return [types.b_stat]
    };

    pp$6.curContext = function() {
      return this.context[this.context.length - 1]
    };

    pp$6.braceIsBlock = function(prevType) {
      var parent = this.curContext();
      if (parent === types.f_expr || parent === types.f_stat)
        { return true }
      if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr))
        { return !parent.isExpr }

      // The check for `tt.name && exprAllowed` detects whether we are
      // after a `yield` or `of` construct. See the `updateContext` for
      // `tt.name`.
      if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed)
        { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }
      if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow)
        { return true }
      if (prevType === types$1.braceL)
        { return parent === types.b_stat }
      if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name)
        { return false }
      return !this.exprAllowed
    };

    pp$6.inGeneratorContext = function() {
      for (var i = this.context.length - 1; i >= 1; i--) {
        var context = this.context[i];
        if (context.token === "function")
          { return context.generator }
      }
      return false
    };

    pp$6.updateContext = function(prevType) {
      var update, type = this.type;
      if (type.keyword && prevType === types$1.dot)
        { this.exprAllowed = false; }
      else if (update = type.updateContext)
        { update.call(this, prevType); }
      else
        { this.exprAllowed = type.beforeExpr; }
    };

    // Used to handle egde cases when token context could not be inferred correctly during tokenization phase

    pp$6.overrideContext = function(tokenCtx) {
      if (this.curContext() !== tokenCtx) {
        this.context[this.context.length - 1] = tokenCtx;
      }
    };

    // Token-specific context update code

    types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
      if (this.context.length === 1) {
        this.exprAllowed = true;
        return
      }
      var out = this.context.pop();
      if (out === types.b_stat && this.curContext().token === "function") {
        out = this.context.pop();
      }
      this.exprAllowed = !out.isExpr;
    };

    types$1.braceL.updateContext = function(prevType) {
      this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
      this.exprAllowed = true;
    };

    types$1.dollarBraceL.updateContext = function() {
      this.context.push(types.b_tmpl);
      this.exprAllowed = true;
    };

    types$1.parenL.updateContext = function(prevType) {
      var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
      this.context.push(statementParens ? types.p_stat : types.p_expr);
      this.exprAllowed = true;
    };

    types$1.incDec.updateContext = function() {
      // tokExprAllowed stays unchanged
    };

    types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
      if (prevType.beforeExpr && prevType !== types$1._else &&
          !(prevType === types$1.semi && this.curContext() !== types.p_stat) &&
          !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&
          !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat))
        { this.context.push(types.f_expr); }
      else
        { this.context.push(types.f_stat); }
      this.exprAllowed = false;
    };

    types$1.backQuote.updateContext = function() {
      if (this.curContext() === types.q_tmpl)
        { this.context.pop(); }
      else
        { this.context.push(types.q_tmpl); }
      this.exprAllowed = false;
    };

    types$1.star.updateContext = function(prevType) {
      if (prevType === types$1._function) {
        var index = this.context.length - 1;
        if (this.context[index] === types.f_expr)
          { this.context[index] = types.f_expr_gen; }
        else
          { this.context[index] = types.f_gen; }
      }
      this.exprAllowed = true;
    };

    types$1.name.updateContext = function(prevType) {
      var allowed = false;
      if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {
        if (this.value === "of" && !this.exprAllowed ||
            this.value === "yield" && this.inGeneratorContext())
          { allowed = true; }
      }
      this.exprAllowed = allowed;
    };

    // A recursive descent parser operates by defining functions for all

    var pp$5 = Parser.prototype;

    // Check if property name clashes with already added.
    // Object/class getters and setters are not allowed to clash —
    // either with each other or with an init property — and in
    // strict mode, init properties are also not allowed to be repeated.

    pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
      if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement")
        { return }
      if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))
        { return }
      var key = prop.key;
      var name;
      switch (key.type) {
      case "Identifier": name = key.name; break
      case "Literal": name = String(key.value); break
      default: return
      }
      var kind = prop.kind;
      if (this.options.ecmaVersion >= 6) {
        if (name === "__proto__" && kind === "init") {
          if (propHash.proto) {
            if (refDestructuringErrors) {
              if (refDestructuringErrors.doubleProto < 0) {
                refDestructuringErrors.doubleProto = key.start;
              }
            } else {
              this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
            }
          }
          propHash.proto = true;
        }
        return
      }
      name = "$" + name;
      var other = propHash[name];
      if (other) {
        var redefinition;
        if (kind === "init") {
          redefinition = this.strict && other.init || other.get || other.set;
        } else {
          redefinition = other.init || other[kind];
        }
        if (redefinition)
          { this.raiseRecoverable(key.start, "Redefinition of property"); }
      } else {
        other = propHash[name] = {
          init: false,
          get: false,
          set: false
        };
      }
      other[kind] = true;
    };

    // ### Expression parsing

    // These nest, from the most general expression type at the top to
    // 'atomic', nondivisible expression types at the bottom. Most of
    // the functions will simply let the function(s) below them parse,
    // and, *if* the syntactic construct they handle is present, wrap
    // the AST node that the inner parser gave them in another node.

    // Parse a full expression. The optional arguments are used to
    // forbid the `in` operator (in for loops initalization expressions)
    // and provide reference for storing '=' operator inside shorthand
    // property assignment in contexts where both object expression
    // and object pattern might appear (so it's possible to raise
    // delayed syntax error at correct position).

    pp$5.parseExpression = function(forInit, refDestructuringErrors) {
      var startPos = this.start, startLoc = this.startLoc;
      var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
      if (this.type === types$1.comma) {
        var node = this.startNodeAt(startPos, startLoc);
        node.expressions = [expr];
        while (this.eat(types$1.comma)) { node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors)); }
        return this.finishNode(node, "SequenceExpression")
      }
      return expr
    };

    // Parse an assignment expression. This includes applications of
    // operators like `+=`.

    pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
      if (this.isContextual("yield")) {
        if (this.inGenerator) { return this.parseYield(forInit) }
        // The tokenizer will assume an expression is allowed after
        // `yield`, but this isn't that kind of yield
        else { this.exprAllowed = false; }
      }

      var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
      if (refDestructuringErrors) {
        oldParenAssign = refDestructuringErrors.parenthesizedAssign;
        oldTrailingComma = refDestructuringErrors.trailingComma;
        oldDoubleProto = refDestructuringErrors.doubleProto;
        refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
      } else {
        refDestructuringErrors = new DestructuringErrors;
        ownDestructuringErrors = true;
      }

      var startPos = this.start, startLoc = this.startLoc;
      if (this.type === types$1.parenL || this.type === types$1.name) {
        this.potentialArrowAt = this.start;
        this.potentialArrowInForAwait = forInit === "await";
      }
      var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
      if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }
      if (this.type.isAssign) {
        var node = this.startNodeAt(startPos, startLoc);
        node.operator = this.value;
        if (this.type === types$1.eq)
          { left = this.toAssignable(left, false, refDestructuringErrors); }
        if (!ownDestructuringErrors) {
          refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
        }
        if (refDestructuringErrors.shorthandAssign >= left.start)
          { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly
        if (this.type === types$1.eq)
          { this.checkLValPattern(left); }
        else
          { this.checkLValSimple(left); }
        node.left = left;
        this.next();
        node.right = this.parseMaybeAssign(forInit);
        if (oldDoubleProto > -1) { refDestructuringErrors.doubleProto = oldDoubleProto; }
        return this.finishNode(node, "AssignmentExpression")
      } else {
        if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }
      }
      if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }
      if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }
      return left
    };

    // Parse a ternary conditional (`?:`) operator.

    pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
      var startPos = this.start, startLoc = this.startLoc;
      var expr = this.parseExprOps(forInit, refDestructuringErrors);
      if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
      if (this.eat(types$1.question)) {
        var node = this.startNodeAt(startPos, startLoc);
        node.test = expr;
        node.consequent = this.parseMaybeAssign();
        this.expect(types$1.colon);
        node.alternate = this.parseMaybeAssign(forInit);
        return this.finishNode(node, "ConditionalExpression")
      }
      return expr
    };

    // Start the precedence parser.

    pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
      var startPos = this.start, startLoc = this.startLoc;
      var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
      if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
      return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit)
    };

    // Parse binary operators with the operator precedence parsing
    // algorithm. `left` is the left-hand side of the operator.
    // `minPrec` provides context that allows the function to stop and
    // defer further parser to one of its callers when it encounters an
    // operator that has a lower precedence than the set it is parsing.

    pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
      var prec = this.type.binop;
      if (prec != null && (!forInit || this.type !== types$1._in)) {
        if (prec > minPrec) {
          var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;
          var coalesce = this.type === types$1.coalesce;
          if (coalesce) {
            // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.
            // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.
            prec = types$1.logicalAND.binop;
          }
          var op = this.value;
          this.next();
          var startPos = this.start, startLoc = this.startLoc;
          var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);
          var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
          if ((logical && this.type === types$1.coalesce) || (coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND))) {
            this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
          }
          return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit)
        }
      }
      return left
    };

    pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
      if (right.type === "PrivateIdentifier") { this.raise(right.start, "Private identifier can only be left side of binary expression"); }
      var node = this.startNodeAt(startPos, startLoc);
      node.left = left;
      node.operator = op;
      node.right = right;
      return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression")
    };

    // Parse unary operators, both prefix and postfix.

    pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
      var startPos = this.start, startLoc = this.startLoc, expr;
      if (this.isContextual("await") && this.canAwait) {
        expr = this.parseAwait(forInit);
        sawUnary = true;
      } else if (this.type.prefix) {
        var node = this.startNode(), update = this.type === types$1.incDec;
        node.operator = this.value;
        node.prefix = true;
        this.next();
        node.argument = this.parseMaybeUnary(null, true, update, forInit);
        this.checkExpressionErrors(refDestructuringErrors, true);
        if (update) { this.checkLValSimple(node.argument); }
        else if (this.strict && node.operator === "delete" &&
                 node.argument.type === "Identifier")
          { this.raiseRecoverable(node.start, "Deleting local variable in strict mode"); }
        else if (node.operator === "delete" && isPrivateFieldAccess(node.argument))
          { this.raiseRecoverable(node.start, "Private fields can not be deleted"); }
        else { sawUnary = true; }
        expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
      } else if (!sawUnary && this.type === types$1.privateId) {
        if (forInit || this.privateNameStack.length === 0) { this.unexpected(); }
        expr = this.parsePrivateIdent();
        // only could be private fields in 'in', such as #x in obj
        if (this.type !== types$1._in) { this.unexpected(); }
      } else {
        expr = this.parseExprSubscripts(refDestructuringErrors, forInit);
        if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
        while (this.type.postfix && !this.canInsertSemicolon()) {
          var node$1 = this.startNodeAt(startPos, startLoc);
          node$1.operator = this.value;
          node$1.prefix = false;
          node$1.argument = expr;
          this.checkLValSimple(expr);
          this.next();
          expr = this.finishNode(node$1, "UpdateExpression");
        }
      }

      if (!incDec && this.eat(types$1.starstar)) {
        if (sawUnary)
          { this.unexpected(this.lastTokStart); }
        else
          { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false) }
      } else {
        return expr
      }
    };

    function isPrivateFieldAccess(node) {
      return (
        node.type === "MemberExpression" && node.property.type === "PrivateIdentifier" ||
        node.type === "ChainExpression" && isPrivateFieldAccess(node.expression)
      )
    }

    // Parse call, dot, and `[]`-subscript expressions.

    pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
      var startPos = this.start, startLoc = this.startLoc;
      var expr = this.parseExprAtom(refDestructuringErrors, forInit);
      if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")")
        { return expr }
      var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
      if (refDestructuringErrors && result.type === "MemberExpression") {
        if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }
        if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }
        if (refDestructuringErrors.trailingComma >= result.start) { refDestructuringErrors.trailingComma = -1; }
      }
      return result
    };

    pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
      var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" &&
          this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&
          this.potentialArrowAt === base.start;
      var optionalChained = false;

      while (true) {
        var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);

        if (element.optional) { optionalChained = true; }
        if (element === base || element.type === "ArrowFunctionExpression") {
          if (optionalChained) {
            var chainNode = this.startNodeAt(startPos, startLoc);
            chainNode.expression = element;
            element = this.finishNode(chainNode, "ChainExpression");
          }
          return element
        }

        base = element;
      }
    };

    pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
      var optionalSupported = this.options.ecmaVersion >= 11;
      var optional = optionalSupported && this.eat(types$1.questionDot);
      if (noCalls && optional) { this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions"); }

      var computed = this.eat(types$1.bracketL);
      if (computed || (optional && this.type !== types$1.parenL && this.type !== types$1.backQuote) || this.eat(types$1.dot)) {
        var node = this.startNodeAt(startPos, startLoc);
        node.object = base;
        if (computed) {
          node.property = this.parseExpression();
          this.expect(types$1.bracketR);
        } else if (this.type === types$1.privateId && base.type !== "Super") {
          node.property = this.parsePrivateIdent();
        } else {
          node.property = this.parseIdent(this.options.allowReserved !== "never");
        }
        node.computed = !!computed;
        if (optionalSupported) {
          node.optional = optional;
        }
        base = this.finishNode(node, "MemberExpression");
      } else if (!noCalls && this.eat(types$1.parenL)) {
        var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
        if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {
          this.checkPatternErrors(refDestructuringErrors, false);
          this.checkYieldAwaitInDefaultParams();
          if (this.awaitIdentPos > 0)
            { this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"); }
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          this.awaitIdentPos = oldAwaitIdentPos;
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit)
        }
        this.checkExpressionErrors(refDestructuringErrors, true);
        this.yieldPos = oldYieldPos || this.yieldPos;
        this.awaitPos = oldAwaitPos || this.awaitPos;
        this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
        var node$1 = this.startNodeAt(startPos, startLoc);
        node$1.callee = base;
        node$1.arguments = exprList;
        if (optionalSupported) {
          node$1.optional = optional;
        }
        base = this.finishNode(node$1, "CallExpression");
      } else if (this.type === types$1.backQuote) {
        if (optional || optionalChained) {
          this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
        }
        var node$2 = this.startNodeAt(startPos, startLoc);
        node$2.tag = base;
        node$2.quasi = this.parseTemplate({isTagged: true});
        base = this.finishNode(node$2, "TaggedTemplateExpression");
      }
      return base
    };

    // Parse an atomic expression — either a single token that is an
    // expression, an expression started by a keyword like `function` or
    // `new`, or an expression wrapped in punctuation like `()`, `[]`,
    // or `{}`.

    pp$5.parseExprAtom = function(refDestructuringErrors, forInit) {
      // If a division operator appears in an expression position, the
      // tokenizer got confused, and we force it to read a regexp instead.
      if (this.type === types$1.slash) { this.readRegexp(); }

      var node, canBeArrow = this.potentialArrowAt === this.start;
      switch (this.type) {
      case types$1._super:
        if (!this.allowSuper)
          { this.raise(this.start, "'super' keyword outside a method"); }
        node = this.startNode();
        this.next();
        if (this.type === types$1.parenL && !this.allowDirectSuper)
          { this.raise(node.start, "super() call outside constructor of a subclass"); }
        // The `super` keyword can appear at below:
        // SuperProperty:
        //     super [ Expression ]
        //     super . IdentifierName
        // SuperCall:
        //     super ( Arguments )
        if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL)
          { this.unexpected(); }
        return this.finishNode(node, "Super")

      case types$1._this:
        node = this.startNode();
        this.next();
        return this.finishNode(node, "ThisExpression")

      case types$1.name:
        var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
        var id = this.parseIdent(false);
        if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types$1._function)) {
          this.overrideContext(types.f_expr);
          return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit)
        }
        if (canBeArrow && !this.canInsertSemicolon()) {
          if (this.eat(types$1.arrow))
            { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit) }
          if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types$1.name && !containsEsc &&
              (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc)) {
            id = this.parseIdent(false);
            if (this.canInsertSemicolon() || !this.eat(types$1.arrow))
              { this.unexpected(); }
            return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit)
          }
        }
        return id

      case types$1.regexp:
        var value = this.value;
        node = this.parseLiteral(value.value);
        node.regex = {pattern: value.pattern, flags: value.flags};
        return node

      case types$1.num: case types$1.string:
        return this.parseLiteral(this.value)

      case types$1._null: case types$1._true: case types$1._false:
        node = this.startNode();
        node.value = this.type === types$1._null ? null : this.type === types$1._true;
        node.raw = this.type.keyword;
        this.next();
        return this.finishNode(node, "Literal")

      case types$1.parenL:
        var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
        if (refDestructuringErrors) {
          if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))
            { refDestructuringErrors.parenthesizedAssign = start; }
          if (refDestructuringErrors.parenthesizedBind < 0)
            { refDestructuringErrors.parenthesizedBind = start; }
        }
        return expr

      case types$1.bracketL:
        node = this.startNode();
        this.next();
        node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);
        return this.finishNode(node, "ArrayExpression")

      case types$1.braceL:
        this.overrideContext(types.b_expr);
        return this.parseObj(false, refDestructuringErrors)

      case types$1._function:
        node = this.startNode();
        this.next();
        return this.parseFunction(node, 0)

      case types$1._class:
        return this.parseClass(this.startNode(), false)

      case types$1._new:
        return this.parseNew()

      case types$1.backQuote:
        return this.parseTemplate()

      case types$1._import:
        if (this.options.ecmaVersion >= 11) {
          return this.parseExprImport()
        } else {
          return this.unexpected()
        }

      default:
        this.unexpected();
      }
    };

    pp$5.parseExprImport = function() {
      var node = this.startNode();

      // Consume `import` as an identifier for `import.meta`.
      // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.
      if (this.containsEsc) { this.raiseRecoverable(this.start, "Escape sequence in keyword import"); }
      var meta = this.parseIdent(true);

      switch (this.type) {
      case types$1.parenL:
        return this.parseDynamicImport(node)
      case types$1.dot:
        node.meta = meta;
        return this.parseImportMeta(node)
      default:
        this.unexpected();
      }
    };

    pp$5.parseDynamicImport = function(node) {
      this.next(); // skip `(`

      // Parse node.source.
      node.source = this.parseMaybeAssign();

      // Verify ending.
      if (!this.eat(types$1.parenR)) {
        var errorPos = this.start;
        if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {
          this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
        } else {
          this.unexpected(errorPos);
        }
      }

      return this.finishNode(node, "ImportExpression")
    };

    pp$5.parseImportMeta = function(node) {
      this.next(); // skip `.`

      var containsEsc = this.containsEsc;
      node.property = this.parseIdent(true);

      if (node.property.name !== "meta")
        { this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"); }
      if (containsEsc)
        { this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"); }
      if (this.options.sourceType !== "module" && !this.options.allowImportExportEverywhere)
        { this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"); }

      return this.finishNode(node, "MetaProperty")
    };

    pp$5.parseLiteral = function(value) {
      var node = this.startNode();
      node.value = value;
      node.raw = this.input.slice(this.start, this.end);
      if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, ""); }
      this.next();
      return this.finishNode(node, "Literal")
    };

    pp$5.parseParenExpression = function() {
      this.expect(types$1.parenL);
      var val = this.parseExpression();
      this.expect(types$1.parenR);
      return val
    };

    pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
      var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
      if (this.options.ecmaVersion >= 6) {
        this.next();

        var innerStartPos = this.start, innerStartLoc = this.startLoc;
        var exprList = [], first = true, lastIsComma = false;
        var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
        this.yieldPos = 0;
        this.awaitPos = 0;
        // Do not save awaitIdentPos to allow checking awaits nested in parameters
        while (this.type !== types$1.parenR) {
          first ? first = false : this.expect(types$1.comma);
          if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
            lastIsComma = true;
            break
          } else if (this.type === types$1.ellipsis) {
            spreadStart = this.start;
            exprList.push(this.parseParenItem(this.parseRestBinding()));
            if (this.type === types$1.comma) { this.raise(this.start, "Comma is not permitted after the rest element"); }
            break
          } else {
            exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
          }
        }
        var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
        this.expect(types$1.parenR);

        if (canBeArrow && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {
          this.checkPatternErrors(refDestructuringErrors, false);
          this.checkYieldAwaitInDefaultParams();
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          return this.parseParenArrowList(startPos, startLoc, exprList, forInit)
        }

        if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }
        if (spreadStart) { this.unexpected(spreadStart); }
        this.checkExpressionErrors(refDestructuringErrors, true);
        this.yieldPos = oldYieldPos || this.yieldPos;
        this.awaitPos = oldAwaitPos || this.awaitPos;

        if (exprList.length > 1) {
          val = this.startNodeAt(innerStartPos, innerStartLoc);
          val.expressions = exprList;
          this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
        } else {
          val = exprList[0];
        }
      } else {
        val = this.parseParenExpression();
      }

      if (this.options.preserveParens) {
        var par = this.startNodeAt(startPos, startLoc);
        par.expression = val;
        return this.finishNode(par, "ParenthesizedExpression")
      } else {
        return val
      }
    };

    pp$5.parseParenItem = function(item) {
      return item
    };

    pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit)
    };

    // New's precedence is slightly tricky. It must allow its argument to
    // be a `[]` or dot subscript expression, but not a call — at least,
    // not without wrapping it in parentheses. Thus, it uses the noCalls
    // argument to parseSubscripts to prevent it from consuming the
    // argument list.

    var empty$2 = [];

    pp$5.parseNew = function() {
      if (this.containsEsc) { this.raiseRecoverable(this.start, "Escape sequence in keyword new"); }
      var node = this.startNode();
      var meta = this.parseIdent(true);
      if (this.options.ecmaVersion >= 6 && this.eat(types$1.dot)) {
        node.meta = meta;
        var containsEsc = this.containsEsc;
        node.property = this.parseIdent(true);
        if (node.property.name !== "target")
          { this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"); }
        if (containsEsc)
          { this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"); }
        if (!this.allowNewDotTarget)
          { this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block"); }
        return this.finishNode(node, "MetaProperty")
      }
      var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types$1._import;
      node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true, false);
      if (isImport && node.callee.type === "ImportExpression") {
        this.raise(startPos, "Cannot use new with import()");
      }
      if (this.eat(types$1.parenL)) { node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false); }
      else { node.arguments = empty$2; }
      return this.finishNode(node, "NewExpression")
    };

    // Parse template expression.

    pp$5.parseTemplateElement = function(ref) {
      var isTagged = ref.isTagged;

      var elem = this.startNode();
      if (this.type === types$1.invalidTemplate) {
        if (!isTagged) {
          this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
        }
        elem.value = {
          raw: this.value,
          cooked: null
        };
      } else {
        elem.value = {
          raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
          cooked: this.value
        };
      }
      this.next();
      elem.tail = this.type === types$1.backQuote;
      return this.finishNode(elem, "TemplateElement")
    };

    pp$5.parseTemplate = function(ref) {
      if ( ref === void 0 ) ref = {};
      var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;

      var node = this.startNode();
      this.next();
      node.expressions = [];
      var curElt = this.parseTemplateElement({isTagged: isTagged});
      node.quasis = [curElt];
      while (!curElt.tail) {
        if (this.type === types$1.eof) { this.raise(this.pos, "Unterminated template literal"); }
        this.expect(types$1.dollarBraceL);
        node.expressions.push(this.parseExpression());
        this.expect(types$1.braceR);
        node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));
      }
      this.next();
      return this.finishNode(node, "TemplateLiteral")
    };

    pp$5.isAsyncProp = function(prop) {
      return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" &&
        (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types$1.star)) &&
        !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
    };

    // Parse an object literal or binding pattern.

    pp$5.parseObj = function(isPattern, refDestructuringErrors) {
      var node = this.startNode(), first = true, propHash = {};
      node.properties = [];
      this.next();
      while (!this.eat(types$1.braceR)) {
        if (!first) {
          this.expect(types$1.comma);
          if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) { break }
        } else { first = false; }

        var prop = this.parseProperty(isPattern, refDestructuringErrors);
        if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }
        node.properties.push(prop);
      }
      return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression")
    };

    pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
      var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
      if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {
        if (isPattern) {
          prop.argument = this.parseIdent(false);
          if (this.type === types$1.comma) {
            this.raise(this.start, "Comma is not permitted after the rest element");
          }
          return this.finishNode(prop, "RestElement")
        }
        // Parse argument.
        prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
        // To disallow trailing comma via `this.toAssignable()`.
        if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
          refDestructuringErrors.trailingComma = this.start;
        }
        // Finish
        return this.finishNode(prop, "SpreadElement")
      }
      if (this.options.ecmaVersion >= 6) {
        prop.method = false;
        prop.shorthand = false;
        if (isPattern || refDestructuringErrors) {
          startPos = this.start;
          startLoc = this.startLoc;
        }
        if (!isPattern)
          { isGenerator = this.eat(types$1.star); }
      }
      var containsEsc = this.containsEsc;
      this.parsePropertyName(prop);
      if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
        isAsync = true;
        isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);
        this.parsePropertyName(prop, refDestructuringErrors);
      } else {
        isAsync = false;
      }
      this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
      return this.finishNode(prop, "Property")
    };

    pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
      if ((isGenerator || isAsync) && this.type === types$1.colon)
        { this.unexpected(); }

      if (this.eat(types$1.colon)) {
        prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
        prop.kind = "init";
      } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {
        if (isPattern) { this.unexpected(); }
        prop.kind = "init";
        prop.method = true;
        prop.value = this.parseMethod(isGenerator, isAsync);
      } else if (!isPattern && !containsEsc &&
                 this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" &&
                 (prop.key.name === "get" || prop.key.name === "set") &&
                 (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {
        if (isGenerator || isAsync) { this.unexpected(); }
        prop.kind = prop.key.name;
        this.parsePropertyName(prop);
        prop.value = this.parseMethod(false);
        var paramCount = prop.kind === "get" ? 0 : 1;
        if (prop.value.params.length !== paramCount) {
          var start = prop.value.start;
          if (prop.kind === "get")
            { this.raiseRecoverable(start, "getter should have no params"); }
          else
            { this.raiseRecoverable(start, "setter should have exactly one param"); }
        } else {
          if (prop.kind === "set" && prop.value.params[0].type === "RestElement")
            { this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params"); }
        }
      } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
        if (isGenerator || isAsync) { this.unexpected(); }
        this.checkUnreserved(prop.key);
        if (prop.key.name === "await" && !this.awaitIdentPos)
          { this.awaitIdentPos = startPos; }
        prop.kind = "init";
        if (isPattern) {
          prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
        } else if (this.type === types$1.eq && refDestructuringErrors) {
          if (refDestructuringErrors.shorthandAssign < 0)
            { refDestructuringErrors.shorthandAssign = this.start; }
          prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
        } else {
          prop.value = this.copyNode(prop.key);
        }
        prop.shorthand = true;
      } else { this.unexpected(); }
    };

    pp$5.parsePropertyName = function(prop) {
      if (this.options.ecmaVersion >= 6) {
        if (this.eat(types$1.bracketL)) {
          prop.computed = true;
          prop.key = this.parseMaybeAssign();
          this.expect(types$1.bracketR);
          return prop.key
        } else {
          prop.computed = false;
        }
      }
      return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never")
    };

    // Initialize empty function node.

    pp$5.initFunction = function(node) {
      node.id = null;
      if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }
      if (this.options.ecmaVersion >= 8) { node.async = false; }
    };

    // Parse object or class method.

    pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
      var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;

      this.initFunction(node);
      if (this.options.ecmaVersion >= 6)
        { node.generator = isGenerator; }
      if (this.options.ecmaVersion >= 8)
        { node.async = !!isAsync; }

      this.yieldPos = 0;
      this.awaitPos = 0;
      this.awaitIdentPos = 0;
      this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));

      this.expect(types$1.parenL);
      node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
      this.checkYieldAwaitInDefaultParams();
      this.parseFunctionBody(node, false, true, false);

      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      this.awaitIdentPos = oldAwaitIdentPos;
      return this.finishNode(node, "FunctionExpression")
    };

    // Parse arrow function expression with given parameters.

    pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {
      var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;

      this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
      this.initFunction(node);
      if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }

      this.yieldPos = 0;
      this.awaitPos = 0;
      this.awaitIdentPos = 0;

      node.params = this.toAssignableList(params, true);
      this.parseFunctionBody(node, true, false, forInit);

      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      this.awaitIdentPos = oldAwaitIdentPos;
      return this.finishNode(node, "ArrowFunctionExpression")
    };

    // Parse function body and check parameters.

    pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
      var isExpression = isArrowFunction && this.type !== types$1.braceL;
      var oldStrict = this.strict, useStrict = false;

      if (isExpression) {
        node.body = this.parseMaybeAssign(forInit);
        node.expression = true;
        this.checkParams(node, false);
      } else {
        var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
        if (!oldStrict || nonSimple) {
          useStrict = this.strictDirective(this.end);
          // If this is a strict mode function, verify that argument names
          // are not repeated, and it does not try to bind the words `eval`
          // or `arguments`.
          if (useStrict && nonSimple)
            { this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list"); }
        }
        // Start a new scope with regard to labels and the `inFunction`
        // flag (restore them to their old value afterwards).
        var oldLabels = this.labels;
        this.labels = [];
        if (useStrict) { this.strict = true; }

        // Add the params to varDeclaredNames to ensure that an error is thrown
        // if a let/const declaration in the function clashes with one of the params.
        this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
        // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'
        if (this.strict && node.id) { this.checkLValSimple(node.id, BIND_OUTSIDE); }
        node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);
        node.expression = false;
        this.adaptDirectivePrologue(node.body.body);
        this.labels = oldLabels;
      }
      this.exitScope();
    };

    pp$5.isSimpleParamList = function(params) {
      for (var i = 0, list = params; i < list.length; i += 1)
        {
        var param = list[i];

        if (param.type !== "Identifier") { return false
      } }
      return true
    };

    // Checks function params for various disallowed patterns such as using "eval"
    // or "arguments" and duplicate parameters.

    pp$5.checkParams = function(node, allowDuplicates) {
      var nameHash = Object.create(null);
      for (var i = 0, list = node.params; i < list.length; i += 1)
        {
        var param = list[i];

        this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);
      }
    };

    // Parses a comma-separated list of expressions, and returns them as
    // an array. `close` is the token type that ends the list, and
    // `allowEmpty` can be turned on to allow subsequent commas with
    // nothing in between them to be parsed as `null` (which is needed
    // for array literals).

    pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
      var elts = [], first = true;
      while (!this.eat(close)) {
        if (!first) {
          this.expect(types$1.comma);
          if (allowTrailingComma && this.afterTrailingComma(close)) { break }
        } else { first = false; }

        var elt = (void 0);
        if (allowEmpty && this.type === types$1.comma)
          { elt = null; }
        else if (this.type === types$1.ellipsis) {
          elt = this.parseSpread(refDestructuringErrors);
          if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0)
            { refDestructuringErrors.trailingComma = this.start; }
        } else {
          elt = this.parseMaybeAssign(false, refDestructuringErrors);
        }
        elts.push(elt);
      }
      return elts
    };

    pp$5.checkUnreserved = function(ref) {
      var start = ref.start;
      var end = ref.end;
      var name = ref.name;

      if (this.inGenerator && name === "yield")
        { this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"); }
      if (this.inAsync && name === "await")
        { this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"); }
      if (this.currentThisScope().inClassFieldInit && name === "arguments")
        { this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer"); }
      if (this.inClassStaticBlock && (name === "arguments" || name === "await"))
        { this.raise(start, ("Cannot use " + name + " in class static initialization block")); }
      if (this.keywords.test(name))
        { this.raise(start, ("Unexpected keyword '" + name + "'")); }
      if (this.options.ecmaVersion < 6 &&
        this.input.slice(start, end).indexOf("\\") !== -1) { return }
      var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
      if (re.test(name)) {
        if (!this.inAsync && name === "await")
          { this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"); }
        this.raiseRecoverable(start, ("The keyword '" + name + "' is reserved"));
      }
    };

    // Parse the next token as an identifier. If `liberal` is true (used
    // when parsing properties), it will also convert keywords into
    // identifiers.

    pp$5.parseIdent = function(liberal, isBinding) {
      var node = this.startNode();
      if (this.type === types$1.name) {
        node.name = this.value;
      } else if (this.type.keyword) {
        node.name = this.type.keyword;

        // To fix https://github.com/acornjs/acorn/issues/575
        // `class` and `function` keywords push new context into this.context.
        // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.
        // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword
        if ((node.name === "class" || node.name === "function") &&
            (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
          this.context.pop();
        }
      } else {
        this.unexpected();
      }
      this.next(!!liberal);
      this.finishNode(node, "Identifier");
      if (!liberal) {
        this.checkUnreserved(node);
        if (node.name === "await" && !this.awaitIdentPos)
          { this.awaitIdentPos = node.start; }
      }
      return node
    };

    pp$5.parsePrivateIdent = function() {
      var node = this.startNode();
      if (this.type === types$1.privateId) {
        node.name = this.value;
      } else {
        this.unexpected();
      }
      this.next();
      this.finishNode(node, "PrivateIdentifier");

      // For validating existence
      if (this.privateNameStack.length === 0) {
        this.raise(node.start, ("Private field '#" + (node.name) + "' must be declared in an enclosing class"));
      } else {
        this.privateNameStack[this.privateNameStack.length - 1].used.push(node);
      }

      return node
    };

    // Parses yield expression inside generator.

    pp$5.parseYield = function(forInit) {
      if (!this.yieldPos) { this.yieldPos = this.start; }

      var node = this.startNode();
      this.next();
      if (this.type === types$1.semi || this.canInsertSemicolon() || (this.type !== types$1.star && !this.type.startsExpr)) {
        node.delegate = false;
        node.argument = null;
      } else {
        node.delegate = this.eat(types$1.star);
        node.argument = this.parseMaybeAssign(forInit);
      }
      return this.finishNode(node, "YieldExpression")
    };

    pp$5.parseAwait = function(forInit) {
      if (!this.awaitPos) { this.awaitPos = this.start; }

      var node = this.startNode();
      this.next();
      node.argument = this.parseMaybeUnary(null, true, false, forInit);
      return this.finishNode(node, "AwaitExpression")
    };

    var pp$4 = Parser.prototype;

    // This function is used to raise exceptions on parse errors. It
    // takes an offset integer (into the current `input`) to indicate
    // the location of the error, attaches the position to the end
    // of the error message, and then raises a `SyntaxError` with that
    // message.

    pp$4.raise = function(pos, message) {
      var loc = getLineInfo(this.input, pos);
      message += " (" + loc.line + ":" + loc.column + ")";
      var err = new SyntaxError(message);
      err.pos = pos; err.loc = loc; err.raisedAt = this.pos;
      throw err
    };

    pp$4.raiseRecoverable = pp$4.raise;

    pp$4.curPosition = function() {
      if (this.options.locations) {
        return new Position(this.curLine, this.pos - this.lineStart)
      }
    };

    var pp$3 = Parser.prototype;

    var Scope = function Scope(flags) {
      this.flags = flags;
      // A list of var-declared names in the current lexical scope
      this.var = [];
      // A list of lexically-declared names in the current lexical scope
      this.lexical = [];
      // A list of lexically-declared FunctionDeclaration names in the current lexical scope
      this.functions = [];
      // A switch to disallow the identifier reference 'arguments'
      this.inClassFieldInit = false;
    };

    // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.

    pp$3.enterScope = function(flags) {
      this.scopeStack.push(new Scope(flags));
    };

    pp$3.exitScope = function() {
      this.scopeStack.pop();
    };

    // The spec says:
    // > At the top level of a function, or script, function declarations are
    // > treated like var declarations rather than like lexical declarations.
    pp$3.treatFunctionsAsVarInScope = function(scope) {
      return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)
    };

    pp$3.declareName = function(name, bindingType, pos) {
      var redeclared = false;
      if (bindingType === BIND_LEXICAL) {
        var scope = this.currentScope();
        redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
        scope.lexical.push(name);
        if (this.inModule && (scope.flags & SCOPE_TOP))
          { delete this.undefinedExports[name]; }
      } else if (bindingType === BIND_SIMPLE_CATCH) {
        var scope$1 = this.currentScope();
        scope$1.lexical.push(name);
      } else if (bindingType === BIND_FUNCTION) {
        var scope$2 = this.currentScope();
        if (this.treatFunctionsAsVar)
          { redeclared = scope$2.lexical.indexOf(name) > -1; }
        else
          { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }
        scope$2.functions.push(name);
      } else {
        for (var i = this.scopeStack.length - 1; i >= 0; --i) {
          var scope$3 = this.scopeStack[i];
          if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||
              !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
            redeclared = true;
            break
          }
          scope$3.var.push(name);
          if (this.inModule && (scope$3.flags & SCOPE_TOP))
            { delete this.undefinedExports[name]; }
          if (scope$3.flags & SCOPE_VAR) { break }
        }
      }
      if (redeclared) { this.raiseRecoverable(pos, ("Identifier '" + name + "' has already been declared")); }
    };

    pp$3.checkLocalExport = function(id) {
      // scope.functions must be empty as Module code is always strict.
      if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&
          this.scopeStack[0].var.indexOf(id.name) === -1) {
        this.undefinedExports[id.name] = id;
      }
    };

    pp$3.currentScope = function() {
      return this.scopeStack[this.scopeStack.length - 1]
    };

    pp$3.currentVarScope = function() {
      for (var i = this.scopeStack.length - 1;; i--) {
        var scope = this.scopeStack[i];
        if (scope.flags & SCOPE_VAR) { return scope }
      }
    };

    // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.
    pp$3.currentThisScope = function() {
      for (var i = this.scopeStack.length - 1;; i--) {
        var scope = this.scopeStack[i];
        if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }
      }
    };

    var Node = function Node(parser, pos, loc) {
      this.type = "";
      this.start = pos;
      this.end = 0;
      if (parser.options.locations)
        { this.loc = new SourceLocation(parser, loc); }
      if (parser.options.directSourceFile)
        { this.sourceFile = parser.options.directSourceFile; }
      if (parser.options.ranges)
        { this.range = [pos, 0]; }
    };

    // Start an AST node, attaching a start offset.

    var pp$2 = Parser.prototype;

    pp$2.startNode = function() {
      return new Node(this, this.start, this.startLoc)
    };

    pp$2.startNodeAt = function(pos, loc) {
      return new Node(this, pos, loc)
    };

    // Finish an AST node, adding `type` and `end` properties.

    function finishNodeAt(node, type, pos, loc) {
      node.type = type;
      node.end = pos;
      if (this.options.locations)
        { node.loc.end = loc; }
      if (this.options.ranges)
        { node.range[1] = pos; }
      return node
    }

    pp$2.finishNode = function(node, type) {
      return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)
    };

    // Finish node at given position

    pp$2.finishNodeAt = function(node, type, pos, loc) {
      return finishNodeAt.call(this, node, type, pos, loc)
    };

    pp$2.copyNode = function(node) {
      var newNode = new Node(this, node.start, this.startLoc);
      for (var prop in node) { newNode[prop] = node[prop]; }
      return newNode
    };

    // This file contains Unicode properties extracted from the ECMAScript
    // specification. The lists are extracted like so:
    // $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)

    // #table-binary-unicode-properties
    var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
    var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
    var ecma11BinaryProperties = ecma10BinaryProperties;
    var ecma12BinaryProperties = ecma11BinaryProperties + " EBase EComp EMod EPres ExtPict";
    var ecma13BinaryProperties = ecma12BinaryProperties;
    var unicodeBinaryProperties = {
      9: ecma9BinaryProperties,
      10: ecma10BinaryProperties,
      11: ecma11BinaryProperties,
      12: ecma12BinaryProperties,
      13: ecma13BinaryProperties
    };

    // #table-unicode-general-category-values
    var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";

    // #table-unicode-script-values
    var ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
    var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
    var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
    var ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi";
    var ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith";
    var unicodeScriptValues = {
      9: ecma9ScriptValues,
      10: ecma10ScriptValues,
      11: ecma11ScriptValues,
      12: ecma12ScriptValues,
      13: ecma13ScriptValues
    };

    var data = {};
    function buildUnicodeData(ecmaVersion) {
      var d = data[ecmaVersion] = {
        binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
        nonBinary: {
          General_Category: wordsRegexp(unicodeGeneralCategoryValues),
          Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
        }
      };
      d.nonBinary.Script_Extensions = d.nonBinary.Script;

      d.nonBinary.gc = d.nonBinary.General_Category;
      d.nonBinary.sc = d.nonBinary.Script;
      d.nonBinary.scx = d.nonBinary.Script_Extensions;
    }

    for (var i = 0, list$2 = [9, 10, 11, 12, 13]; i < list$2.length; i += 1) {
      var ecmaVersion = list$2[i];

      buildUnicodeData(ecmaVersion);
    }

    var pp$1 = Parser.prototype;

    var RegExpValidationState = function RegExpValidationState(parser) {
      this.parser = parser;
      this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "");
      this.unicodeProperties = data[parser.options.ecmaVersion >= 13 ? 13 : parser.options.ecmaVersion];
      this.source = "";
      this.flags = "";
      this.start = 0;
      this.switchU = false;
      this.switchN = false;
      this.pos = 0;
      this.lastIntValue = 0;
      this.lastStringValue = "";
      this.lastAssertionIsQuantifiable = false;
      this.numCapturingParens = 0;
      this.maxBackReference = 0;
      this.groupNames = [];
      this.backReferenceNames = [];
    };

    RegExpValidationState.prototype.reset = function reset (start, pattern, flags) {
      var unicode = flags.indexOf("u") !== -1;
      this.start = start | 0;
      this.source = pattern + "";
      this.flags = flags;
      this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
      this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
    };

    RegExpValidationState.prototype.raise = function raise (message) {
      this.parser.raiseRecoverable(this.start, ("Invalid regular expression: /" + (this.source) + "/: " + message));
    };

    // If u flag is given, this returns the code point at the index (it combines a surrogate pair).
    // Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).
    RegExpValidationState.prototype.at = function at (i, forceU) {
        if ( forceU === void 0 ) forceU = false;

      var s = this.source;
      var l = s.length;
      if (i >= l) {
        return -1
      }
      var c = s.charCodeAt(i);
      if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
        return c
      }
      var next = s.charCodeAt(i + 1);
      return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c
    };

    RegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {
        if ( forceU === void 0 ) forceU = false;

      var s = this.source;
      var l = s.length;
      if (i >= l) {
        return l
      }
      var c = s.charCodeAt(i), next;
      if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||
          (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {
        return i + 1
      }
      return i + 2
    };

    RegExpValidationState.prototype.current = function current (forceU) {
        if ( forceU === void 0 ) forceU = false;

      return this.at(this.pos, forceU)
    };

    RegExpValidationState.prototype.lookahead = function lookahead (forceU) {
        if ( forceU === void 0 ) forceU = false;

      return this.at(this.nextIndex(this.pos, forceU), forceU)
    };

    RegExpValidationState.prototype.advance = function advance (forceU) {
        if ( forceU === void 0 ) forceU = false;

      this.pos = this.nextIndex(this.pos, forceU);
    };

    RegExpValidationState.prototype.eat = function eat (ch, forceU) {
        if ( forceU === void 0 ) forceU = false;

      if (this.current(forceU) === ch) {
        this.advance(forceU);
        return true
      }
      return false
    };

    /**
     * Validate the flags part of a given RegExpLiteral.
     *
     * @param {RegExpValidationState} state The state to validate RegExp.
     * @returns {void}
     */
    pp$1.validateRegExpFlags = function(state) {
      var validFlags = state.validFlags;
      var flags = state.flags;

      for (var i = 0; i < flags.length; i++) {
        var flag = flags.charAt(i);
        if (validFlags.indexOf(flag) === -1) {
          this.raise(state.start, "Invalid regular expression flag");
        }
        if (flags.indexOf(flag, i + 1) > -1) {
          this.raise(state.start, "Duplicate regular expression flag");
        }
      }
    };

    /**
     * Validate the pattern part of a given RegExpLiteral.
     *
     * @param {RegExpValidationState} state The state to validate RegExp.
     * @returns {void}
     */
    pp$1.validateRegExpPattern = function(state) {
      this.regexp_pattern(state);

      // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of
      // parsing contains a |GroupName|, reparse with the goal symbol
      // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*
      // exception if _P_ did not conform to the grammar, if any elements of _P_
      // were not matched by the parse, or if any Early Error conditions exist.
      if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
        state.switchN = true;
        this.regexp_pattern(state);
      }
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern
    pp$1.regexp_pattern = function(state) {
      state.pos = 0;
      state.lastIntValue = 0;
      state.lastStringValue = "";
      state.lastAssertionIsQuantifiable = false;
      state.numCapturingParens = 0;
      state.maxBackReference = 0;
      state.groupNames.length = 0;
      state.backReferenceNames.length = 0;

      this.regexp_disjunction(state);

      if (state.pos !== state.source.length) {
        // Make the same messages as V8.
        if (state.eat(0x29 /* ) */)) {
          state.raise("Unmatched ')'");
        }
        if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {
          state.raise("Lone quantifier brackets");
        }
      }
      if (state.maxBackReference > state.numCapturingParens) {
        state.raise("Invalid escape");
      }
      for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
        var name = list[i];

        if (state.groupNames.indexOf(name) === -1) {
          state.raise("Invalid named capture referenced");
        }
      }
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction
    pp$1.regexp_disjunction = function(state) {
      this.regexp_alternative(state);
      while (state.eat(0x7C /* | */)) {
        this.regexp_alternative(state);
      }

      // Make the same message as V8.
      if (this.regexp_eatQuantifier(state, true)) {
        state.raise("Nothing to repeat");
      }
      if (state.eat(0x7B /* { */)) {
        state.raise("Lone quantifier brackets");
      }
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative
    pp$1.regexp_alternative = function(state) {
      while (state.pos < state.source.length && this.regexp_eatTerm(state))
        { }
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term
    pp$1.regexp_eatTerm = function(state) {
      if (this.regexp_eatAssertion(state)) {
        // Handle `QuantifiableAssertion Quantifier` alternative.
        // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion
        // is a QuantifiableAssertion.
        if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
          // Make the same message as V8.
          if (state.switchU) {
            state.raise("Invalid quantifier");
          }
        }
        return true
      }

      if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
        this.regexp_eatQuantifier(state);
        return true
      }

      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion
    pp$1.regexp_eatAssertion = function(state) {
      var start = state.pos;
      state.lastAssertionIsQuantifiable = false;

      // ^, $
      if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {
        return true
      }

      // \b \B
      if (state.eat(0x5C /* \ */)) {
        if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {
          return true
        }
        state.pos = start;
      }

      // Lookahead / Lookbehind
      if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {
        var lookbehind = false;
        if (this.options.ecmaVersion >= 9) {
          lookbehind = state.eat(0x3C /* < */);
        }
        if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {
          this.regexp_disjunction(state);
          if (!state.eat(0x29 /* ) */)) {
            state.raise("Unterminated group");
          }
          state.lastAssertionIsQuantifiable = !lookbehind;
          return true
        }
      }

      state.pos = start;
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier
    pp$1.regexp_eatQuantifier = function(state, noError) {
      if ( noError === void 0 ) noError = false;

      if (this.regexp_eatQuantifierPrefix(state, noError)) {
        state.eat(0x3F /* ? */);
        return true
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix
    pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
      return (
        state.eat(0x2A /* * */) ||
        state.eat(0x2B /* + */) ||
        state.eat(0x3F /* ? */) ||
        this.regexp_eatBracedQuantifier(state, noError)
      )
    };
    pp$1.regexp_eatBracedQuantifier = function(state, noError) {
      var start = state.pos;
      if (state.eat(0x7B /* { */)) {
        var min = 0, max = -1;
        if (this.regexp_eatDecimalDigits(state)) {
          min = state.lastIntValue;
          if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {
            max = state.lastIntValue;
          }
          if (state.eat(0x7D /* } */)) {
            // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term
            if (max !== -1 && max < min && !noError) {
              state.raise("numbers out of order in {} quantifier");
            }
            return true
          }
        }
        if (state.switchU && !noError) {
          state.raise("Incomplete quantifier");
        }
        state.pos = start;
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom
    pp$1.regexp_eatAtom = function(state) {
      return (
        this.regexp_eatPatternCharacters(state) ||
        state.eat(0x2E /* . */) ||
        this.regexp_eatReverseSolidusAtomEscape(state) ||
        this.regexp_eatCharacterClass(state) ||
        this.regexp_eatUncapturingGroup(state) ||
        this.regexp_eatCapturingGroup(state)
      )
    };
    pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
      var start = state.pos;
      if (state.eat(0x5C /* \ */)) {
        if (this.regexp_eatAtomEscape(state)) {
          return true
        }
        state.pos = start;
      }
      return false
    };
    pp$1.regexp_eatUncapturingGroup = function(state) {
      var start = state.pos;
      if (state.eat(0x28 /* ( */)) {
        if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {
          this.regexp_disjunction(state);
          if (state.eat(0x29 /* ) */)) {
            return true
          }
          state.raise("Unterminated group");
        }
        state.pos = start;
      }
      return false
    };
    pp$1.regexp_eatCapturingGroup = function(state) {
      if (state.eat(0x28 /* ( */)) {
        if (this.options.ecmaVersion >= 9) {
          this.regexp_groupSpecifier(state);
        } else if (state.current() === 0x3F /* ? */) {
          state.raise("Invalid group");
        }
        this.regexp_disjunction(state);
        if (state.eat(0x29 /* ) */)) {
          state.numCapturingParens += 1;
          return true
        }
        state.raise("Unterminated group");
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom
    pp$1.regexp_eatExtendedAtom = function(state) {
      return (
        state.eat(0x2E /* . */) ||
        this.regexp_eatReverseSolidusAtomEscape(state) ||
        this.regexp_eatCharacterClass(state) ||
        this.regexp_eatUncapturingGroup(state) ||
        this.regexp_eatCapturingGroup(state) ||
        this.regexp_eatInvalidBracedQuantifier(state) ||
        this.regexp_eatExtendedPatternCharacter(state)
      )
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier
    pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
      if (this.regexp_eatBracedQuantifier(state, true)) {
        state.raise("Nothing to repeat");
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter
    pp$1.regexp_eatSyntaxCharacter = function(state) {
      var ch = state.current();
      if (isSyntaxCharacter(ch)) {
        state.lastIntValue = ch;
        state.advance();
        return true
      }
      return false
    };
    function isSyntaxCharacter(ch) {
      return (
        ch === 0x24 /* $ */ ||
        ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||
        ch === 0x2E /* . */ ||
        ch === 0x3F /* ? */ ||
        ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||
        ch >= 0x7B /* { */ && ch <= 0x7D /* } */
      )
    }

    // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter
    // But eat eager.
    pp$1.regexp_eatPatternCharacters = function(state) {
      var start = state.pos;
      var ch = 0;
      while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
        state.advance();
      }
      return state.pos !== start
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter
    pp$1.regexp_eatExtendedPatternCharacter = function(state) {
      var ch = state.current();
      if (
        ch !== -1 &&
        ch !== 0x24 /* $ */ &&
        !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&
        ch !== 0x2E /* . */ &&
        ch !== 0x3F /* ? */ &&
        ch !== 0x5B /* [ */ &&
        ch !== 0x5E /* ^ */ &&
        ch !== 0x7C /* | */
      ) {
        state.advance();
        return true
      }
      return false
    };

    // GroupSpecifier ::
    //   [empty]
    //   `?` GroupName
    pp$1.regexp_groupSpecifier = function(state) {
      if (state.eat(0x3F /* ? */)) {
        if (this.regexp_eatGroupName(state)) {
          if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
            state.raise("Duplicate capture group name");
          }
          state.groupNames.push(state.lastStringValue);
          return
        }
        state.raise("Invalid group");
      }
    };

    // GroupName ::
    //   `<` RegExpIdentifierName `>`
    // Note: this updates `state.lastStringValue` property with the eaten name.
    pp$1.regexp_eatGroupName = function(state) {
      state.lastStringValue = "";
      if (state.eat(0x3C /* < */)) {
        if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {
          return true
        }
        state.raise("Invalid capture group name");
      }
      return false
    };

    // RegExpIdentifierName ::
    //   RegExpIdentifierStart
    //   RegExpIdentifierName RegExpIdentifierPart
    // Note: this updates `state.lastStringValue` property with the eaten name.
    pp$1.regexp_eatRegExpIdentifierName = function(state) {
      state.lastStringValue = "";
      if (this.regexp_eatRegExpIdentifierStart(state)) {
        state.lastStringValue += codePointToString(state.lastIntValue);
        while (this.regexp_eatRegExpIdentifierPart(state)) {
          state.lastStringValue += codePointToString(state.lastIntValue);
        }
        return true
      }
      return false
    };

    // RegExpIdentifierStart ::
    //   UnicodeIDStart
    //   `$`
    //   `_`
    //   `\` RegExpUnicodeEscapeSequence[+U]
    pp$1.regexp_eatRegExpIdentifierStart = function(state) {
      var start = state.pos;
      var forceU = this.options.ecmaVersion >= 11;
      var ch = state.current(forceU);
      state.advance(forceU);

      if (ch === 0x5C /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
        ch = state.lastIntValue;
      }
      if (isRegExpIdentifierStart(ch)) {
        state.lastIntValue = ch;
        return true
      }

      state.pos = start;
      return false
    };
    function isRegExpIdentifierStart(ch) {
      return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */
    }

    // RegExpIdentifierPart ::
    //   UnicodeIDContinue
    //   `$`
    //   `_`
    //   `\` RegExpUnicodeEscapeSequence[+U]
    //   <ZWNJ>
    //   <ZWJ>
    pp$1.regexp_eatRegExpIdentifierPart = function(state) {
      var start = state.pos;
      var forceU = this.options.ecmaVersion >= 11;
      var ch = state.current(forceU);
      state.advance(forceU);

      if (ch === 0x5C /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
        ch = state.lastIntValue;
      }
      if (isRegExpIdentifierPart(ch)) {
        state.lastIntValue = ch;
        return true
      }

      state.pos = start;
      return false
    };
    function isRegExpIdentifierPart(ch) {
      return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */
    }

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape
    pp$1.regexp_eatAtomEscape = function(state) {
      if (
        this.regexp_eatBackReference(state) ||
        this.regexp_eatCharacterClassEscape(state) ||
        this.regexp_eatCharacterEscape(state) ||
        (state.switchN && this.regexp_eatKGroupName(state))
      ) {
        return true
      }
      if (state.switchU) {
        // Make the same message as V8.
        if (state.current() === 0x63 /* c */) {
          state.raise("Invalid unicode escape");
        }
        state.raise("Invalid escape");
      }
      return false
    };
    pp$1.regexp_eatBackReference = function(state) {
      var start = state.pos;
      if (this.regexp_eatDecimalEscape(state)) {
        var n = state.lastIntValue;
        if (state.switchU) {
          // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape
          if (n > state.maxBackReference) {
            state.maxBackReference = n;
          }
          return true
        }
        if (n <= state.numCapturingParens) {
          return true
        }
        state.pos = start;
      }
      return false
    };
    pp$1.regexp_eatKGroupName = function(state) {
      if (state.eat(0x6B /* k */)) {
        if (this.regexp_eatGroupName(state)) {
          state.backReferenceNames.push(state.lastStringValue);
          return true
        }
        state.raise("Invalid named reference");
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape
    pp$1.regexp_eatCharacterEscape = function(state) {
      return (
        this.regexp_eatControlEscape(state) ||
        this.regexp_eatCControlLetter(state) ||
        this.regexp_eatZero(state) ||
        this.regexp_eatHexEscapeSequence(state) ||
        this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||
        (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||
        this.regexp_eatIdentityEscape(state)
      )
    };
    pp$1.regexp_eatCControlLetter = function(state) {
      var start = state.pos;
      if (state.eat(0x63 /* c */)) {
        if (this.regexp_eatControlLetter(state)) {
          return true
        }
        state.pos = start;
      }
      return false
    };
    pp$1.regexp_eatZero = function(state) {
      if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {
        state.lastIntValue = 0;
        state.advance();
        return true
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape
    pp$1.regexp_eatControlEscape = function(state) {
      var ch = state.current();
      if (ch === 0x74 /* t */) {
        state.lastIntValue = 0x09; /* \t */
        state.advance();
        return true
      }
      if (ch === 0x6E /* n */) {
        state.lastIntValue = 0x0A; /* \n */
        state.advance();
        return true
      }
      if (ch === 0x76 /* v */) {
        state.lastIntValue = 0x0B; /* \v */
        state.advance();
        return true
      }
      if (ch === 0x66 /* f */) {
        state.lastIntValue = 0x0C; /* \f */
        state.advance();
        return true
      }
      if (ch === 0x72 /* r */) {
        state.lastIntValue = 0x0D; /* \r */
        state.advance();
        return true
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter
    pp$1.regexp_eatControlLetter = function(state) {
      var ch = state.current();
      if (isControlLetter(ch)) {
        state.lastIntValue = ch % 0x20;
        state.advance();
        return true
      }
      return false
    };
    function isControlLetter(ch) {
      return (
        (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||
        (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)
      )
    }

    // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence
    pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
      if ( forceU === void 0 ) forceU = false;

      var start = state.pos;
      var switchU = forceU || state.switchU;

      if (state.eat(0x75 /* u */)) {
        if (this.regexp_eatFixedHexDigits(state, 4)) {
          var lead = state.lastIntValue;
          if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {
            var leadSurrogateEnd = state.pos;
            if (state.eat(0x5C /* \ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {
              var trail = state.lastIntValue;
              if (trail >= 0xDC00 && trail <= 0xDFFF) {
                state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
                return true
              }
            }
            state.pos = leadSurrogateEnd;
            state.lastIntValue = lead;
          }
          return true
        }
        if (
          switchU &&
          state.eat(0x7B /* { */) &&
          this.regexp_eatHexDigits(state) &&
          state.eat(0x7D /* } */) &&
          isValidUnicode(state.lastIntValue)
        ) {
          return true
        }
        if (switchU) {
          state.raise("Invalid unicode escape");
        }
        state.pos = start;
      }

      return false
    };
    function isValidUnicode(ch) {
      return ch >= 0 && ch <= 0x10FFFF
    }

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape
    pp$1.regexp_eatIdentityEscape = function(state) {
      if (state.switchU) {
        if (this.regexp_eatSyntaxCharacter(state)) {
          return true
        }
        if (state.eat(0x2F /* / */)) {
          state.lastIntValue = 0x2F; /* / */
          return true
        }
        return false
      }

      var ch = state.current();
      if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {
        state.lastIntValue = ch;
        state.advance();
        return true
      }

      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape
    pp$1.regexp_eatDecimalEscape = function(state) {
      state.lastIntValue = 0;
      var ch = state.current();
      if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {
        do {
          state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);
          state.advance();
        } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)
        return true
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape
    pp$1.regexp_eatCharacterClassEscape = function(state) {
      var ch = state.current();

      if (isCharacterClassEscape(ch)) {
        state.lastIntValue = -1;
        state.advance();
        return true
      }

      if (
        state.switchU &&
        this.options.ecmaVersion >= 9 &&
        (ch === 0x50 /* P */ || ch === 0x70 /* p */)
      ) {
        state.lastIntValue = -1;
        state.advance();
        if (
          state.eat(0x7B /* { */) &&
          this.regexp_eatUnicodePropertyValueExpression(state) &&
          state.eat(0x7D /* } */)
        ) {
          return true
        }
        state.raise("Invalid property name");
      }

      return false
    };
    function isCharacterClassEscape(ch) {
      return (
        ch === 0x64 /* d */ ||
        ch === 0x44 /* D */ ||
        ch === 0x73 /* s */ ||
        ch === 0x53 /* S */ ||
        ch === 0x77 /* w */ ||
        ch === 0x57 /* W */
      )
    }

    // UnicodePropertyValueExpression ::
    //   UnicodePropertyName `=` UnicodePropertyValue
    //   LoneUnicodePropertyNameOrValue
    pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
      var start = state.pos;

      // UnicodePropertyName `=` UnicodePropertyValue
      if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {
        var name = state.lastStringValue;
        if (this.regexp_eatUnicodePropertyValue(state)) {
          var value = state.lastStringValue;
          this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
          return true
        }
      }
      state.pos = start;

      // LoneUnicodePropertyNameOrValue
      if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
        var nameOrValue = state.lastStringValue;
        this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
        return true
      }
      return false
    };
    pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
      if (!hasOwn(state.unicodeProperties.nonBinary, name))
        { state.raise("Invalid property name"); }
      if (!state.unicodeProperties.nonBinary[name].test(value))
        { state.raise("Invalid property value"); }
    };
    pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
      if (!state.unicodeProperties.binary.test(nameOrValue))
        { state.raise("Invalid property name"); }
    };

    // UnicodePropertyName ::
    //   UnicodePropertyNameCharacters
    pp$1.regexp_eatUnicodePropertyName = function(state) {
      var ch = 0;
      state.lastStringValue = "";
      while (isUnicodePropertyNameCharacter(ch = state.current())) {
        state.lastStringValue += codePointToString(ch);
        state.advance();
      }
      return state.lastStringValue !== ""
    };
    function isUnicodePropertyNameCharacter(ch) {
      return isControlLetter(ch) || ch === 0x5F /* _ */
    }

    // UnicodePropertyValue ::
    //   UnicodePropertyValueCharacters
    pp$1.regexp_eatUnicodePropertyValue = function(state) {
      var ch = 0;
      state.lastStringValue = "";
      while (isUnicodePropertyValueCharacter(ch = state.current())) {
        state.lastStringValue += codePointToString(ch);
        state.advance();
      }
      return state.lastStringValue !== ""
    };
    function isUnicodePropertyValueCharacter(ch) {
      return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)
    }

    // LoneUnicodePropertyNameOrValue ::
    //   UnicodePropertyValueCharacters
    pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
      return this.regexp_eatUnicodePropertyValue(state)
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass
    pp$1.regexp_eatCharacterClass = function(state) {
      if (state.eat(0x5B /* [ */)) {
        state.eat(0x5E /* ^ */);
        this.regexp_classRanges(state);
        if (state.eat(0x5D /* ] */)) {
          return true
        }
        // Unreachable since it threw "unterminated regular expression" error before.
        state.raise("Unterminated character class");
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges
    // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges
    // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash
    pp$1.regexp_classRanges = function(state) {
      while (this.regexp_eatClassAtom(state)) {
        var left = state.lastIntValue;
        if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {
          var right = state.lastIntValue;
          if (state.switchU && (left === -1 || right === -1)) {
            state.raise("Invalid character class");
          }
          if (left !== -1 && right !== -1 && left > right) {
            state.raise("Range out of order in character class");
          }
        }
      }
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom
    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash
    pp$1.regexp_eatClassAtom = function(state) {
      var start = state.pos;

      if (state.eat(0x5C /* \ */)) {
        if (this.regexp_eatClassEscape(state)) {
          return true
        }
        if (state.switchU) {
          // Make the same message as V8.
          var ch$1 = state.current();
          if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {
            state.raise("Invalid class escape");
          }
          state.raise("Invalid escape");
        }
        state.pos = start;
      }

      var ch = state.current();
      if (ch !== 0x5D /* ] */) {
        state.lastIntValue = ch;
        state.advance();
        return true
      }

      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape
    pp$1.regexp_eatClassEscape = function(state) {
      var start = state.pos;

      if (state.eat(0x62 /* b */)) {
        state.lastIntValue = 0x08; /* <BS> */
        return true
      }

      if (state.switchU && state.eat(0x2D /* - */)) {
        state.lastIntValue = 0x2D; /* - */
        return true
      }

      if (!state.switchU && state.eat(0x63 /* c */)) {
        if (this.regexp_eatClassControlLetter(state)) {
          return true
        }
        state.pos = start;
      }

      return (
        this.regexp_eatCharacterClassEscape(state) ||
        this.regexp_eatCharacterEscape(state)
      )
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter
    pp$1.regexp_eatClassControlLetter = function(state) {
      var ch = state.current();
      if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {
        state.lastIntValue = ch % 0x20;
        state.advance();
        return true
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
    pp$1.regexp_eatHexEscapeSequence = function(state) {
      var start = state.pos;
      if (state.eat(0x78 /* x */)) {
        if (this.regexp_eatFixedHexDigits(state, 2)) {
          return true
        }
        if (state.switchU) {
          state.raise("Invalid escape");
        }
        state.pos = start;
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits
    pp$1.regexp_eatDecimalDigits = function(state) {
      var start = state.pos;
      var ch = 0;
      state.lastIntValue = 0;
      while (isDecimalDigit(ch = state.current())) {
        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);
        state.advance();
      }
      return state.pos !== start
    };
    function isDecimalDigit(ch) {
      return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */
    }

    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits
    pp$1.regexp_eatHexDigits = function(state) {
      var start = state.pos;
      var ch = 0;
      state.lastIntValue = 0;
      while (isHexDigit(ch = state.current())) {
        state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
        state.advance();
      }
      return state.pos !== start
    };
    function isHexDigit(ch) {
      return (
        (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||
        (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||
        (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)
      )
    }
    function hexToInt(ch) {
      if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {
        return 10 + (ch - 0x41 /* A */)
      }
      if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {
        return 10 + (ch - 0x61 /* a */)
      }
      return ch - 0x30 /* 0 */
    }

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence
    // Allows only 0-377(octal) i.e. 0-255(decimal).
    pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
      if (this.regexp_eatOctalDigit(state)) {
        var n1 = state.lastIntValue;
        if (this.regexp_eatOctalDigit(state)) {
          var n2 = state.lastIntValue;
          if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
            state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
          } else {
            state.lastIntValue = n1 * 8 + n2;
          }
        } else {
          state.lastIntValue = n1;
        }
        return true
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit
    pp$1.regexp_eatOctalDigit = function(state) {
      var ch = state.current();
      if (isOctalDigit(ch)) {
        state.lastIntValue = ch - 0x30; /* 0 */
        state.advance();
        return true
      }
      state.lastIntValue = 0;
      return false
    };
    function isOctalDigit(ch) {
      return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */
    }

    // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits
    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit
    // And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
    pp$1.regexp_eatFixedHexDigits = function(state, length) {
      var start = state.pos;
      state.lastIntValue = 0;
      for (var i = 0; i < length; ++i) {
        var ch = state.current();
        if (!isHexDigit(ch)) {
          state.pos = start;
          return false
        }
        state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
        state.advance();
      }
      return true
    };

    // Object type used to represent tokens. Note that normally, tokens
    // simply exist as properties on the parser object. This is only
    // used for the onToken callback and the external tokenizer.

    var Token = function Token(p) {
      this.type = p.type;
      this.value = p.value;
      this.start = p.start;
      this.end = p.end;
      if (p.options.locations)
        { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }
      if (p.options.ranges)
        { this.range = [p.start, p.end]; }
    };

    // ## Tokenizer

    var pp = Parser.prototype;

    // Move to the next token

    pp.next = function(ignoreEscapeSequenceInKeyword) {
      if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)
        { this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword); }
      if (this.options.onToken)
        { this.options.onToken(new Token(this)); }

      this.lastTokEnd = this.end;
      this.lastTokStart = this.start;
      this.lastTokEndLoc = this.endLoc;
      this.lastTokStartLoc = this.startLoc;
      this.nextToken();
    };

    pp.getToken = function() {
      this.next();
      return new Token(this)
    };

    // If we're in an ES6 environment, make parsers iterable
    if (typeof Symbol !== "undefined")
      { pp[Symbol.iterator] = function() {
        var this$1$1 = this;

        return {
          next: function () {
            var token = this$1$1.getToken();
            return {
              done: token.type === types$1.eof,
              value: token
            }
          }
        }
      }; }

    // Toggle strict mode. Re-reads the next number or string to please
    // pedantic tests (`"use strict"; 010;` should fail).

    // Read a single token, updating the parser object's token-related
    // properties.

    pp.nextToken = function() {
      var curContext = this.curContext();
      if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }

      this.start = this.pos;
      if (this.options.locations) { this.startLoc = this.curPosition(); }
      if (this.pos >= this.input.length) { return this.finishToken(types$1.eof) }

      if (curContext.override) { return curContext.override(this) }
      else { this.readToken(this.fullCharCodeAtPos()); }
    };

    pp.readToken = function(code) {
      // Identifier or keyword. '\uXXXX' sequences are allowed in
      // identifiers, so '\' also dispatches to that.
      if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\' */)
        { return this.readWord() }

      return this.getTokenFromCode(code)
    };

    pp.fullCharCodeAtPos = function() {
      var code = this.input.charCodeAt(this.pos);
      if (code <= 0xd7ff || code >= 0xdc00) { return code }
      var next = this.input.charCodeAt(this.pos + 1);
      return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00
    };

    pp.skipBlockComment = function() {
      var startLoc = this.options.onComment && this.curPosition();
      var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
      if (end === -1) { this.raise(this.pos - 2, "Unterminated comment"); }
      this.pos = end + 2;
      if (this.options.locations) {
        for (var nextBreak = (void 0), pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;) {
          ++this.curLine;
          pos = this.lineStart = nextBreak;
        }
      }
      if (this.options.onComment)
        { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,
                               startLoc, this.curPosition()); }
    };

    pp.skipLineComment = function(startSkip) {
      var start = this.pos;
      var startLoc = this.options.onComment && this.curPosition();
      var ch = this.input.charCodeAt(this.pos += startSkip);
      while (this.pos < this.input.length && !isNewLine(ch)) {
        ch = this.input.charCodeAt(++this.pos);
      }
      if (this.options.onComment)
        { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,
                               startLoc, this.curPosition()); }
    };

    // Called at the start of the parse and after every token. Skips
    // whitespace and comments, and.

    pp.skipSpace = function() {
      loop: while (this.pos < this.input.length) {
        var ch = this.input.charCodeAt(this.pos);
        switch (ch) {
        case 32: case 160: // ' '
          ++this.pos;
          break
        case 13:
          if (this.input.charCodeAt(this.pos + 1) === 10) {
            ++this.pos;
          }
        case 10: case 8232: case 8233:
          ++this.pos;
          if (this.options.locations) {
            ++this.curLine;
            this.lineStart = this.pos;
          }
          break
        case 47: // '/'
          switch (this.input.charCodeAt(this.pos + 1)) {
          case 42: // '*'
            this.skipBlockComment();
            break
          case 47:
            this.skipLineComment(2);
            break
          default:
            break loop
          }
          break
        default:
          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
            ++this.pos;
          } else {
            break loop
          }
        }
      }
    };

    // Called at the end of every token. Sets `end`, `val`, and
    // maintains `context` and `exprAllowed`, and skips the space after
    // the token, so that the next one's `start` will point at the
    // right position.

    pp.finishToken = function(type, val) {
      this.end = this.pos;
      if (this.options.locations) { this.endLoc = this.curPosition(); }
      var prevType = this.type;
      this.type = type;
      this.value = val;

      this.updateContext(prevType);
    };

    // ### Token reading

    // This is the function that is called to fetch the next token. It
    // is somewhat obscure, because it works in character codes rather
    // than characters, and because operator parsing has been inlined
    // into it.
    //
    // All in the name of speed.
    //
    pp.readToken_dot = function() {
      var next = this.input.charCodeAt(this.pos + 1);
      if (next >= 48 && next <= 57) { return this.readNumber(true) }
      var next2 = this.input.charCodeAt(this.pos + 2);
      if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'
        this.pos += 3;
        return this.finishToken(types$1.ellipsis)
      } else {
        ++this.pos;
        return this.finishToken(types$1.dot)
      }
    };

    pp.readToken_slash = function() { // '/'
      var next = this.input.charCodeAt(this.pos + 1);
      if (this.exprAllowed) { ++this.pos; return this.readRegexp() }
      if (next === 61) { return this.finishOp(types$1.assign, 2) }
      return this.finishOp(types$1.slash, 1)
    };

    pp.readToken_mult_modulo_exp = function(code) { // '%*'
      var next = this.input.charCodeAt(this.pos + 1);
      var size = 1;
      var tokentype = code === 42 ? types$1.star : types$1.modulo;

      // exponentiation operator ** and **=
      if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
        ++size;
        tokentype = types$1.starstar;
        next = this.input.charCodeAt(this.pos + 2);
      }

      if (next === 61) { return this.finishOp(types$1.assign, size + 1) }
      return this.finishOp(tokentype, size)
    };

    pp.readToken_pipe_amp = function(code) { // '|&'
      var next = this.input.charCodeAt(this.pos + 1);
      if (next === code) {
        if (this.options.ecmaVersion >= 12) {
          var next2 = this.input.charCodeAt(this.pos + 2);
          if (next2 === 61) { return this.finishOp(types$1.assign, 3) }
        }
        return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2)
      }
      if (next === 61) { return this.finishOp(types$1.assign, 2) }
      return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1)
    };

    pp.readToken_caret = function() { // '^'
      var next = this.input.charCodeAt(this.pos + 1);
      if (next === 61) { return this.finishOp(types$1.assign, 2) }
      return this.finishOp(types$1.bitwiseXOR, 1)
    };

    pp.readToken_plus_min = function(code) { // '+-'
      var next = this.input.charCodeAt(this.pos + 1);
      if (next === code) {
        if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&
            (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
          // A `-->` line comment
          this.skipLineComment(3);
          this.skipSpace();
          return this.nextToken()
        }
        return this.finishOp(types$1.incDec, 2)
      }
      if (next === 61) { return this.finishOp(types$1.assign, 2) }
      return this.finishOp(types$1.plusMin, 1)
    };

    pp.readToken_lt_gt = function(code) { // '<>'
      var next = this.input.charCodeAt(this.pos + 1);
      var size = 1;
      if (next === code) {
        size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
        if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types$1.assign, size + 1) }
        return this.finishOp(types$1.bitShift, size)
      }
      if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&
          this.input.charCodeAt(this.pos + 3) === 45) {
        // `<!--`, an XML-style comment that should be interpreted as a line comment
        this.skipLineComment(4);
        this.skipSpace();
        return this.nextToken()
      }
      if (next === 61) { size = 2; }
      return this.finishOp(types$1.relational, size)
    };

    pp.readToken_eq_excl = function(code) { // '=!'
      var next = this.input.charCodeAt(this.pos + 1);
      if (next === 61) { return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }
      if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'
        this.pos += 2;
        return this.finishToken(types$1.arrow)
      }
      return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1)
    };

    pp.readToken_question = function() { // '?'
      var ecmaVersion = this.options.ecmaVersion;
      if (ecmaVersion >= 11) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 46) {
          var next2 = this.input.charCodeAt(this.pos + 2);
          if (next2 < 48 || next2 > 57) { return this.finishOp(types$1.questionDot, 2) }
        }
        if (next === 63) {
          if (ecmaVersion >= 12) {
            var next2$1 = this.input.charCodeAt(this.pos + 2);
            if (next2$1 === 61) { return this.finishOp(types$1.assign, 3) }
          }
          return this.finishOp(types$1.coalesce, 2)
        }
      }
      return this.finishOp(types$1.question, 1)
    };

    pp.readToken_numberSign = function() { // '#'
      var ecmaVersion = this.options.ecmaVersion;
      var code = 35; // '#'
      if (ecmaVersion >= 13) {
        ++this.pos;
        code = this.fullCharCodeAtPos();
        if (isIdentifierStart(code, true) || code === 92 /* '\' */) {
          return this.finishToken(types$1.privateId, this.readWord1())
        }
      }

      this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
    };

    pp.getTokenFromCode = function(code) {
      switch (code) {
      // The interpretation of a dot depends on whether it is followed
      // by a digit or another two dots.
      case 46: // '.'
        return this.readToken_dot()

      // Punctuation tokens.
      case 40: ++this.pos; return this.finishToken(types$1.parenL)
      case 41: ++this.pos; return this.finishToken(types$1.parenR)
      case 59: ++this.pos; return this.finishToken(types$1.semi)
      case 44: ++this.pos; return this.finishToken(types$1.comma)
      case 91: ++this.pos; return this.finishToken(types$1.bracketL)
      case 93: ++this.pos; return this.finishToken(types$1.bracketR)
      case 123: ++this.pos; return this.finishToken(types$1.braceL)
      case 125: ++this.pos; return this.finishToken(types$1.braceR)
      case 58: ++this.pos; return this.finishToken(types$1.colon)

      case 96: // '`'
        if (this.options.ecmaVersion < 6) { break }
        ++this.pos;
        return this.finishToken(types$1.backQuote)

      case 48: // '0'
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number
        if (this.options.ecmaVersion >= 6) {
          if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number
          if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number
        }

      // Anything else beginning with a digit is an integer, octal
      // number, or float.
      case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9
        return this.readNumber(false)

      // Quotes produce strings.
      case 34: case 39: // '"', "'"
        return this.readString(code)

      // Operators are parsed inline in tiny state machines. '=' (61) is
      // often referred to. `finishOp` simply skips the amount of
      // characters it is given as second argument, and returns a token
      // of the type given by its first argument.
      case 47: // '/'
        return this.readToken_slash()

      case 37: case 42: // '%*'
        return this.readToken_mult_modulo_exp(code)

      case 124: case 38: // '|&'
        return this.readToken_pipe_amp(code)

      case 94: // '^'
        return this.readToken_caret()

      case 43: case 45: // '+-'
        return this.readToken_plus_min(code)

      case 60: case 62: // '<>'
        return this.readToken_lt_gt(code)

      case 61: case 33: // '=!'
        return this.readToken_eq_excl(code)

      case 63: // '?'
        return this.readToken_question()

      case 126: // '~'
        return this.finishOp(types$1.prefix, 1)

      case 35: // '#'
        return this.readToken_numberSign()
      }

      this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
    };

    pp.finishOp = function(type, size) {
      var str = this.input.slice(this.pos, this.pos + size);
      this.pos += size;
      return this.finishToken(type, str)
    };

    pp.readRegexp = function() {
      var escaped, inClass, start = this.pos;
      for (;;) {
        if (this.pos >= this.input.length) { this.raise(start, "Unterminated regular expression"); }
        var ch = this.input.charAt(this.pos);
        if (lineBreak.test(ch)) { this.raise(start, "Unterminated regular expression"); }
        if (!escaped) {
          if (ch === "[") { inClass = true; }
          else if (ch === "]" && inClass) { inClass = false; }
          else if (ch === "/" && !inClass) { break }
          escaped = ch === "\\";
        } else { escaped = false; }
        ++this.pos;
      }
      var pattern = this.input.slice(start, this.pos);
      ++this.pos;
      var flagsStart = this.pos;
      var flags = this.readWord1();
      if (this.containsEsc) { this.unexpected(flagsStart); }

      // Validate pattern
      var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
      state.reset(start, pattern, flags);
      this.validateRegExpFlags(state);
      this.validateRegExpPattern(state);

      // Create Literal#value property value.
      var value = null;
      try {
        value = new RegExp(pattern, flags);
      } catch (e) {
        // ESTree requires null if it failed to instantiate RegExp object.
        // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral
      }

      return this.finishToken(types$1.regexp, {pattern: pattern, flags: flags, value: value})
    };

    // Read an integer in the given radix. Return null if zero digits
    // were read, the integer value otherwise. When `len` is given, this
    // will return `null` unless the integer has exactly `len` digits.

    pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
      // `len` is used for character escape sequences. In that case, disallow separators.
      var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;

      // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)
      // and isn't fraction part nor exponent part. In that case, if the first digit
      // is zero then disallow separators.
      var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;

      var start = this.pos, total = 0, lastCode = 0;
      for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {
        var code = this.input.charCodeAt(this.pos), val = (void 0);

        if (allowSeparators && code === 95) {
          if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"); }
          if (lastCode === 95) { this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"); }
          if (i === 0) { this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"); }
          lastCode = code;
          continue
        }

        if (code >= 97) { val = code - 97 + 10; } // a
        else if (code >= 65) { val = code - 65 + 10; } // A
        else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9
        else { val = Infinity; }
        if (val >= radix) { break }
        lastCode = code;
        total = total * radix + val;
      }

      if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"); }
      if (this.pos === start || len != null && this.pos - start !== len) { return null }

      return total
    };

    function stringToNumber(str, isLegacyOctalNumericLiteral) {
      if (isLegacyOctalNumericLiteral) {
        return parseInt(str, 8)
      }

      // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.
      return parseFloat(str.replace(/_/g, ""))
    }

    function stringToBigInt(str) {
      if (typeof BigInt !== "function") {
        return null
      }

      // `BigInt(value)` throws syntax error if the string contains numeric separators.
      return BigInt(str.replace(/_/g, ""))
    }

    pp.readRadixNumber = function(radix) {
      var start = this.pos;
      this.pos += 2; // 0x
      var val = this.readInt(radix);
      if (val == null) { this.raise(this.start + 2, "Expected number in radix " + radix); }
      if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
        val = stringToBigInt(this.input.slice(start, this.pos));
        ++this.pos;
      } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }
      return this.finishToken(types$1.num, val)
    };

    // Read an integer, octal integer, or floating-point number.

    pp.readNumber = function(startsWithDot) {
      var start = this.pos;
      if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, "Invalid number"); }
      var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
      if (octal && this.strict) { this.raise(start, "Invalid number"); }
      var next = this.input.charCodeAt(this.pos);
      if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
        var val$1 = stringToBigInt(this.input.slice(start, this.pos));
        ++this.pos;
        if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }
        return this.finishToken(types$1.num, val$1)
      }
      if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }
      if (next === 46 && !octal) { // '.'
        ++this.pos;
        this.readInt(10);
        next = this.input.charCodeAt(this.pos);
      }
      if ((next === 69 || next === 101) && !octal) { // 'eE'
        next = this.input.charCodeAt(++this.pos);
        if (next === 43 || next === 45) { ++this.pos; } // '+-'
        if (this.readInt(10) === null) { this.raise(start, "Invalid number"); }
      }
      if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }

      var val = stringToNumber(this.input.slice(start, this.pos), octal);
      return this.finishToken(types$1.num, val)
    };

    // Read a string value, interpreting backslash-escapes.

    pp.readCodePoint = function() {
      var ch = this.input.charCodeAt(this.pos), code;

      if (ch === 123) { // '{'
        if (this.options.ecmaVersion < 6) { this.unexpected(); }
        var codePos = ++this.pos;
        code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
        ++this.pos;
        if (code > 0x10FFFF) { this.invalidStringToken(codePos, "Code point out of bounds"); }
      } else {
        code = this.readHexChar(4);
      }
      return code
    };

    pp.readString = function(quote) {
      var out = "", chunkStart = ++this.pos;
      for (;;) {
        if (this.pos >= this.input.length) { this.raise(this.start, "Unterminated string constant"); }
        var ch = this.input.charCodeAt(this.pos);
        if (ch === quote) { break }
        if (ch === 92) { // '\'
          out += this.input.slice(chunkStart, this.pos);
          out += this.readEscapedChar(false);
          chunkStart = this.pos;
        } else if (ch === 0x2028 || ch === 0x2029) {
          if (this.options.ecmaVersion < 10) { this.raise(this.start, "Unterminated string constant"); }
          ++this.pos;
          if (this.options.locations) {
            this.curLine++;
            this.lineStart = this.pos;
          }
        } else {
          if (isNewLine(ch)) { this.raise(this.start, "Unterminated string constant"); }
          ++this.pos;
        }
      }
      out += this.input.slice(chunkStart, this.pos++);
      return this.finishToken(types$1.string, out)
    };

    // Reads template string tokens.

    var INVALID_TEMPLATE_ESCAPE_ERROR = {};

    pp.tryReadTemplateToken = function() {
      this.inTemplateElement = true;
      try {
        this.readTmplToken();
      } catch (err) {
        if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
          this.readInvalidTemplateToken();
        } else {
          throw err
        }
      }

      this.inTemplateElement = false;
    };

    pp.invalidStringToken = function(position, message) {
      if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
        throw INVALID_TEMPLATE_ESCAPE_ERROR
      } else {
        this.raise(position, message);
      }
    };

    pp.readTmplToken = function() {
      var out = "", chunkStart = this.pos;
      for (;;) {
        if (this.pos >= this.input.length) { this.raise(this.start, "Unterminated template"); }
        var ch = this.input.charCodeAt(this.pos);
        if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'
          if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {
            if (ch === 36) {
              this.pos += 2;
              return this.finishToken(types$1.dollarBraceL)
            } else {
              ++this.pos;
              return this.finishToken(types$1.backQuote)
            }
          }
          out += this.input.slice(chunkStart, this.pos);
          return this.finishToken(types$1.template, out)
        }
        if (ch === 92) { // '\'
          out += this.input.slice(chunkStart, this.pos);
          out += this.readEscapedChar(true);
          chunkStart = this.pos;
        } else if (isNewLine(ch)) {
          out += this.input.slice(chunkStart, this.pos);
          ++this.pos;
          switch (ch) {
          case 13:
            if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }
          case 10:
            out += "\n";
            break
          default:
            out += String.fromCharCode(ch);
            break
          }
          if (this.options.locations) {
            ++this.curLine;
            this.lineStart = this.pos;
          }
          chunkStart = this.pos;
        } else {
          ++this.pos;
        }
      }
    };

    // Reads a template token to search for the end, without validating any escape sequences
    pp.readInvalidTemplateToken = function() {
      for (; this.pos < this.input.length; this.pos++) {
        switch (this.input[this.pos]) {
        case "\\":
          ++this.pos;
          break

        case "$":
          if (this.input[this.pos + 1] !== "{") {
            break
          }

        // falls through
        case "`":
          return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos))

        // no default
        }
      }
      this.raise(this.start, "Unterminated template");
    };

    // Used to read escaped characters

    pp.readEscapedChar = function(inTemplate) {
      var ch = this.input.charCodeAt(++this.pos);
      ++this.pos;
      switch (ch) {
      case 110: return "\n" // 'n' -> '\n'
      case 114: return "\r" // 'r' -> '\r'
      case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'
      case 117: return codePointToString(this.readCodePoint()) // 'u'
      case 116: return "\t" // 't' -> '\t'
      case 98: return "\b" // 'b' -> '\b'
      case 118: return "\u000b" // 'v' -> '\u000b'
      case 102: return "\f" // 'f' -> '\f'
      case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\r\n'
      case 10: // ' \n'
        if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }
        return ""
      case 56:
      case 57:
        if (this.strict) {
          this.invalidStringToken(
            this.pos - 1,
            "Invalid escape sequence"
          );
        }
        if (inTemplate) {
          var codePos = this.pos - 1;

          this.invalidStringToken(
            codePos,
            "Invalid escape sequence in template string"
          );

          return null
        }
      default:
        if (ch >= 48 && ch <= 55) {
          var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
          var octal = parseInt(octalStr, 8);
          if (octal > 255) {
            octalStr = octalStr.slice(0, -1);
            octal = parseInt(octalStr, 8);
          }
          this.pos += octalStr.length - 1;
          ch = this.input.charCodeAt(this.pos);
          if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
            this.invalidStringToken(
              this.pos - 1 - octalStr.length,
              inTemplate
                ? "Octal literal in template string"
                : "Octal literal in strict mode"
            );
          }
          return String.fromCharCode(octal)
        }
        if (isNewLine(ch)) {
          // Unicode new line characters after \ get removed from output in both
          // template literals and strings
          return ""
        }
        return String.fromCharCode(ch)
      }
    };

    // Used to read character escape sequences ('\x', '\u', '\U').

    pp.readHexChar = function(len) {
      var codePos = this.pos;
      var n = this.readInt(16, len);
      if (n === null) { this.invalidStringToken(codePos, "Bad character escape sequence"); }
      return n
    };

    // Read an identifier, and return it as a string. Sets `this.containsEsc`
    // to whether the word contained a '\u' escape.
    //
    // Incrementally adds only escaped chars, adding other chunks as-is
    // as a micro-optimization.

    pp.readWord1 = function() {
      this.containsEsc = false;
      var word = "", first = true, chunkStart = this.pos;
      var astral = this.options.ecmaVersion >= 6;
      while (this.pos < this.input.length) {
        var ch = this.fullCharCodeAtPos();
        if (isIdentifierChar(ch, astral)) {
          this.pos += ch <= 0xffff ? 1 : 2;
        } else if (ch === 92) { // "\"
          this.containsEsc = true;
          word += this.input.slice(chunkStart, this.pos);
          var escStart = this.pos;
          if (this.input.charCodeAt(++this.pos) !== 117) // "u"
            { this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"); }
          ++this.pos;
          var esc = this.readCodePoint();
          if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))
            { this.invalidStringToken(escStart, "Invalid Unicode escape"); }
          word += codePointToString(esc);
          chunkStart = this.pos;
        } else {
          break
        }
        first = false;
      }
      return word + this.input.slice(chunkStart, this.pos)
    };

    // Read an identifier or keyword token. Will check for reserved
    // words when necessary.

    pp.readWord = function() {
      var word = this.readWord1();
      var type = types$1.name;
      if (this.keywords.test(word)) {
        type = keywords[word];
      }
      return this.finishToken(type, word)
    };

    // Acorn is a tiny, fast JavaScript parser written in JavaScript.

    var version = "8.8.1";

    Parser.acorn = {
      Parser: Parser,
      version: version,
      defaultOptions: defaultOptions,
      Position: Position,
      SourceLocation: SourceLocation,
      getLineInfo: getLineInfo,
      Node: Node,
      TokenType: TokenType,
      tokTypes: types$1,
      keywordTypes: keywords,
      TokContext: TokContext,
      tokContexts: types,
      isIdentifierChar: isIdentifierChar,
      isIdentifierStart: isIdentifierStart,
      Token: Token,
      isNewLine: isNewLine,
      lineBreak: lineBreak,
      lineBreakG: lineBreakG,
      nonASCIIwhitespace: nonASCIIwhitespace
    };

    // The main exported interface (under `self.acorn` when in the
    // browser) is a `parse` function that takes a code string and
    // returns an abstract syntax tree as specified by [Mozilla parser
    // API][api].
    //
    // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

    function parse(input, options) {
      return Parser.parse(input, options)
    }

    var constants$1 = {
      undefined: 'void(0)',
      Infinity:  'Number.POSITIVE_INFINITY',
      NaN:       'Number.NaN',
      E:         'Math.E',
      LN2:       'Math.LN2',
      LN10:      'Math.LN10',
      LOG2E:     'Math.LOG2E',
      LOG10E:    'Math.LOG10E',
      PI:        'Math.PI',
      SQRT1_2:   'Math.SQRT1_2',
      SQRT2:     'Math.SQRT2'
    };

    const PARSER_OPT = { ecmaVersion: 11 };
    const DEFAULT_PARAM_ID = '$';
    const DEFAULT_TUPLE_ID = 'd';
    const DEFAULT_TUPLE_ID1 = 'd1';
    const DEFAULT_TUPLE_ID2 = 'd2';

    const NO = msg => (node, ctx) => ctx.error(node, msg + ' not allowed');
    const ERROR_AGGREGATE = NO('Aggregate function');
    const ERROR_WINDOW = NO('Window function');
    const ERROR_ARGUMENT = 'Invalid argument';
    const ERROR_COLUMN = 'Invalid column reference';
    const ERROR_AGGRONLY = ERROR_COLUMN + ' (must be input to an aggregate function)';
    const ERROR_FUNCTION = 'Invalid function call';
    const ERROR_MEMBER = 'Invalid member expression';
    const ERROR_OP_PARAMETER = 'Invalid operator parameter';
    const ERROR_PARAM = 'Invalid param reference';
    const ERROR_VARIABLE = 'Invalid variable reference';
    const ERROR_VARIABLE_OP = 'Variable not accessible in operator call';
    const ERROR_DECLARATION = 'Unsupported variable declaration';
    const ERROR_DESTRUCTURE = 'Unsupported destructuring pattern';
    const ERROR_CLOSURE = 'Table expressions do not support closures';
    const ERROR_ESCAPE = 'Use aq.escape(fn) to use a function as-is (including closures)';
    const ERROR_USE_PARAMS = 'use table.params({ name: value }) to define dynamic parameters';
    const ERROR_ADD_FUNCTION = 'use aq.addFunction(name, fn) to add new op functions';
    const ERROR_VARIABLE_NOTE = `\nNote: ${ERROR_CLOSURE}. ${ERROR_ESCAPE}, or ${ERROR_USE_PARAMS}.`;
    const ERROR_FUNCTION_NOTE = `\nNote: ${ERROR_CLOSURE}. ${ERROR_ESCAPE}, or ${ERROR_ADD_FUNCTION}.`;
    const ERROR_ROW_OBJECT = `The ${ROW_OBJECT} method is not valid in multi-table expressions.`;

    function parseExpression(ctx, spec) {
      const ast = parseAST(spec);
      let node = ctx.root = ast;
      ctx.spec = spec;
      ctx.tuple = null;
      ctx.tuple1 = null;
      ctx.tuple2 = null;
      ctx.$param = null;
      ctx.$op = 0;
      ctx.scope = new Set();
      ctx.paramsRef = new Map();
      ctx.columnRef = new Map();

      // parse input column parameters
      // if no function def, assume default tuple identifiers
      if (isFunctionExpression(node)) {
        parseFunction(node, ctx);
        node = node.body;
      } else if (ctx.join) {
        ctx.scope.add(ctx.tuple1 = DEFAULT_TUPLE_ID1);
        ctx.scope.add(ctx.tuple2 = DEFAULT_TUPLE_ID2);
        ctx.scope.add(ctx.$param = DEFAULT_PARAM_ID);
      } else {
        ctx.scope.add(ctx.tuple = DEFAULT_TUPLE_ID);
        ctx.scope.add(ctx.$param = DEFAULT_PARAM_ID);
      }

      // rewrite column references & function calls
      walk(node, ctx, visitors$1);

      return ctx.root;
    }

    function parseAST(expr) {
      try {
        const code = expr.field ? fieldRef(expr)
          : isArray(expr) ? toString(expr)
          : expr;
        return parse(`expr=(${code})`, PARSER_OPT).body[0].expression.right;
      } catch (err) {
        error(`Expression parse error: ${expr+''}`);
      }
    }

    function fieldRef(expr) {
      const col = JSON.stringify(expr+'');
      return !(expr.table || 0) ? `d=>d[${col}]` : `(a,b)=>b[${col}]`;
    }

    const visitors$1 = {
      FunctionDeclaration: NO('Function definitions'),
      ForStatement: NO('For loops'),
      ForOfStatement: NO('For-of loops'),
      ForInStatement: NO('For-in loops'),
      WhileStatement: NO('While loops'),
      DoWhileStatement: NO('Do-while loops'),
      AwaitExpression: NO('Await expressions'),
      ArrowFunctionExpression: NO('Function definitions'),
      AssignmentExpression: NO('Assignments'),
      FunctionExpression: NO('Function definitions'),
      NewExpression: NO('Use of "new"'),
      UpdateExpression: NO('Update expressions'),

      VariableDeclarator(node, ctx) {
        handleDeclaration(node.id, ctx);
      },
      Identifier(node, ctx, parent) {
        if (handleIdentifier(node, ctx, parent) && !ctx.scope.has(node.name)) {
          // handle identifier passed responsibility here
          // raise error if identifier not defined in scope
          ctx.error(node, ERROR_VARIABLE, ERROR_VARIABLE_NOTE);
        }
      },
      CallExpression(node, ctx) {
        const name = functionName(node.callee);
        const def = getAggregate(name) || getWindow(name);

        // parse operator and rewrite invocation
        if (def) {
          if ((ctx.join || ctx.aggregate === false) && hasAggregate(name)) {
            ERROR_AGGREGATE(node, ctx);
          }
          if ((ctx.join || ctx.window === false) && hasWindow(name)) {
            ERROR_WINDOW(node, ctx);
          }

          ctx.$op = 1;
          if (ctx.ast) {
            updateFunctionNode(node, name, ctx);
            node.arguments.forEach(arg => walk(arg, ctx, opVisitors));
          } else {
            const op = ctx.op(parseOperator(ctx, def, name, node.arguments));
            Object.assign(node, { type: Op$1, name: op.id });
          }
          ctx.$op = 0;
          return false;
        } else if (hasFunction(name)) {
          updateFunctionNode(node, name, ctx);
        } else {
          ctx.error(node, ERROR_FUNCTION, ERROR_FUNCTION_NOTE);
        }
      },
      MemberExpression(node, ctx, parent) {
        const { object, property } = node;

        // bail if left head is not an identifier
        // in this case we will recurse and handle it later
        if (!is(Identifier, object)) return;
        const { name } = object;

        // allow use of Math prefix to access constant values
        if (isMath(node) && is(Identifier, property)
            && has(constants$1, property.name)) {
          updateConstantNode(node, property.name);
          return;
        }

        const index = name === ctx.tuple ? 0
          : name === ctx.tuple1 ? 1
          : name === ctx.tuple2 ? 2
          : -1;

        if (index >= 0) {
          // replace member expression with column ref
          return spliceMember(node, index, ctx, checkColumn, parent);
        } else if (name === ctx.$param) {
          // replace member expression with param ref
          return spliceMember(node, index, ctx, checkParam);
        } else if (ctx.paramsRef.has(name)) {
          updateParameterNode(node, ctx.paramsRef.get(name));
        } else if (ctx.columnRef.has(name)) {
          updateColumnNode(object, name, ctx, node);
        } else if (has(ctx.params, name)) {
          updateParameterNode(object, name);
        }
      }
    };

    function spliceMember(node, index, ctx, check, parent) {
      const { property, computed } = node;
      let name;

      if (!computed) {
        name = property.name;
      } else if (is(Literal, property)) {
        name = property.value;
      } else try {
        name = ctx.param(property);
      } catch (e) {
        ctx.error(node, ERROR_MEMBER);
      }

      check(node, name, index, ctx, parent);
      return false;
    }

    const opVisitors = {
      ...visitors$1,
      VariableDeclarator: NO('Variable declaration in operator call'),
      Identifier(node, ctx, parent) {
        if (handleIdentifier(node, ctx, parent)) {
          ctx.error(node, ERROR_VARIABLE_OP);
        }
      },
      CallExpression(node, ctx) {
        const name = functionName(node.callee);

        // rewrite if built-in function
        if (hasFunction(name)) {
          updateFunctionNode(node, name, ctx);
        } else {
          ctx.error(node, ERROR_FUNCTION, ERROR_FUNCTION_NOTE);
        }
      }
    };

    function parseFunction(node, ctx) {
      if (node.generator) NO('Generator functions')(node, ctx);
      if (node.async) NO('Async functions')(node, ctx);

      const { params } = node;
      const len = params.length;
      const setc = index => (name, key) => ctx.columnRef.set(name, [key, index]);
      const setp = (name, key) => ctx.paramsRef.set(name, key);

      if (!len) ; else if (ctx.join) {
        parseRef(ctx, params[0], 'tuple1', setc(1));
        if (len > 1) parseRef(ctx, params[1], 'tuple2', setc(2));
        if (len > 2) parseRef(ctx, params[2], '$param', setp);
      } else {
        parseRef(ctx, params[0], 'tuple', setc(0));
        if (len > 1) parseRef(ctx, params[1], '$param', setp);
      }

      ctx.root = node.body;
    }

    function parseRef(ctx, node, refName, alias) {
      if (is(Identifier, node)) {
        ctx.scope.add(node.name);
        ctx[refName] = node.name;
      } else if (is(ObjectPattern, node)) {
        node.properties.forEach(p => {
          const key = is(Identifier, p.key) ? p.key.name
            : is(Literal, p.key) ? p.key.value
            : ctx.error(p, ERROR_ARGUMENT);
          if (!is(Identifier, p.value)) {
            ctx.error(p.value, ERROR_DESTRUCTURE);
          }
          alias(p.value.name, key);
        });
      }
    }

    function parseOperator(ctx, def, name, args) {
      const fields = [];
      const params = [];
      const idxFields = def.param[0] || 0;
      const idxParams = idxFields + (def.param[1] || 0);

      args.forEach((arg, index) => {
        if (index < idxFields) {
          walk(arg, ctx, opVisitors);
          fields.push(ctx.field(arg));
        } else if (index < idxParams) {
          walk(arg, ctx, opVisitors);
          params.push(ctx.param(arg));
        } else {
          ctx.error(arg, ERROR_OP_PARAMETER);
        }
      });

      return { name, fields, params, ...(ctx.spec.window || {}) };
    }

    function functionName(node) {
      return is(Identifier, node) ? node.name
        : !is(MemberExpression, node) ? null
        : isMath(node) ? rewriteMath(node.property.name)
        : node.property.name;
    }

    function isMath(node) {
      return is(Identifier, node.object) && node.object.name === 'Math';
    }

    function rewriteMath(name) {
      return name === 'max' ? 'greatest'
        : name === 'min' ? 'least'
        : name;
    }

    function handleIdentifier(node, ctx, parent) {
      const { name } = node;

      if (is(MemberExpression, parent) && parent.property === node) ; else if (is(Property, parent) && parent.key === node) ; else if (ctx.paramsRef.has(name)) {
        updateParameterNode(node, ctx.paramsRef.get(name));
      } else if (ctx.columnRef.has(name)) {
        updateColumnNode(node, name, ctx, parent);
      } else if (has(ctx.params, name)) {
        updateParameterNode(node, name);
      } else if (has(constants$1, name)) {
        updateConstantNode(node, name);
      } else {
        return true;
      }
    }

    function checkColumn(node, name, index, ctx, parent) {
      // check column existence if we have a backing table
      const table = index === 0 ? ctx.table
        : index > 0 ? ctx.join[index - 1]
        : null;
      const col = table && table.column(name);
      if (table && !col) {
        ctx.error(node, ERROR_COLUMN);
      }

      // check if column reference is valid in current context
      if (ctx.aggronly && !ctx.$op) {
        ctx.error(node, ERROR_AGGRONLY);
      }

      // rewrite ast node as a column access
      rewrite(node, name, index, col, parent);
    }

    function updateColumnNode(node, key, ctx, parent) {
      const [name, index] = ctx.columnRef.get(key);
      checkColumn(node, name, index, ctx, parent);
    }

    function checkParam(node, name, index, ctx) {
      if (ctx.params && !has(ctx.params, name)) {
        ctx.error(node, ERROR_PARAM);
      }
      updateParameterNode(node, name);
    }

    function updateParameterNode(node, name) {
      node.type = Parameter;
      node.name = name;
    }

    function updateConstantNode(node, name) {
      node.type = Constant;
      node.name = name;
      node.raw = constants$1[name];
    }

    function updateFunctionNode(node, name, ctx) {
      if (name === ROW_OBJECT) {
        const t = ctx.table;
        if (!t) ctx.error(node, ERROR_ROW_OBJECT);
        rowObjectExpression(node,
          node.arguments.length
            ? node.arguments.map(node => {
                const col = ctx.param(node);
                const name = isNumber(col) ? t.columnName(col) : col;
                if (!t.column(name)) ctx.error(node, ERROR_COLUMN);
                return name;
              })
            : t.columnNames()
        );
      } else {
        node.callee = { type: Function$1, name };
      }
    }

    function handleDeclaration(node, ctx) {
      if (is(Identifier, node)) {
        ctx.scope.add(node.name);
      } else if (is(ArrayPattern, node)) {
        node.elements.forEach(elm => handleDeclaration(elm, ctx));
      } else if (is(ObjectPattern, node)) {
        node.properties.forEach(prop => handleDeclaration(prop.value, ctx));
      } else {
        ctx.error(node.id, ERROR_DECLARATION);
      }
    }

    const ANNOTATE = { [Column$1]: 1, [Op$1]: 1 };

    function parse$1(input, opt = {}) {
      const generate = opt.generate || codegen;
      const compiler = opt.compiler || compile$1;
      const params = getParams(opt);
      const fields = {};
      const opcall = {};
      const names = [];
      const exprs = [];
      let fieldId = 0;
      let opId = -1;

      const compileExpr = opt.join ? compiler.join
        : opt.index == 1 ? compiler.expr2
        : compiler.expr;

      // parser context
      const ctx = {
        op(op) {
          const key = opKey(op);
          return opcall[key] || (op.id = ++opId, opcall[key] = op);
        },
        field(node) {
          const code = generate(node);
          return fields[code] || (fields[code] = ++fieldId);
        },
        param(node) {
          return is(Literal, node)
            ? node.value
            : compiler.param(generate(node), params);
        },
        value(name, node) {
          names.push(name);
          const e = node.escape || (opt.ast
            ? clean(node)
            : compileExpr(generate(node), params));
          exprs.push(e);
          // annotate expression if it is a direct column or op access
          // this permits downstream optimizations
          if (ANNOTATE[node.type] && e !== node && isObject(e)) {
            e.field = node.name;
          }
        },
        error(node, msg, note = '') {
          // both expresions and fields are parsed
          // with added code prefixes of length 6!
          const i = node.start - 6;
          const j = node.end - 6;
          const snippet = String(ctx.spec).slice(i, j);
          error(`${msg}: "${snippet}"${note}`);
        }
      };

      // copy all options to context, potentially overwriting methods
      Object.assign(ctx, opt, { params });

      // parse each expression
      for (const [name, value] of entries(input)) {
        ctx.value(
          name + '',
          value.escape
            ? parseEscape(ctx, value, params)
            : parseExpression(ctx, value)
        );
      }

      // return expression asts if requested
      if (opt.ast) {
        return { names, exprs };
      }

      // compile input field accessors
      const f = [];
      for (const key in fields) {
        f[fields[key]] = compiler.expr(key, params);
      }

      // resolve input fields to operations
      const ops = Object.values(opcall);
      ops.forEach(op => op.fields = op.fields.map(id => f[id]));

      return { names, exprs, ops };
    }

    function opKey(op) {
      let key = `${op.name}(${op.fields.concat(op.params).join(',')})`;
      if (op.frame) {
        const frame = op.frame.map(v => Number.isFinite(v) ? Math.abs(v) : -1);
        key += `[${frame},${!!op.peers}]`;
      }
      return key;
    }

    function getParams(opt) {
      return (opt.table ? getTableParams(opt.table)
        : opt.join ? {
            ...getTableParams(opt.join[1]),
            ...getTableParams(opt.join[0])
          }
        : {}) || {};
    }

    function getTableParams(table) {
      return table && isFunction(table.params) ? table.params() : {};
    }

    const Expr = 'Expr';
    const ExprList = 'ExprList';
    const ExprNumber = 'ExprNumber';
    const ExprObject = 'ExprObject';
    const JoinKeys = 'JoinKeys';
    const JoinValues = 'JoinValues';
    const Options = 'Options';
    const OrderbyKeys = 'OrderKeys';
    const SelectionList = 'SelectionList';
    const TableRef = 'TableRef';
    const TableRefList = 'TableRefList';

    const Descending = 'Descending';
    const Query = 'Query';
    const Selection = 'Selection';
    const Verb = 'Verb';
    const Window = 'Window';

    /**
     * Annotate an expression in an object wrapper.
     * @param {string|Function|object} expr An expression to annotate.
     * @param {object} properties The properties to annotate with.
     * @return {object} A new wrapped expression object.
     */
    function wrap(expr, properties) {
      return expr && expr.expr
        ? new Wrapper({ ...expr, ...properties })
        : new Wrapper(properties, expr);
    }

    class Wrapper {
      constructor(properties, expr) {
        this.expr = expr;
        Object.assign(this, properties);
      }
      toString() {
        return String(this.expr);
      }
      toObject() {
        return {
          ...this,
          expr: this.toString(),
          ...(isFunction(this.expr) ? { func: true } : {})
        };
      }
    }

    /**
     * Annotate a table expression to indicate descending sort order.
     * @param {string|Function|object} expr The table expression to annotate.
     * @return {object} A wrapped expression indicating descending sort.
     * @example desc('colA')
     * @example desc(d => d.colA)
     */
    function desc(expr) {
      return wrap(expr, { desc: true });
    }

    /**
     * Annotate an expression to indicate it is a string field reference.
     * @param {string|object} expr The column name, or an existing wrapped
     *  expression for a column name.
     * @param {string} [name] The column name to use. If provided, will
     *  overwrite the input expression value.
     * @param {number} [table=0] The table index of the field, in case of
     *  expressions over multiple tables.
     * @return A wrapped expression for a named column.
     * @example field('colA')
     */
    function field(expr, name, table = 0) {
      const props = table ? { field: true, table } : { field: true };
      return wrap(
        expr,
        name ? { expr: name, ...props } : props
      );
    }

    /**
     * Annotate a table expression to compute rolling aggregate or window
     * functions within a sliding window frame. For example, to specify a
     * rolling 7-day average centered on the current day, use rolling with
     * a frame value of [-3, 3].
     * @param {string|Function|object} expr The table expression to annotate.
     * @param {[number?, number?]} [frame=[-Infinity, 0]] The sliding window frame
     *  offsets. Each entry indicates an offset from the current value. If an
     *  entry is non-finite, the frame will be unbounded in that direction,
     *  including all preceding or following values. If unspecified, the frame
     *  will include the current values and all preceding values.
     * @param {boolean} [includePeers=false] Indicates if the sliding window frame
     *  should ignore peer (tied) values. If false (the default), the window frame
     *  boundaries are insensitive to peer values. If `true`, the window frame
     *  expands to include all peers. This parameter only affects operations that
     *  depend on the window frame: aggregate functions and the first_value,
     *  last_value, and nth_value window functions.
     * @return A new wrapped expression annotated with rolling window parameters.
     * @example rolling(d => mean(d.colA), [-3, 3])
     * @example rolling(d => last_value(d.colA), null, true)
     */
    function rolling(expr, frame, includePeers) {
      return wrap(expr, {
        window: {
          frame: frame || [-Infinity, 0],
          peers: !!includePeers
        }
      });
    }

    function func$2(expr) {
      const f = d => d;
      f.toString = () => expr;
      return f;
    }

    function getTable(catalog, ref) {
      ref = ref && isFunction(ref.query) ? ref.query() : ref;
      return ref && isFunction(ref.evaluate)
        ? ref.evaluate(null, catalog)
        : catalog(ref);
    }

    function isSelection(value) {
      return isObject(value) && (
        isArray(value.all) ||
        isArray(value.matches) ||
        isArray(value.not) ||
        isArray(value.range)
      );
    }

    function toObject$1(value) {
      return value && isFunction(value.toObject) ? value.toObject()
        : isFunction(value) ? { expr: String(value), func: true }
        : isArray(value) ? value.map(toObject$1)
        : isObject(value) ? map$1(value, _ => toObject$1(_))
        : value;
    }

    function fromObject(value) {
      return isArray(value) ? value.map(fromObject)
        : !isObject(value) ? value
        : isArray(value.verbs) ? Query$1.from(value)
        : isArray(value.all) ? all()
        : isArray(value.range) ? range(...value.range)
        : isArray(value.match) ? matches(RegExp(...value.match))
        : isArray(value.not) ? not(value.not.map(toObject$1))
        : fromExprObject(value);
    }

    function fromExprObject(value) {
      let output = value;
      let expr = value.expr;

      if (expr != null) {
        if (value.field === true) {
          output = expr = field(expr);
        } else if (value.func === true) {
          output = expr = func$2(expr);
        }

        if (isObject(value.window)) {
          const { frame, peers } = value.window;
          output = expr = rolling(expr, frame, peers);
        }

        if (value.desc === true) {
          output = desc(expr);
        }
      }

      return value === output
        ? map$1(value, _ => fromObject(_))
        : output;
    }

    function joinKeys(keys) {
      return isArray(keys) ? keys.map(parseJoinKeys)
        : keys;
    }

    function parseJoinKeys(keys) {
      const list = [];

      toArray(keys).forEach(param => {
        isNumber(param) ? list.push(param)
          : isString(param) ? list.push(field(param, null))
          : isObject(param) && param.expr ? list.push(param)
          : isFunction(param) ? list.push(param)
          : error(`Invalid key value: ${param+''}`);
      });

      return list;
    }

    function joinValues(values) {
      return isArray(values)
        ? values.map(parseJoinValues)
        : values;
    }

    function parseJoinValues(values, index) {
      return index < 2 ? toArray(values) : values;
    }

    function orderbyKeys(keys) {
      const list = [];

      keys.forEach(param => {
        const expr = param.expr != null ? param.expr : param;
        if (isObject(expr) && !isFunction(expr)) {
          for (const key in expr) {
            list.push(expr[key]);
          }
        } else {
          param = isNumber(expr) ? expr
            : isString(expr) ? field(param)
            : isFunction(expr) ? param
            : error(`Invalid orderby field: ${param+''}`);
          list.push(param);
        }
      });

      return list;
    }

    const Methods = {
      [Expr]: astExpr,
      [ExprList]: astExprList,
      [ExprNumber]: astExprNumber,
      [ExprObject]: astExprObject,
      [JoinKeys]: astJoinKeys,
      [JoinValues]: astJoinValues,
      [OrderbyKeys]: astExprList,
      [SelectionList]: astSelectionList
    };

    function toAST(value, type, propTypes) {
      return type === TableRef ? astTableRef(value)
        : type === TableRefList ? value.map(astTableRef)
        : ast(toObject$1(value), type, propTypes);
    }

    function ast(value, type, propTypes) {
      return type === Options
        ? (value ? astOptions(value, propTypes) : value)
        : Methods[type](value);
    }

    function astOptions(value, types = {}) {
      const output = {};
      for (const key in value) {
        const prop = value[key];
        output[key] = types[key] ? ast(prop, types[key]) : prop;
      }
      return output;
    }

    function astParse(expr, opt) {
      return parse$1({ expr }, { ...opt, ast: true }).exprs[0];
    }

    function astColumn(name) {
      return { type: Column$1, name };
    }

    function astColumnIndex(index) {
      return { type: Column$1, index };
    }

    function astExprObject(obj, opt) {
      if (isString(obj)) {
        return astParse(obj, opt);
      }

      if (obj.expr) {
        let ast;
        if (obj.field === true) {
          ast = astColumn(obj.expr);
        } else if (obj.func === true) {
          ast = astExprObject(obj.expr, opt);
        }
        if (ast) {
          if (obj.desc) {
            ast = { type: Descending, expr: ast };
          }
          if (obj.window) {
            ast = { type: Window, expr: ast, ...obj.window };
          }
          return ast;
        }
      }

      return Object.keys(obj)
        .map(key => ({
          ...astExprObject(obj[key], opt),
          as: key
        }));
    }

    function astSelection(sel) {
      const type = Selection;
      return sel.all ? { type, operator: 'all' }
        : sel.not ? { type, operator: 'not', arguments: astExprList(sel.not) }
        : sel.range ? { type, operator: 'range', arguments: astExprList(sel.range) }
        : sel.matches ? { type, operator: 'matches', arguments: sel.matches }
        : error('Invalid input');
    }

    function astSelectionList(arr) {
      return toArray(arr).map(astSelectionItem).flat();
    }

    function astSelectionItem(val) {
      return isSelection(val) ? astSelection(val)
        : isNumber(val) ? astColumnIndex(val)
        : isString(val) ? astColumn(val)
        : isObject(val) ? Object.keys(val)
          .map(name => ({ type: Column$1, name, as: val[name] }))
        : error('Invalid input');
    }

    function astExpr(val) {
      return isSelection(val) ? astSelection(val)
        : isNumber(val) ? astColumnIndex(val)
        : isString(val) ? astColumn(val)
        : isObject(val) ? astExprObject(val)
        : error('Invalid input');
    }

    function astExprList(arr) {
      return toArray(arr).map(astExpr).flat();
    }

    function astExprNumber(val) {
      return isNumber(val) ? val : astExprObject(val);
    }

    function astJoinKeys(val) {
      return isArray(val)
        ? val.map(astExprList)
        : astExprObject(val, { join: true });
    }

    function astJoinValues(val) {
      return isArray(val)
        ? val.map((v, i) => i < 2
            ? astExprList(v)
            : astExprObject(v, { join: true })
          )
        : astExprObject(val, { join: true });
    }

    function astTableRef(value) {
      return value && isFunction(value.toAST)
        ? value.toAST()
        : value;
    }

    /**
     * Model an Arquero verb as a serializable object.
     */
    class Verb$1 {

      /**
       * Construct a new verb instance.
       * @param {string} verb The verb name.
       * @param {object[]} schema Schema describing verb parameters.
       * @param {any[]} params Array of parameter values.
       */
      constructor(verb, schema = [], params = []) {
        this.verb = verb;
        this.schema = schema;
        schema.forEach((s, index) => {
          const type = s.type;
          const param = params[index];
          const value = type === JoinKeys ? joinKeys(param)
            : type === JoinValues ? joinValues(param)
            : type === OrderbyKeys ? orderbyKeys(param)
            : param;
          this[s.name] = value !== undefined ? value : s.default;
        });
      }

      /**
       * Create new verb instance from the given serialized object.
       * @param {object} object A serialized verb representation, such as
       *  those generated by Verb.toObject.
       * @returns {Verb} The instantiated verb.
       */
      static from(object) {
        const verb = Verbs[object.verb];
        const params = (verb.schema || [])
          .map(({ name }) => fromObject(object[name]));
        return verb(...params);
      }

      /**
       * Evaluate this verb against a given table and catalog.
       * @param {Table} table The Arquero table to process.
       * @param {Function} catalog A table lookup function that accepts a table
       *  name string as input and returns a corresponding Arquero table.
       * @returns {Table} The resulting Arquero table.
       */
      evaluate(table, catalog) {
        const params = this.schema.map(({ name, type }) => {
          const value = this[name];
          return type === TableRef ? getTable(catalog, value)
            : type === TableRefList ? value.map(t => getTable(catalog, t))
            : value;
        });
        return table[this.verb](...params);
      }

      /**
       * Serialize this verb as a JSON-compatible object. The resulting
       * object can be passed to Verb.from to re-instantiate this verb.
       * @returns {object} A JSON-compatible object representing this verb.
       */
      toObject() {
        const obj = { verb: this.verb };
        this.schema.forEach(({ name }) => {
          obj[name] = toObject$1(this[name]);
        });
        return obj;
      }

      /**
       * Serialize this verb to a JSON-compatible abstract syntax tree.
       * All table expressions will be parsed and represented as AST instances
       * using a modified form of the Mozilla JavaScript AST format.
       * This method can be used to output parsed and serialized representations
       * to translate Arquero verbs to alternative data processing platforms.
       * @returns {object} A JSON-compatible abstract syntax tree object.
       */
      toAST() {
        const obj = { type: Verb, verb: this.verb };
        this.schema.forEach(({ name, type, props }) => {
          obj[name] = toAST(this[name], type, props);
        });
        return obj;
      }
    }

    /**
     * Verb parameter type.
     * @typedef {Expr|ExprList|ExprNumber|ExprObject|JoinKeys|JoinValues|Options|OrderbyKeys|SelectionList|TableRef|TableRefList} ParamType
     */

    /**
     * Verb parameter schema.
     * @typedef {object} ParamDef
     * @property {string} name The name of the parameter.
     * @property {ParamType} type The type of the parameter.
     * @property {{ [key: string]: ParamType }} [props] Types for non-literal properties.
     */

    /**
     * Create a new constructors.
     * @param {string} name The name of the verb.
     * @param {ParamDef[]} schema The verb parameter schema.
     * @return {Function} A verb constructor function.
     */
    function createVerb(name, schema) {
      return Object.assign(
        (...params) => new Verb$1(name, schema, params),
        { schema }
      );
    }

    /**
     * A lookup table of verb classes.
     */
    const Verbs = {
      count:      createVerb('count', [
                    { name: 'options', type: Options }
                  ]),
      derive:     createVerb('derive', [
                    { name: 'values', type: ExprObject },
                    { name: 'options', type: Options,
                      props: { before: SelectionList, after: SelectionList }
                    }
                  ]),
      filter:     createVerb('filter', [
                    { name: 'criteria', type: ExprObject }
                  ]),
      groupby:    createVerb('groupby', [
                    { name: 'keys', type: ExprList }
                  ]),
      orderby:    createVerb('orderby', [
                    { name: 'keys', type: OrderbyKeys }
                  ]),
      relocate:   createVerb('relocate', [
                    { name: 'columns', type: SelectionList },
                    { name: 'options', type: Options,
                      props: { before: SelectionList, after: SelectionList }
                    }
                  ]),
      rename:     createVerb('rename', [
                    { name: 'columns', type: SelectionList }
                  ]),
      rollup:     createVerb('rollup', [
                    { name: 'values', type: ExprObject }
                  ]),
      sample:     createVerb('sample', [
                    { name: 'size', type: ExprNumber },
                    { name: 'options', type: Options, props: { weight: Expr } }
                  ]),
      select:     createVerb('select', [
                    { name: 'columns', type: SelectionList }
                  ]),
      ungroup:    createVerb('ungroup'),
      unorder:    createVerb('unorder'),
      reify:      createVerb('reify'),
      dedupe:     createVerb('dedupe', [
                    { name: 'keys', type: ExprList, default: [] }
                  ]),
      impute:     createVerb('impute', [
                    { name: 'values', type: ExprObject },
                    { name: 'options', type: Options, props: { expand: ExprList } }
                  ]),
      fold:       createVerb('fold', [
                    { name: 'values', type: ExprList },
                    { name: 'options', type: Options }
                  ]),
      pivot:      createVerb('pivot', [
                    { name: 'keys', type: ExprList },
                    { name: 'values', type: ExprList },
                    { name: 'options', type: Options }
                  ]),
      spread:     createVerb('spread', [
                    { name: 'values', type: ExprList },
                    { name: 'options', type: Options }
                  ]),
      unroll:     createVerb('unroll', [
                    { name: 'values', type: ExprList },
                    { name: 'options', type: Options, props: { drop: ExprList } }
                  ]),
      lookup:     createVerb('lookup', [
                    { name: 'table', type: TableRef },
                    { name: 'on', type: JoinKeys },
                    { name: 'values', type: ExprList }
                  ]),
      join:       createVerb('join', [
                    { name: 'table', type: TableRef },
                    { name: 'on', type: JoinKeys },
                    { name: 'values', type: JoinValues },
                    { name: 'options', type: Options }
                  ]),
      cross:      createVerb('cross', [
                    { name: 'table', type: TableRef },
                    { name: 'values', type: JoinValues },
                    { name: 'options', type: Options }
                  ]),
      semijoin:   createVerb('semijoin', [
                    { name: 'table', type: TableRef },
                    { name: 'on', type: JoinKeys }
                  ]),
      antijoin:   createVerb('antijoin', [
                    { name: 'table', type: TableRef },
                    { name: 'on', type: JoinKeys }
                  ]),
      concat:     createVerb('concat', [
                    { name: 'tables', type: TableRefList }
                  ]),
      union:      createVerb('union', [
                    { name: 'tables', type: TableRefList }
                  ]),
      intersect:  createVerb('intersect', [
                    { name: 'tables', type: TableRefList }
                  ]),
      except:     createVerb('except', [
                    { name: 'tables', type: TableRefList }
                  ])
    };

    /**
     * Create a new query instance. The query interface provides
     * a table-like verb API to construct a query that can be
     * serialized or evaluated against Arquero tables.
     * @param {string} [tableName] The name of the table to query. If
     *  provided, will be used as the default input table to pull from
     *  a provided catalog to run the query against.
     * @return {Query} A new builder instance.
     */
    function query(tableName) {
      return new Query$1(null, null, tableName);
    }

    /**
     * Create a new query instance from a serialized object.
     * @param {object} object A serialized query representation, such as
     *  those generated by query(...).toObject().
     * @returns {Query} The instantiated query instance.
     */
    function queryFrom(object) {
      return Query$1.from(object);
    }

    /**
     * Model a query as a collection of serializble verbs.
     * Provides a table-like interface for constructing queries.
     */
    class Query$1 extends Transformable {

      /**
       * Construct a new query instance.
       * @param {Verb[]} verbs An array of verb instances.
       * @param {object} [params] Optional query parameters, corresponding
       *  to parameter references in table expressions.
       * @param {string} [table] Optional name of the table to query.
       */
      constructor(verbs, params, table) {
        super(params);
        this._verbs = verbs || [];
        this._table = table;
      }

      /**
       * Create a new query instance from the given serialized object.
       * @param {QueryObject} object A serialized query representation, such as
       *  those generated by Query.toObject.
       * @returns {Query} The instantiated query.
       */
      static from({ verbs, table, params }) {
        return new Query$1(verbs.map(Verb$1.from), params, table);
      }

      /**
       * Provide an informative object string tag.
       */
      get [Symbol.toStringTag]() {
        if (!this._verbs) return 'Object'; // bail if called on prototype
        const ns = this._verbs.length;
        return `Query: ${ns} verbs` + (this._table ? ` on '${this._table}'` : '');
      }

      /**
       * Return the number of verbs in this query.
       */
      get length() {
        return this._verbs.length;
      }

      /**
       * Return the name of the table this query applies to.
       * @return {string} The name of the source table, or undefined.
       */
      get tableName() {
        return this._table;
      }

      /**
       * Get or set table expression parameter values.
       * If called with no arguments, returns the current parameter values
       * as an object. Otherwise, adds the provided parameters to this
       * query's parameter set and returns the table. Any prior parameters
       * with names matching the input parameters are overridden.
       * @param {object} values The parameter values.
       * @return {Query|object} The current parameter values (if called
       *  with no arguments) or this query.
       */
      params(values) {
        if (arguments.length) {
          this._params = { ...this._params, ...values };
          return this;
        } else {
          return this._params;
        }
      }

      /**
       * Evaluate this query against a given table and catalog.
       * @param {Table} table The Arquero table to process.
       * @param {Function} catalog A table lookup function that accepts a table
       *  name string as input and returns a corresponding Arquero table.
       * @returns {Table} The resulting Arquero table.
       */
      evaluate(table, catalog) {
        table = table || catalog(this._table);
        for (const verb of this._verbs) {
          table = verb.evaluate(table.params(this._params), catalog);
        }
        return table;
      }

      /**
       * Serialize this query as a JSON-compatible object. The resulting
       * object can be passed to Query.from to re-instantiate this query.
       * @returns {object} A JSON-compatible object representing this query.
       */
      toObject() {
        return serialize(this, 'toObject');
      }

      /**
       * Serialize this query as a JSON-compatible object. The resulting
       * object can be passed to Query.from to re-instantiate this query.
       * This method simply returns the result of toObject, but is provided
       * as a separate method to allow later customization of JSON export.
       * @returns {object} A JSON-compatible object representing this query.
       */
      toJSON() {
        return this.toObject();
      }

      /**
       * Serialize this query to a JSON-compatible abstract syntax tree.
       * All table expressions will be parsed and represented as AST instances
       * using a modified form of the Mozilla JavaScript AST format.
       * This method can be used to output parsed and serialized representations
       * to translate Arquero queries to alternative data processing platforms.
       * @returns {object} A JSON-compatible abstract syntax tree object.
       */
      toAST() {
        return serialize(this, 'toAST', { type: Query });
      }
    }

    /**
     * Serialized object representation of a query.
     * @typedef {object} QueryObject
     * @property {object[]} verbs An array of verb definitions.
     * @property {object} [params] An object of parameter values.
     * @property {string} [table] The name of the table to query.
     */

    function serialize(query, method, props) {
      return {
        ...props,
        verbs: query._verbs.map(verb => verb[method]()),
        ...(query._params ? { params: query._params } : null),
        ...(query._table ? { table: query._table } : null)
      };
    }

    function append$1(qb, verb) {
      return new Query$1(
        qb._verbs.concat(verb),
        qb._params,
        qb._table
      );
    }

    function addQueryVerb(name, verb) {
      Query$1.prototype[name] = function(...args) {
        return append$1(this, verb(...args));
      };
    }

    // Internal verb handlers
    for (const name in Verbs) {
      const verb = Verbs[name];
      Query$1.prototype['__' + name] = function(qb, ...args) {
        return append$1(qb, verb(...args));
      };
    }

    var name$1 = "arquero";
    var version$1 = "5.1.0";
    var description = "Query processing and transformation of array-backed data tables.";
    var keywords$2 = [
    	"data",
    	"query",
    	"database",
    	"table",
    	"dataframe",
    	"transform",
    	"arrays"
    ];
    var license = "BSD-3-Clause";
    var author = "Jeffrey Heer (http://idl.cs.washington.edu)";
    var main = "dist/arquero.node.js";
    var module = "src/index-node.js";
    var unpkg = "dist/arquero.min.js";
    var jsdelivr = "dist/arquero.min.js";
    var types$2 = "dist/types/index.d.ts";
    var browser = {
    	"./dist/arquero.node.js": "./dist/arquero.min.js",
    	"./src/index-node.js": "./src/index.js"
    };
    var repository = {
    	type: "git",
    	url: "https://github.com/uwdata/arquero.git"
    };
    var scripts = {
    	prebuild: "rimraf dist && mkdir dist",
    	build: "rollup -c",
    	postbuild: "tsc",
    	preperf: "yarn build",
    	perf: "TZ=America/Los_Angeles tape 'perf/**/*-perf.js'",
    	lint: "yarn eslint src test --ext .js",
    	test: "TZ=America/Los_Angeles tape 'test/**/*-test.js' --require esm",
    	prepublishOnly: "yarn test && yarn lint && yarn build"
    };
    var dependencies = {
    	acorn: "^8.8.0",
    	"apache-arrow": "^9.0.0",
    	"node-fetch": "^2.6.7"
    };
    var devDependencies = {
    	"@rollup/plugin-json": "^4.1.0",
    	"@rollup/plugin-node-resolve": "^13.3.0",
    	eslint: "^8.21.0",
    	esm: "^3.2.25",
    	rimraf: "^3.0.2",
    	rollup: "^2.77.3",
    	"rollup-plugin-bundle-size": "^1.0.3",
    	"rollup-plugin-terser": "^7.0.2",
    	tape: "^5.5.3",
    	typescript: "^4.7.4"
    };
    var esm = {
    	force: true,
    	mainFields: [
    		"module",
    		"main"
    	]
    };
    var pkg = {
    	name: name$1,
    	version: version$1,
    	description: description,
    	keywords: keywords$2,
    	license: license,
    	author: author,
    	main: main,
    	module: module,
    	unpkg: unpkg,
    	jsdelivr: jsdelivr,
    	types: types$2,
    	browser: browser,
    	repository: repository,
    	scripts: scripts,
    	dependencies: dependencies,
    	devDependencies: devDependencies,
    	esm: esm
    };

    /**
     * Create a new Arquero column that proxies access to an
     * Apache Arrow dictionary column.
     * @param {object} vector An Apache Arrow dictionary column.
     */
    function arrowDictionary(vector) {
      const { data, length, nullCount } = vector;
      const dictionary = data[data.length - 1].dictionary;
      const size = dictionary.length;
      const keys = dictKeys(data || [vector], length, nullCount, size);
      const values = Array(size);

      const value = k => k == null || k < 0 || k >= size ? null
        : values[k] !== undefined ? values[k]
        : (values[k] = dictionary.get(k));

      return {
        vector,
        length,

        get: row => value(keys[row]),

        key: row => keys[row],

        keyFor(value) {
          if (value === null) return nullCount ? size : -1;
          for (let i = 0; i < size; ++i) {
            if (values[i] === undefined) values[i] = dictionary.get(i);
            if (values[i] === value) return i;
          }
          return -1;
        },

        groups(names) {
          const s = size + (nullCount ? 1 : 0);
          return { keys, get: [value], names, rows: sequence(0, s), size: s };
        },

        [Symbol.iterator]() {
          return vector[Symbol.iterator]();
        }
      };
    }

    /**
     * Generate a dictionary key array
     * @param {object[]} chunks Arrow column chunks
     * @param {number} length The length of the Arrow column
     * @param {number} nulls The count of column null values
     * @param {number} size The backing dictionary size
     */
    function dictKeys(chunks, length, nulls, size) {
      const v = chunks.length > 1 || nulls
        ? flatten(chunks, length, chunks[0].type.indices)
        : chunks[0].values;
      return nulls ? nullKeys(chunks, v, size) : v;
    }

    /**
     * Flatten Arrow column chunks into a single array.
     */
    function flatten(chunks, length, type) {
      const array = new type.ArrayType(length);
      const n = chunks.length;
      for (let i = 0, idx = 0, len; i < n; ++i) {
        len = chunks[i].length;
        array.set(chunks[i].values.subarray(0, len), idx);
        idx += len;
      }
      return array;
    }

    /**
     * Encode null values as an additional dictionary key.
     * Returns a new key array with null values added.
     * TODO: safeguard against integer overflow?
     */
    function nullKeys(chunks, keys, key) {
      // iterate over null bitmaps, encode null values as key
      const n = chunks.length;
      for (let i = 0, idx = 0, m, base, bits, byte; i < n; ++i) {
        bits = chunks[i].nullBitmap;
        m = chunks[i].length >> 3;
        if (bits && bits.length) {
          for (let j = 0; j <= m; ++j) {
            if ((byte = bits[j]) !== 255) {
              base = idx + (j << 3);
              if ((byte & (1 << 0)) === 0) keys[base + 0] = key;
              if ((byte & (1 << 1)) === 0) keys[base + 1] = key;
              if ((byte & (1 << 2)) === 0) keys[base + 2] = key;
              if ((byte & (1 << 3)) === 0) keys[base + 3] = key;
              if ((byte & (1 << 4)) === 0) keys[base + 4] = key;
              if ((byte & (1 << 5)) === 0) keys[base + 5] = key;
              if ((byte & (1 << 6)) === 0) keys[base + 6] = key;
              if ((byte & (1 << 7)) === 0) keys[base + 7] = key;
            }
          }
        }
        idx += chunks[i].length;
      }
      return keys;
    }

    function unroll(args, code, ...lists) {
      const v = ['_', '$'];
      const a = v.slice(0, lists.length);
      a.push('"use strict"; const '
        + lists
            .map((l, j) => l.map((_, i) => `${v[j]}${i} = ${v[j]}[${i}]`).join(', '))
            .join(', ')
        + `; return (${args}) => ${code};`
      );
      return Function(...a)(...lists);
    }

    // Hardwire Arrow type ids to sidestep dependency
    // https://github.com/apache/arrow/blob/master/js/src/enum.ts

    const isDict = ({ typeId }) => typeId === -1;
    const isUtf8 = ({ typeId }) => typeId === 5;
    const isList = ({ typeId }) => typeId === 12;
    const isStruct = ({ typeId }) => typeId === 13;
    const isFixedSizeList = ({ typeId }) => typeId === 16;

    const isListType = type => isList(type) || isFixedSizeList(type);

    /**
     * Create an Arquero column that proxies access to an Arrow column.
     * @param {object} arrow An Apache Arrow column.
     * @return {import('../table/column').ColumnType} An Arquero-compatible column.
     */
    function arrowColumn(vector, nested) {
      const { type, length, numChildren } = vector;
      if (isDict(type)) return arrowDictionary(vector);

      const get = numChildren && nested ? getNested(vector)
        : numChildren ? memoize(getNested(vector))
        : isUtf8(type) ? memoize(row => vector.get(row))
        : null;

      return get
        ? { vector, length, get, [Symbol.iterator]: () => iterator(length, get) }
        : vector;
    }

    function memoize(get) {
      const values = [];
      return row => {
        const v = values[row];
        return v !== undefined ? v : (values[row] = get(row));
      };
    }

    function* iterator(n, get) {
      for (let i = 0; i < n; ++i) {
        yield get(i);
      }
    }

    const arrayFrom = vector => vector.numChildren
      ? repeat(vector.length, getNested(vector))
      : vector.nullCount ? [...vector]
      : vector.toArray();

    const getNested = vector => isListType(vector.type) ? getList$1(vector)
      : isStruct(vector.type) ? getStruct$1(vector)
      : error(`Unsupported Arrow type: ${toString(vector.VectorName)}`);

    const getList$1 = vector => vector.nullCount
      ? row => vector.isValid(row) ? arrayFrom(vector.get(row)) : null
      : row => arrayFrom(vector.get(row));

    function getStruct$1(vector) {
      const props = [];
      const code = [];
      vector.type.children.forEach((field, i) => {
        props.push(arrowColumn(vector.getChildAt(i), true));
        code.push(`${toString(field.name)}:_${i}.get(row)`);
      });
      const get = unroll('row', '({' + code + '})', props);

      return vector.nullCount
        ? row => vector.isValid(row) ? get(row) : null
        : get;
    }

    /**
     * Options for Apache Arrow import.
     * @typedef {object} ArrowOptions
     * @property {import('../table/transformable').Select} columns
     *  An ordered set of columns to import. The input may consist of column name
     *  strings, column integer indices, objects with current column names as keys
     *  and new column names as values (for renaming), or selection helper
     *  functions such as {@link all}, {@link not}, or {@link range}.
     */

    /**
     * Create a new table backed by an Apache Arrow table instance.
     * @param {object} arrow An Apache Arrow data table or byte buffer.
     * @param {ArrowOptions} options Options for Arrow import.
     * @return {ColumnTable} A new table containing the imported values.
     */
    function fromArrow(arrow, options = {}) {
      if (arrow && !arrow.batches) {
        arrow = fromIPC()(arrow);
      }

      // resolve column selection
      const fields = arrow.schema.fields.map(f => f.name);
      const sel = resolve({
        columnNames: test => test ? fields.filter(test) : fields.slice(),
        columnIndex: name => fields.indexOf(name)
      }, options.columns || all());

      // build Arquero columns for backing Arrow columns
      const cols = columnSet();
      sel.forEach((name, key) => {
        cols.add(name, arrowColumn(arrow.getChild(key)));
      });

      return new ColumnTable(cols.data, cols.names);
    }

    var identity$2 = x => x;

    const parseBoolean = [ // boolean
      v => (v === 'true') || (v === 'false'),
      v => v === 'false' ? false : true
    ];

    const parseNumber = [ // number
      v => v === 'NaN' || (v = +v) === v,
      v => +v
    ];

    const parseDate = [ // iso date
      isISODateString,
      v => new Date(Date.parse(v))
    ];

    function numberParser(options) {
      const { decimal } = options;
      return decimal && decimal !== '.'
        ? parseNumber.map(f => s => f(s && s.replace(decimal, '.')))
        : parseNumber;
    }

    function valueParser(values, options) {
      const types = [parseBoolean, numberParser(options), parseDate];
      const n = types.length;
      for (let i = 0; i < n; ++i) {
        const [test, parser] = types[i];
        if (check(values, test)) {
          return parser;
        }
      }
      return identity$2;
    }

    function check(values, test) {
      const n = values.length;
      for (let i = 0; i < n; ++i) {
        const v = values[i];
        if (v != null && !test(v)) {
          return false;
        }
      }
      return true;
    }

    function defaultNames(n, off = 0) {
      return repeat(n - off, i => `col${i + off + 1}`);
    }

    function fromTextRows(next, names, options) {
      let row = next();
      const n = row.length;
      const automax = +options.autoMax || 1000;
      const values = repeat(n, () => []);
      names = names
        ? names.length < n ? [...names, defaultNames(n, names.length)] : names
        : defaultNames(n);

      // read in initial rows to guess types
      let idx = 0;
      for (; idx < automax && row; ++idx, row = next()) {
        for (let i = 0; i < n; ++i) {
          values[i].push(row[i] === '' ? null : row[i]);
        }
      }

      // initialize parsers
      const parsers = getParsers(names, values, options);

      // apply parsers
      parsers.forEach((parse, i) => {
        if (parse === identity$2) return;
        const v = values[i];
        for (let r = 0; r < idx; ++r) {
          if (v[r] != null) v[r] = parse(v[r]);
        }
      });

      // parse remainder of file
      for (; row; row = next()) {
        for (let i = 0; i < n; ++i) {
          values[i].push(row[i] ? parsers[i](row[i]) : null);
        }
      }

      const columns = {};
      names.forEach((name, i) => columns[name] = values[i]);
      return new ColumnTable(columns, names);
    }

    function getParsers(names, values, options) {
      const { parse = {} } = options;
      const noParse = options.autoType === false;

      return names.map(
        (name, i) => isFunction(parse[name]) ? parse[name]
          : noParse ? identity$2
          : valueParser(values[i], options)
      );
    }

    const EOL = {};
    const EOF = {};
    const QUOTE = 34;
    const NEWLINE = 10;
    const RETURN = 13;

    function filter(read, skip, drop) {
      // skip initial lines, if requested
      let s = +skip || 0;
      while (--s >= 0) read();

      // return filtered stream
      return drop ? () => {
        let line;
        while (!line) {
          if (drop(line = read())) line = null;
          else return line;
        }
      } : read;
    }

    // Adapted from d3-dsv: https://github.com/d3/d3-dsv/blob/master/src/dsv.js
    // Copyright 2013-2016 Mike Bostock
    // All rights reserved.
    // Redistribution and use in source and binary forms, with or without modification,
    // are permitted provided that the following conditions are met:
    // * Redistributions of source code must retain the above copyright notice, this
    //   list of conditions and the following disclaimer.
    // * Redistributions in binary form must reproduce the above copyright notice,
    //   this list of conditions and the following disclaimer in the documentation
    //   and/or other materials provided with the distribution.
    // * Neither the name of the author nor the names of contributors may be used to
    //   endorse or promote products derived from this software without specific prior
    //   written permission.
    // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    // ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    // WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
    // ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    // (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    // LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
    // ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    // SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    function parseDelimited(text, { delimiter = ',', skip, comment }) {
      if (delimiter.length !== 1) {
        error(`Text "delimiter" should be a single character, found "${delimiter}"`);
      }
      const delimCode = delimiter.charCodeAt(0);

      let N = text.length;
      let I = 0; // current character index
      let t; // current token
      let eof = N <= 0; // current token followed by EOF?
      let eol = false; // current token followed by EOL?

      // Strip the trailing newline.
      if (text.charCodeAt(N - 1) === NEWLINE) --N;
      if (text.charCodeAt(N - 1) === RETURN) --N;

      function token() {
        if (eof) return EOF;
        if (eol) return eol = false, EOL;

        // Unescape quotes.
        const j = I;
        let i, c;
        if (text.charCodeAt(j) === QUOTE) {
          while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
          if ((i = I) >= N) eof = true;
          else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
          else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
          return text.slice(j + 1, i - 1).replace(/""/g, '"');
        }

        // Find next delimiter or newline.
        while (I < N) {
          if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
          else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
          else if (c !== delimCode) continue;
          return text.slice(j, i);
        }

        // Return last token before EOF.
        return eof = true, text.slice(j, N);
      }

      function next() {
        if ((t = token()) !== EOF) {
          const row = [];
          while (t !== EOL && t !== EOF) row.push(t), t = token();
          return row;
        }
      }

      return filter(
        next, skip,
        comment && (x => (x && x[0] || '').startsWith(comment))
      );
    }

    /**
     * Options for CSV parsing.
     * @typedef {object} CSVParseOptions
     * @property {string} [delimiter=','] Single-character delimiter between values.
     * @property {string} [decimal='.'] Single-character numeric decimal separator.
     * @property {boolean} [header=true] Flag to specify presence of header row.
     *  If true, assumes the CSV contains a header row with column names. If false,
     *  indicates the CSV does not contain a header row; columns are given the
     *  names 'col1', 'col2', etc unless the *names* option is specified.
     * @property {string[]} [names] An array of column names to use for header-less
     *  CSV files. This option is ignored if the header option is true.
     * @property {number} [skip=0] The number of lines to skip before reading data.
     * @property {string} [comment] A string used to identify comment lines. Any
     *  lines that start with the comment pattern are skipped.
     * @property {boolean} [autoType=true] Flag for automatic type inference.
     * @property {number} [autoMax=1000] Maximum number of initial values to use
     *  for type inference.
     * @property {Object.<string, (value: string) => any>} [parse] Object of
     *  column parsing options. The object keys should be column names. The object
     *  values should be parsing functions that transform values upon input.
     */

    /**
     * Parse a comma-separated values (CSV) string into a table. Other
     * delimiters, such as tabs or pipes ('|'), can be specified using
     * the options argument. By default, automatic type inference is performed
     * for input values; string values that match the ISO standard
     * date format are parsed into JavaScript Date objects. To disable this
     * behavior, set the autoType option to false. To perform custom parsing
     * of input column values, use the parse option.
     * @param {string} text A string in a delimited-value format.
     * @param {CSVParseOptions} options The formatting options.
     * @return {ColumnTable} A new table containing the parsed values.
     */
    function fromCSV(text, options = {}) {
      const next = parseDelimited(text, options);
      return fromTextRows(
        next,
        options.header !== false ? next() : options.names,
        options
      );
    }

    function parseLines(text, { skip, comment }) {
      let N = text.length;
      let I = 0; // current character index

      // Strip the trailing newline.
      if (text.charCodeAt(N - 1) === NEWLINE) --N;
      if (text.charCodeAt(N - 1) === RETURN) --N;

      function read() {
        if (I >= N) return;

        const j = I;
        let eol = false;
        let i, c;

        // Find next newline.
        while (I < N) {
          if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
          else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
          if (eol) return text.slice(j, i);
        }

        // Return last line before EOF.
        return text.slice(j, N);
      }

      return filter(
        read, skip,
        comment && (x => (x || '').startsWith(comment))
      );
    }

    /**
     * Options for fixed width file parsing.
     * @typedef {object} FixedParseOptions
     * @property {[number, number][]} [positions] Array of start, end indices for
     *  fixed-width columns.
     * @property {number[]} [widths] Array of fixed column widths. This option is
     *  ignored if the positions property is specified.
     * @property {string[]} [names] An array of column names. The array length
     *  should match the length of the positions array. If not specified or
     *  shorter than the positions array, default column names are generated.
     * @property {string} [decimal='.'] Single-character numeric decimal separator.
     * @property {number} [skip=0] The number of lines to skip before reading data.
     * @property {string} [comment] A string used to identify comment lines. Any
     *  lines that start with the comment pattern are skipped.
     * @property {boolean} [autoType=true] Flag for automatic type inference.
     * @property {number} [autoMax=1000] Maximum number of initial values to use
     *  for type inference.
     * @property {Object.<string, (value: string) => any>} [parse] Object of
     *  column parsing options. The object keys should be column names. The object
     *  values should be parsing functions that transform values upon input.
     */

    /**
     * Parse a fixed-width file (FWF) string into a table. By default, automatic
     * type inference is performed for input values; string values that match the
     * ISO standard date format are parsed into JavaScript Date objects. To
     * disable this behavior, set the autoType option to false. To perform custom
     * parsing of input column values, use the parse option.
     * @param {string} text A string in a fixed-width file format.
     * @param {FixedParseOptions} options The formatting options.
     * @return {ColumnTable} A new table containing the parsed values.
     */
    function fromFixed(text, options = {}) {
      const read = parseLines(text, options);
      const p = positions(options);
      return fromTextRows(
        () => {
          const line = read();
          if (line) {
            return p.map(([i, j]) => line.slice(i, j).trim());
          }
        },
        options.names,
        options
      );
    }

    function positions({ positions, widths }) {
      if (!positions && !widths) {
        error('Fixed width files require a "positions" or "widths" option');
      }
      let i = 0;
      return positions || widths.map(w => [i, i += w]);
    }

    function isDigitString(value) {
      const n = value.length;
      for (let i = 0; i < n; ++i) {
        const c = value.charCodeAt(i);
        if (c < 48 || c > 57) return false;
      }
      return true;
    }

    /**
     * Options for JSON parsing.
     * @typedef {object} JSONParseOptions
     * @property {boolean} [autoType=true] Flag controlling automatic type
     *  inference. If false, date parsing for input JSON strings is disabled.
     * @property {Object.<string, (value: any) => any>} [parse] Object of column
     *  parsing options. The object keys should be column names. The object values
     *  should be parsing functions that transform values upon input.
     */

    /**
     * Parse JavaScript Object Notation (JSON) data into a table.
     * The expected JSON data format is an object with column names for keys
     * and column value arrays for values. By default string values that match
     * the ISO standard date format are parsed into JavaScript Date objects.
     * To disable this behavior, set the autoType option to false. To perform
     * custom parsing of input column values, use the parse option. Auto-type
     * parsing is not performed for columns with custom parse options.
     * The data payload can also be provided as the "data" property of an
     * enclosing object, with an optional "schema" property containing table
     * metadata such as a "fields" array of ordered column information.
     * @param {string|object} data A string in JSON format, or pre-parsed object.
     * @param {JSONParseOptions} options The formatting options.
     * @return {ColumnTable} A new table containing the parsed values.
     */
    function fromJSON(json, options = {}) {
      const autoType = defaultTrue(options.autoType);

      // parse string input
      if (isString(json)) {
        json = JSON.parse(json);
      }

      // separate schema and data, as needed
      let data = json.data, names;
      if (isObject(data) && !isArrayType(data)) {
        if (json.schema && json.schema.fields) {
          names = json.schema.fields.map(f => f.name);
        }
      } else {
        data = json;
      }

      // parse values as necessary
      if (autoType || options.parse) {
        const parsers = options.parse || {};
        for (const name in data) {
          const col = data[name];
          const len = col.length;
          if (parsers[name]) {
            // apply custom parser
            for (let i = 0; i < len; ++i) {
              col[i] = parsers[name](col[i]);
            }
          } else if (autoType) {
            // apply autoType parser
            for (let i = 0; i < len; ++i) {
              const val = col[i];
              if (isString(val) && isISODateString(val) && !isDigitString(val)) {
                col[i] = new Date(val);
              }
            }
          }
        }
      }

      return new ColumnTable(data, names);
    }

    function __dedupe(table, keys = []) {
      return table
        .groupby(keys.length ? keys : table.columnNames())
        .filter('row_number() === 1')
        .ungroup()
        .reify();
    }

    function _select(table, columns) {
      const cols = columnSet();

      columns.forEach((value, curr) => {
        const next = isString(value) ? value : curr;
        if (next) {
          const col = table.column(curr) || error(`Unrecognized column: ${curr}`);
          cols.add(next, col);
        }
      });

      return table.create(cols);
    }

    function __relocate(table, columns, { before, after } = {}) {
      const bef = before != null;
      const aft = after != null;

      if (!(bef || aft)) {
        error('relocate requires a before or after option.');
      }
      if (bef && aft) {
        error('relocate accepts only one of the before or after options.');
      }

      columns = resolve(table, columns);
      const anchors = [...resolve(table, bef ? before : after).keys()];
      const anchor = bef ? anchors[0] : anchors.pop();
      const select = new Map();

      // marshal inputs to select in desired order
      table.columnNames().forEach(name => {
        // check if we should assign the current column
        const assign = !columns.has(name);

        // at anchor column, insert relocated columns
        if (name === anchor) {
          if (aft && assign) select.set(name, name);
          for (const [key, value] of columns) {
            select.set(key, value);
          }
          if (aft) return; // exit if current column has been handled
        }

        if (assign) select.set(name, name);
      });

      return _select(table, select);
    }

    function concat(list, fn = (x => x), delim = '') {
      const n = list.length;
      if (!n) return '';

      let s = fn(list[0], 0);
      for (let i = 1; i < n; ++i) {
        s += delim + fn(list[i], i);
      }

      return s;
    }

    function ascending$1(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function min(values, start = 0, stop = values.length) {
      let min = stop ? values[start++] : NULL;

      for (let i = start; i < stop; ++i) {
        if (min > values[i]) {
          min = values[i];
        }
      }

      return min;
    }

    function max$1(values, start = 0, stop = values.length) {
      let max = stop ? values[start++] : NULL;

      for (let i = start; i < stop; ++i) {
        if (max < values[i]) {
          max = values[i];
        }
      }

      return max;
    }

    function toNumeric(value) {
      return isBigInt(value) ? value : +value;
    }

    function quantile(values, p) {
      const n = values.length;

      if (!n) return NULL;
      if ((p = +p) <= 0 || n < 2) return toNumeric(values[0]);
      if (p >= 1) return toNumeric(values[n - 1]);

      const i = (n - 1) * p;
      const i0 = Math.floor(i);
      const v0 = toNumeric(values[i0]);
      return isBigInt(v0)
        ? v0
        : v0 + (toNumeric(values[i0 + 1]) - v0) * (i - i0);
    }

    class ValueList {
      constructor(values) {
        this._values = values || [];
        this._sorted = null;
        this._start = 0;
      }

      values(copy) {
        if (this._start) {
          this._values = this._values.slice(this._start);
          this._start = 0;
        }
        return copy
          ? this._values.slice()
          : this._values;
      }

      add(value) {
        this._values.push(value);
        this._sorted = null;
      }

      rem() {
        this._start += 1;
        this._sorted = null;
      }

      min() {
        return this._sorted && this._sorted.length
          ? this._sorted[0]
          : min(this._values, this._start);
      }

      max() {
        return this._sorted && this._sorted.length
          ? this._sorted[this._sorted.length - 1]
          : max$1(this._values, this._start);
      }

      quantile(p) {
        if (!this._sorted) {
          this._sorted = this.values(true);
          this._sorted.sort(ascending$1);
        }
        return quantile(this._sorted, p);
      }
    }

    const update$1 = (ops, args, fn) => unroll(
      args,
      '{' + concat(ops, (_, i) => `_${i}.${fn}(${args});`) + '}',
      ops
    );

    function fieldReducer(oplist, stream) {
      const { ops, output } = expand(oplist, stream);
      const fields = oplist[0].fields;
      const n = fields.length;
      const cls = n === 0 ? FieldReducer
        : n === 1 ? Field1Reducer
        : n === 2 ? Field2Reducer
        : error('Unsupported field count: ' + n);
      return new cls(fields, ops, output, stream);
    }

    function expand(oplist, stream) {
      const has = {};
      const ops = [];

      function add(name, params = []) {
        // check key
        const key = name + ':' + params;
        if (has[key]) return has[key];

        // get op instance
        const def = getAggregate(name);
        const op = def.create(...params);

        // add required dependencies
        if (stream < 0 && def.stream) {
          def.stream.forEach(name => add(name, []));
        }
        if (def.req) {
          def.req.forEach(name => add(name, []));
        }

        // update state
        has[key] = op;
        ops.push(op);

        return op;
      }

      const output = oplist.map(item => {
        const op = add(item.name, item.params);
        op.output = item.id;
        return op;
      });

      return { ops, output };
    }

    class FieldReducer extends Reducer {
      constructor(fields, ops, outputs, stream) {
        super(outputs);
        this._op = ops;
        this._fields = fields;
        this._stream = !!stream;
      }

      init() {
        const state = { count: 0, valid: 0, stream: this._stream };
        this._op.forEach(op => op.init(state));

        // value list requested
        if (state.values) {
          state.list = new ValueList();
        }

        return state;
      }

      write(state, values, index) {
        const op = this._outputs;
        const n = op.length;
        for (let i = 0; i < n; ++i) {
          values[op[i].output][index] = op[i].value(state);
        }
        return 1;
      }

      _add() {
      }

      _rem() {
      }

      add(state) {
        ++state.count;
      }

      rem(state) {
        --state.count;
      }
    }

    class Field1Reducer extends FieldReducer {
      constructor(fields, ops, outputs, stream) {
        super(fields, ops, outputs, stream);

        // unroll op invocations for performance
        const args = ['state', 'v1', 'v2'];
        this._add = update$1(ops, args, 'add');
        this._rem = update$1(ops, args, 'rem');
      }

      add(state, row, data) {
        const value = this._fields[0](row, data);
        ++state.count;
        if (isValid(value)) {
          ++state.valid;
          if (state.list) state.list.add(value);
          this._add(state, value);
        }
      }

      rem(state, row, data) {
        const value = this._fields[0](row, data);
        --state.count;
        if (isValid(value)) {
          --state.valid;
          if (state.list) state.list.rem();
          this._rem(state, value);
        }
      }
    }

    class Field2Reducer extends FieldReducer {
      constructor(fields, ops, outputs, stream) {
        super(fields, ops, outputs, stream);

        // unroll op invocations for performance
        const args = ['state', 'v1', 'v2'];
        this._add = update$1(ops, args, 'add');
        this._rem = update$1(ops, args, 'rem');
      }

      add(state, row, data) {
        const value1 = this._fields[0](row, data);
        const value2 = this._fields[1](row, data);
        ++state.count;
        if (isValid(value1) && isValid(value2)) {
          ++state.valid;
          if (state.list) state.list.add([value1, value2]);
          this._add(state, value1, value2);
        }
      }

      rem(state, row, data) {
        const value1 = this._fields[0](row, data);
        const value2 = this._fields[1](row, data);
        --state.count;
        if (isValid(value1) && isValid(value2)) {
          --state.valid;
          if (state.list) state.list.rem();
          this._rem(state, value1, value2);
        }
      }
    }

    function aggregateGet(table, ops, get) {
      if (ops.length) {
        const data = table.data();
        const { keys } = table.groups() || {};
        const result = aggregate(table, ops);
        const op = keys
          ? (name, row) => result[name][keys[row]]
          : name => result[name][0];
        get = get.map(f => row => f(row, data, op));
      }

      return get;
    }

    function aggregate(table, ops, result) {
      if (!ops.length) return result; // early exit

      // instantiate aggregators and result store
      const aggrs = reducers(ops);
      const groups = table.groups();
      const size = groups ? groups.size : 1;
      result = result || repeat(ops.length, () => Array(size));

      // compute aggregates, extract results
      if (size > 1) {
        aggrs.forEach(aggr => {
          const cells = reduceGroups(table, aggr, groups);
          for (let i = 0; i < size; ++i) {
            aggr.write(cells[i], result, i);
          }
        });
      } else {
        aggrs.forEach(aggr => {
          const cell = reduceFlat(table, aggr);
          aggr.write(cell, result, 0);
        });
      }

      return result;
    }

    function reducers(ops, stream) {
      const aggrs = [];
      const fields = {};

      // group operators by field inputs
      for (const op of ops) {
        const key = op.fields.map(f => f + '').join(',');
        (fields[key] || (fields[key] = [])).push(op);
      }

      // generate a field reducer for each field
      for (const key in fields) {
        aggrs.push(fieldReducer(fields[key], stream));
      }

      return aggrs;
    }

    function reduceFlat(table, reducer) {
      // initialize aggregation cell
      const cell = reducer.init();

      // compute aggregate values
      // inline the following for performance:
      // table.scan((row, data) => reducer.add(cell, row, data));
      const n = table.totalRows();
      const data = table.data();
      const bits = table.mask();

      if (table.isOrdered()) {
        const idx = table.indices();
        for (let i = 0; i < n; ++i) {
          reducer.add(cell, idx[i], data);
        }
      } else if (bits) {
        for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {
          reducer.add(cell, i, data);
        }
      } else {
        for (let i = 0; i < n; ++i) {
          reducer.add(cell, i, data);
        }
      }

      return cell;
    }

    function reduceGroups(table, reducer, groups) {
      const { keys, size } = groups;

      // initialize aggregation cells
      const cells = repeat(size, () => reducer.init());

      // compute aggregate values
      // inline the following for performance:
      // table.scan((row, data) => reducer.add(cells[keys[row]], row, data));
      const data = table.data();

      if (table.isOrdered()) {
        const idx = table.indices();
        const m = idx.length;
        for (let i = 0; i < m; ++i) {
          const row = idx[i];
          reducer.add(cells[keys[row]], row, data);
        }
      } else if (table.isFiltered()) {
        const bits = table.mask();
        for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {
          reducer.add(cells[keys[i]], i, data);
        }
      } else {
        const n = table.totalRows();
        for (let i = 0; i < n; ++i) {
          reducer.add(cells[keys[i]], i, data);
        }
      }

      return cells;
    }

    function groupOutput(cols, groups) {
      const { get, names, rows, size } = groups;

      // write group values to output columns
      const m = names.length;
      for (let j = 0; j < m; ++j) {
        const col = cols.add(names[j], Array(size));
        const val = get[j];
        for (let i = 0; i < size; ++i) {
          col[i] = val(rows[i]);
        }
      }
    }

    function bisector$1(compare) {
      return {
        left(a, x, lo, hi) {
          if (lo == null) lo = 0;
          if (hi == null) hi = a.length;
          while (lo < hi) {
            const mid = lo + hi >>> 1;
            if (compare(a[mid], x) < 0) lo = mid + 1;
            else hi = mid;
          }
          return lo;
        },
        right(a, x, lo, hi) {
          if (lo == null) lo = 0;
          if (hi == null) hi = a.length;
          while (lo < hi) {
            const mid = lo + hi >>> 1;
            if (compare(a[mid], x) > 0) hi = mid;
            else lo = mid + 1;
          }
          return lo;
        }
      };
    }

    const bisect = bisector$1(ascending$1);

    function windowState(data, frame, adjust, ops, aggrs) {
      let rows, peer, cells, result, key;
      const isPeer = index => peer[index - 1] === peer[index];
      const numOps = ops.length;
      const numAgg = aggrs.length;

      const evaluate = ops.length
        ? unroll(
            ['w', 'r', 'k'],
            '{' + concat(ops, (_, i) => `r[_${i}.id][k]=_${i}.value(w,_${i}.get);`) + '}',
            ops
          )
        : () => {};

      const w = {
        i0: 0,
        i1: 0,
        index: 0,
        size: 0,
        peer: isPeer,

        init(partition, peers, results, group) {
          w.index = w.i0 = w.i1 = 0;
          w.size = peers.length;
          rows = partition;
          peer = peers;
          result = results;
          key = group;

          // initialize aggregates
          cells = aggrs ? aggrs.map(aggr => aggr.init()) : null;

          // initialize window ops
          for (let i = 0; i < numOps; ++i) {
            ops[i].init();
          }

          return w;
        },

        value(index, get) {
          return get(rows[index], data);
        },

        step(idx) {
          const [f0, f1] = frame;
          const n = w.size;
          const p0 = w.i0;
          const p1 = w.i1;

          w.i0 = f0 != null ? Math.max(0, idx - Math.abs(f0)) : 0;
          w.i1 = f1 != null ? Math.min(n, idx + Math.abs(f1) + 1) : n;
          w.index = idx;

          if (adjust) {
            if (w.i0 > 0 && isPeer(w.i0)) {
              w.i0 = bisect.left(peer, peer[w.i0]);
            }
            if (w.i1 < n && isPeer(w.i1)) {
              w.i1 = bisect.right(peer, peer[w.i1 - 1]);
            }
          }

          // evaluate aggregates
          for (let i = 0; i < numAgg; ++i) {
            const aggr = aggrs[i];
            const cell = cells[i];
            for (let j = p0; j < w.i0; ++j) {
              aggr.rem(cell, rows[j], data);
            }
            for (let j = p1; j < w.i1; ++j) {
              aggr.add(cell, rows[j], data);
            }
            aggr.write(cell, result, key);
          }

          // evaluate window ops
          evaluate(w, result, key);

          return result;
        }
      };

      return w;
    }

    const frameValue = op =>
      (op.frame || [null, null]).map(v => Number.isFinite(v) ? Math.abs(v) : null);

    const peersValue = op => !!op.peers;

    function windowOp(spec) {
      const { id, name, fields = [], params = [] } = spec;
      const op = getWindow(name).create(...params);
      if (fields.length) op.get = fields[0];
      op.id = id;
      return op;
    }

    function window$1(table, cols, exprs, result = {}, ops) {
      // instantiate window states
      const data = table.data();
      const states = windowStates(ops, data);
      const nstate = states.length;

      const write = unroll(
        ['r', 'd', 'op'],
        '{' + concat(cols, (_, i) => `_${i}[r] = $${i}(r, d, op);`) + '}',
        cols, exprs
      );

      // scan each ordered partition
      table.partitions().forEach((rows, key) => {
        const size = rows.length;
        const peers = windowPeers(table, rows);

        // initialize window states
        for (let i = 0; i < nstate; ++i) {
          states[i].init(rows, peers, result, key);
        }

        // calculate window values per-row
        const op = id => result[id][key];
        for (let index = 0; index < size; ++index) {
          // advance window frame, updates result object
          for (let i = 0; i < nstate; ++i) {
            states[i].step(index);
          }
          write(rows[index], data, op);
        }
      });
    }

    function windowStates(ops, data) {
      const map = {};

      // group operations by window frame parameters
      ops.forEach(op => {
        const frame = frameValue(op);
        const peers = peersValue(op);
        const key = `${frame},${peers}`;
        const { aggOps, winOps } = map[key] || (map[key] = {
          frame,
          peers,
          aggOps: [],
          winOps: []
        });
        hasAggregate(op.name)
          ? aggOps.push(op)
          : winOps.push(windowOp(op));
      });

      return Object.values(map).map(_ => windowState(
        data, _.frame, _.peers, _.winOps,
        reducers(_.aggOps, _.frame[0] != null ? -1 : 1)
      ));
    }

    function windowPeers(table, rows) {
      if (table.isOrdered()) {
        // generate peer ids for sort equality checking
        const compare = table.comparator();
        const data = table.data();
        const nrows = rows.length;
        const peers = new Uint32Array(nrows);
        for (let i = 1, index = 0; i < nrows; ++i) {
          peers[i] = compare(rows[i - 1], rows[i], data) ? ++index : index;
        }
        return peers;
      } else {
        // no sort, no peers: reuse row indices as peer ids
        return rows;
      }
    }

    function isWindowed(op) {
      return hasWindow(op.name) ||
        op.frame && (
          Number.isFinite(op.frame[0]) ||
          Number.isFinite(op.frame[1])
        );
    }

    function _derive(table, { names, exprs, ops }, options = {}) {
      // instantiate output data
      const total = table.totalRows();
      const cols = columnSet(options.drop ? null : table);
      const data = names.map(name => cols.add(name, Array(total)));

      // analyze operations, compute non-windowed aggregates
      const [ aggOps, winOps ] = segmentOps(ops);

      const size = table.isGrouped() ? table.groups().size : 1;
      const result = aggregate(
        table, aggOps,
        repeat(ops.length, () => Array(size))
      );

      // perform table scans to generate output values
      winOps.length
        ? window$1(table, data, exprs, result, winOps)
        : output(table, data, exprs, result);

      return table.create(cols);
    }

    function segmentOps(ops) {
      const aggOps = [];
      const winOps = [];
      const n = ops.length;

      for (let i = 0; i < n; ++i) {
        const op = ops[i];
        op.id = i;
        (isWindowed(op) ? winOps : aggOps).push(op);
      }

      return [aggOps, winOps];
    }

    function output(table, cols, exprs, result) {
      const bits = table.mask();
      const data = table.data();
      const { keys } = table.groups() || {};
      const op = keys
        ? (id, row) => result[id][keys[row]]
        : id => result[id][0];

      const m = cols.length;
      for (let j = 0; j < m; ++j) {
        const get = exprs[j];
        const col = cols[j];

        // inline the following for performance:
        // table.scan((i, data) => col[i] = get(i, data, op));
        if (bits) {
          for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {
            col[i] = get(i, data, op);
          }
        } else {
          const n = table.totalRows();
          for (let i = 0; i < n; ++i) {
            col[i] = get(i, data, op);
          }
        }
      }
    }

    function __derive(table, values, options = {}) {
      const dt = _derive(table, parse$1(values, { table }), options);

      return options.drop || (options.before == null && options.after == null)
        ? dt
        : __relocate(dt,
            Object.keys(values).filter(name => !table.column(name)),
            options
          );
    }

    function __except(table, others) {
      if (others.length === 0) return table;
      const names = table.columnNames();
      return others.reduce((a, b) => a.antijoin(b.select(names)), table).dedupe();
    }

    const ONE = 0x80000000;
    const ALL = 0xFFFFFFFF;

    /**
     * Represent an indexable set of bits.
     */
    class BitSet {
      /**
       * Instantiate a new BitSet instance.
       * @param {number} size The number of bits.
       */
      constructor(size) {
        this._size = size;
        this._bits = new Uint32Array(Math.ceil(size / 32));
      }

      /**
       * The number of bits.
       * @return {number}
       */
      get length() {
        return this._size;
      }

      /**
       * The number of bits set to one.
       * https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan
       * @return {number}
       */
      count() {
        const n = this._bits.length;
        let count = 0;
        for (let i = 0; i < n; ++i) {
          for (let b = this._bits[i]; b; ++count) {
            b &= b - 1;
          }
        }
        return count;
      }

      /**
       * Get the bit at a given index.
       * @param {number} i The bit index.
       */
      get(i) {
        return this._bits[i >> 5] & (ONE >>> i);
      }

      /**
       * Set the bit at a given index to one.
       * @param {number} i The bit index.
       */
      set(i) {
        this._bits[i >> 5] |= (ONE >>> i);
      }

      /**
       * Clear the bit at a given index to zero.
       * @param {number} i The bit index.
       */
      clear(i) {
        this._bits[i >> 5] &= ~(ONE >>> i);
      }

      /**
       * Scan the bits, invoking a callback function with the index of
       * each non-zero bit.
       * @param {(i: number) => void} fn A callback function.
       */
      scan(fn) {
        for (let i = this.next(0); i >= 0; i = this.next(i + 1)) {
          fn(i);
        }
      }

      /**
       * Get the next non-zero bit starting from a given index.
       * @param {number} i The bit index.
       */
      next(i) {
        const bits = this._bits;
        const n = bits.length;

        let index = i >> 5;
        let curr = bits[index] & (ALL >>> i);

        for (; index < n; curr = bits[++index]) {
          if (curr !== 0) {
            return (index << 5) + Math.clz32(curr);
          }
        }

        return -1;
      }

      /**
       * Return the index of the nth non-zero bit.
       * @param {number} n The number of non-zero bits to advance.
       * @return {number} The index of the nth non-zero bit.
       */
      nth(n) {
        let i = this.next(0);
        while (n-- && i >= 0) i = this.next(i + 1);
        return i;
      }

      /**
       * Negate all bits in this bitset.
       * Modifies this BitSet in place.
       * @return {this}
       */
      not() {
        const bits = this._bits;
        const n = bits.length;

        // invert all bits
        for (let i = 0; i < n; ++i) {
          bits[i] = ~bits[i];
        }

        // unset extraneous trailing bits
        const tail = this._size % 32;
        if (tail) {
          bits[n - 1] &= ONE >> (tail - 1);
        }

        return this;
      }

      /**
       * Compute the logical AND of this BitSet and another.
       * @param {BitSet} bitset The BitSet to combine with.
       * @return {BitSet} This BitSet updated with the logical AND.
       */
      and(bitset) {
        if (bitset) {
          const a = this._bits;
          const b = bitset._bits;
          const n = a.length;

          for (let i = 0; i < n; ++i) {
            a[i] &= b[i];
          }
        }
        return this;
      }

      /**
       * Compute the logical OR of this BitSet and another.
       * @param {BitSet} bitset The BitSet to combine with.
       * @return {BitSet} This BitSet updated with the logical OR.
       */
      or(bitset) {
        if (bitset) {
          const a = this._bits;
          const b = bitset._bits;
          const n = a.length;

          for (let i = 0; i < n; ++i) {
            a[i] |= b[i];
          }
        }
        return this;
      }
    }

    function _filter(table, predicate) {
      const n = table.totalRows();
      const bits = table.mask();
      const data = table.data();
      const filter = new BitSet(n);

      // inline the following for performance:
      // table.scan((row, data) => { if (predicate(row, data)) filter.set(row); });
      if (bits) {
        for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {
          if (predicate(i, data)) filter.set(i);
        }
      } else {
        for (let i = 0; i < n; ++i) {
          if (predicate(i, data)) filter.set(i);
        }
      }

      return table.create({ filter });
    }

    function __filter(table, criteria) {
      const test = parse$1({ p: criteria }, { table });
      let predicate = test.exprs[0];
      if (test.ops.length) {
        const { data } = _derive(table, test, { drop: true }).column('p');
        predicate = row => data[row];
      }
      return _filter(table, predicate);
    }

    function _unroll(table, { names = [], exprs = [], ops = [] }, options = {}) {
      if (!names.length) return table;

      const limit = options.limit > 0 ? +options.limit : Infinity;
      const index = options.index
        ? options.index === true ? 'index' : options.index + ''
        : null;
      const drop = new Set(options.drop);
      const get = aggregateGet(table, ops, exprs);

      // initialize output columns
      const cols = columnSet();
      const nset = new Set(names);
      const priors = [];
      const copies = [];
      const unroll = [];

      // original and copied columns
      table.columnNames().forEach(name => {
        if (!drop.has(name)) {
          const col = cols.add(name, []);
          if (!nset.has(name)) {
            priors.push(table.column(name));
            copies.push(col);
          }
        }
      });

      // unrolled output columns
      names.forEach(name => {
        if (!drop.has(name)) {
          if (!cols.has(name)) cols.add(name, []);
          unroll.push(cols.data[name]);
        }
      });

      // index column, if requested
      const icol = index ? cols.add(index, []) : null;

      let start = 0;
      const m = priors.length;
      const n = unroll.length;

      const copy = (row, maxlen) => {
        for (let i = 0; i < m; ++i) {
          copies[i].length = start + maxlen;
          copies[i].fill(priors[i].get(row), start, start + maxlen);
        }
      };

      const indices = icol
        ? (row, maxlen) => {
            for (let i = 0; i < maxlen; ++i) {
              icol[row + i] = i;
            }
          }
        : () => {};

      if (n === 1) {
        // optimize common case of one array-valued column
        const fn = get[0];
        const col = unroll[0];

        table.scan((row, data) => {
          // extract array data
          const array = toArray(fn(row, data));
          const maxlen = Math.min(array.length, limit);

          // copy original table data
          copy(row, maxlen);

          // copy unrolled array data
          for (let j = 0; j < maxlen; ++j) {
            col[start + j] = array[j];
          }

          // fill in array indices
          indices(start, maxlen);

          start += maxlen;
        });
      } else {
        table.scan((row, data) => {
          let maxlen = 0;

          // extract parallel array data
          const arrays = get.map(fn => {
            const value = toArray(fn(row, data));
            maxlen = Math.min(Math.max(maxlen, value.length), limit);
            return value;
          });

          // copy original table data
          copy(row, maxlen);

          // copy unrolled array data
          for (let i = 0; i < n; ++i) {
            const col = unroll[i];
            const arr = arrays[i];
            for (let j = 0; j < maxlen; ++j) {
              col[start + j] = arr[j];
            }
          }

          // fill in array indices
          indices(start, maxlen);

          start += maxlen;
        });
      }

      return table.create(cols.new());
    }

    function _fold(table, { names = [], exprs = [], ops = [] }, options = {}) {
      if (names.length === 0) return table;

      const [k = 'key', v = 'value'] = options.as || [];
      const vals = aggregateGet(table, ops, exprs);

      return _unroll(
        table,
        {
          names: [k, v],
          exprs: [() => names, (row, data) => vals.map(fn => fn(row, data))]
        },
        { ...options, drop: names }
      );
    }

    function parse$2(name, table, params, options = { window: false }) {
      const exprs = new Map();

      const marshal = param => {
        param = isNumber(param) ? table.columnName(param) : param;
        isString(param) ? exprs.set(param, field(param))
          : isFunction(param) ? resolve(table, param).forEach(marshal)
          : isObject(param) ? assign(exprs, param)
          : error(`Invalid ${name} value: ${param+''}`);
      };

      toArray(params).forEach(marshal);

      if (options.preparse) {
        options.preparse(exprs);
      }

      return parse$1(exprs, { table, ...options });
    }

    function __fold(table, values, options) {
      return _fold(table, parse$2('fold', table, values), options);
    }

    function _impute(table, values, keys, arrays) {
      const write = keys && keys.length;
      return impute(
        write ? expand$1(table, keys, arrays) : table,
        values,
        write
      );
    }

    function impute(table, { names, exprs, ops }, write) {
      const gets = aggregateGet(table, ops, exprs);
      const cols = write ? null : columnSet(table);
      const rows = table.totalRows();

      names.forEach((name, i) => {
        const col = table.column(name);
        const out = write ? col.data : cols.add(name, Array(rows));
        const get = gets[i];

        table.scan(idx => {
          const v = col.get(idx);
          out[idx] = !isValid(v) ? get(idx) : v;
        });
      });

      return write ? table : table.create(cols);
    }

    function expand$1(table, keys, values) {
      const groups = table.groups();
      const data = table.data();

      // expansion keys and accessors
      const keyNames = (groups ? groups.names : []).concat(keys);
      const keyGet = (groups ? groups.get : [])
        .concat(keys.map(key => table.getter(key)));

      // build hash of existing rows
      const hash = new Set();
      const keyTable = keyFunction(keyGet);
      table.scan((idx, data) => hash.add(keyTable(idx, data)));

      // initialize output table data
      const names = table.columnNames();
      const cols = columnSet();
      const out = names.map(name => cols.add(name, []));
      names.forEach((name, i) => {
        const old = data[name];
        const col = out[i];
        table.scan(row => col.push(old.get(row)));
      });

      // enumerate expanded value sets and augment output table
      const keyEnum = keyFunction(keyGet.map((k, i) => a => a[i]));
      const set = unroll(
        'v',
        '{' + out.map((_, i) => `_${i}.push(v[$${i}]);`).join('') + '}',
        out, names.map(name => keyNames.indexOf(name))
      );

      if (groups) {
        let row = groups.keys.length;
        const prod = values.reduce((p, a) => p * a.length, groups.size);
        const keys = new Uint32Array(prod + (row - hash.size));
        keys.set(groups.keys);
        enumerate(groups, values, (vec, idx) => {
          if (!hash.has(keyEnum(vec))) {
            set(vec);
            keys[row++] = idx[0];
          }
        });
        cols.groupby({ ...groups, keys });
      } else {
        enumerate(groups, values, vec => {
          if (!hash.has(keyEnum(vec))) set(vec);
        });
      }

      return table.create(cols.new());
    }

    function enumerate(groups, values, callback) {
      const offset = groups ? groups.get.length : 0;
      const pad = groups ? 1 : 0;
      const len = pad + values.length;
      const lens = new Int32Array(len);
      const idxs = new Int32Array(len);
      const set = [];

      if (groups) {
        const { get, rows, size } = groups;
        lens[0] = size;
        set.push((vec, idx) => {
          const row = rows[idx];
          for (let i = 0; i < offset; ++i) {
            vec[i] = get[i](row);
          }
        });
      }

      values.forEach((a, i) => {
        const j = i + offset;
        lens[i + pad] = a.length;
        set.push((vec, idx) => vec[j] = a[idx]);
      });

      const vec = Array(offset + values.length);

      // initialize value vector
      for (let i = 0; i < len; ++i) {
        set[i](vec, 0);
      }
      callback(vec, idxs);

      // enumerate all combinations of values
      for (let i = len - 1; i >= 0;) {
        const idx = ++idxs[i];
        if (idx < lens[i]) {
          set[i](vec, idx);
          callback(vec, idxs);
          i = len - 1;
        } else {
          idxs[i] = 0;
          set[i](vec, 0);
          --i;
        }
      }
    }

    function _rollup(table, { names, exprs, ops }) {
      // output data
      const cols = columnSet();
      const groups = table.groups();

      // write groupby fields to output
      if (groups) groupOutput(cols, groups);

      // compute and write aggregate output
      output$1(names, exprs, groups, aggregate(table, ops), cols);

      // return output table
      return table.create(cols.new());
    }

    function output$1(names, exprs, groups, result = [], cols) {
      if (!exprs.length) return;
      const size = groups ? groups.size : 1;
      const op = (id, row) => result[id][row];
      const n = names.length;

      for (let i = 0; i < n; ++i) {
        const get = exprs[i];
        if (get.field != null) {
          // if expression is op only, use aggregates directly
          cols.add(names[i], result[get.field]);
        } else if (size > 1) {
          // if multiple groups, evaluate expression for each
          const col = cols.add(names[i], Array(size));
          for (let j = 0; j < size; ++j) {
            col[j] = get(j, null, op);
          }
        } else {
          // if only one group, no need to loop
          cols.add(names[i], [ get(0, null, op) ]);
        }
      }
    }

    function __impute(table, values, options = {}) {
      values = parse$1(values, { table });

      values.names.forEach(name =>
        table.column(name) ? 0 : error(`Invalid impute column ${toString(name)}`)
      );

      if (options.expand) {
        const opt = { preparse, aggronly: true };
        const params = parse$2('impute', table, options.expand, opt);
        const result = _rollup(table.ungroup(), params);
        return _impute(
          table, values, params.names,
          params.names.map(name => result.get(name, 0))
        );
      } else {
        return _impute(table, values);
      }
    }

    // map direct field reference to "unique" aggregate
    function preparse(map) {
      map.forEach((value, key) =>
        value.field ? map.set(key, array_agg_distinct(value + '')) : 0
      );
    }

    function __intersect(table, others) {
      const names = table.columnNames();
      return others.length
        ? others.reduce((a, b) => a.semijoin(b.select(names)), table).dedupe()
        : table.reify([]);
    }

    function rowLookup(table, hash) {
      const lut = new Map();
      table.scan((row, data) => {
        const key = hash(row, data);
        if (key != null && key === key) {
          lut.set(key, row);
        }
      });
      return lut;
    }

    function indexLookup(idx, data, hash) {
      const lut = new Map();
      const n = idx.length;
      for (let i = 0; i < n; ++i) {
        const row = idx[i];
        const key = hash(row, data);
        if (key != null && key === key) {
          lut.has(key)
            ? lut.get(key).push(i)
            : lut.set(key, [i]);
        }
      }
      return lut;
    }

    function emitter(columns, getters) {
      const args = ['i', 'a', 'j', 'b'];
      return unroll(
        args,
        '{' + concat(columns, (_, i) => `_${i}.push($${i}(${args}));`) + '}',
        columns, getters
      );
    }

    function _join(tableL, tableR, predicate, { names, exprs }, options = {}) {
      // initialize data for left table
      const dataL = tableL.data();
      const idxL = tableL.indices(false);
      const nL = idxL.length;
      const hitL = new Int32Array(nL);

      // initialize data for right table
      const dataR = tableR.data();
      const idxR = tableR.indices(false);
      const nR = idxR.length;
      const hitR = new Int32Array(nR);

      // initialize output data
      const ncols = names.length;
      const cols = columnSet();
      const columns = Array(ncols);
      const getters = Array(ncols);
      for (let i = 0; i < names.length; ++i) {
        columns[i] = cols.add(names[i], []);
        getters[i] = exprs[i];
      }
      const emit = emitter(columns, getters);

      // perform join
      const join = isArray(predicate) ? hashJoin : loopJoin;
      join(emit, predicate, dataL, dataR, idxL, idxR, hitL, hitR, nL, nR);

      if (options.left) {
        for (let i = 0; i < nL; ++i) {
          if (!hitL[i]) {
            emit(idxL[i], dataL, -1, dataR);
          }
        }
      }

      if (options.right) {
        for (let j = 0; j < nR; ++j) {
          if (!hitR[j]) {
            emit(-1, dataL, idxR[j], dataR);
          }
        }
      }

      return tableL.create(cols.new());
    }

    function loopJoin(emit, predicate, dataL, dataR, idxL, idxR, hitL, hitR, nL, nR) {
      // perform nested-loops join
      for (let i = 0; i < nL; ++i) {
        const rowL = idxL[i];
        for (let j = 0; j < nR; ++j) {
          const rowR = idxR[j];
          if (predicate(rowL, dataL, rowR, dataR)) {
            emit(rowL, dataL, rowR, dataR);
            hitL[i] = 1;
            hitR[j] = 1;
          }
        }
      }
    }

    function hashJoin(emit, [keyL, keyR], dataL, dataR, idxL, idxR, hitL, hitR, nL, nR) {
      // determine which table to hash
      let dataScan, keyScan, hitScan, idxScan;
      let dataHash, keyHash, hitHash, idxHash;
      let emitScan = emit;
      if (nL >= nR) {
        dataScan = dataL; keyScan = keyL; hitScan = hitL; idxScan = idxL;
        dataHash = dataR; keyHash = keyR; hitHash = hitR; idxHash = idxR;
      } else {
        dataScan = dataR; keyScan = keyR; hitScan = hitR; idxScan = idxR;
        dataHash = dataL; keyHash = keyL; hitHash = hitL; idxHash = idxL;
        emitScan = (i, a, j, b) => emit(j, b, i, a);
      }

      // build lookup table
      const lut = indexLookup(idxHash, dataHash, keyHash);

      // scan other table
      const m = idxScan.length;
      for (let j = 0; j < m; ++j) {
        const rowScan = idxScan[j];
        const list = lut.get(keyScan(rowScan, dataScan));
        if (list) {
          const n = list.length;
          for (let k = 0; k < n; ++k) {
            const i = list[k];
            emitScan(rowScan, dataScan, idxHash[i], dataHash);
            hitHash[i] = 1;
          }
          hitScan[j] = 1;
        }
      }
    }

    function parseKey(name, table, params) {
      const exprs = new Map();

      toArray(params).forEach((param, i) => {
        param = isNumber(param) ? table.columnName(param) : param;
        isString(param) ? exprs.set(i, field(param))
          : isFunction(param) || isObject(param) && param.expr ? exprs.set(i, param)
          : error(`Invalid ${name} key value: ${param+''}`);
      });

      const fn = parse$1(exprs, { table, aggregate: false, window: false });
      return keyFunction(fn.exprs, true);
    }

    function intersect(a, b) {
      const set = new Set(b);
      return a.filter(x => set.has(x));
    }

    function inferKeys(tableL, tableR, on) {
      if (!on) {
        // perform natural join if join condition not provided
        const isect = intersect(tableL.columnNames(), tableR.columnNames());
        if (!isect.length) error('Natural join requires shared column names.');
        on = [isect, isect];
      } else if (isString(on)) {
        on = [on, on];
      } else if (isArray(on) && on.length === 1) {
        on = [on[0], on[0]];
      }

      return on;
    }

    function keyPredicate(tableL, tableR, onL, onR) {
      if (onL.length !== onR.length) {
        error('Mismatched number of join keys');
      }
      return [
        parseKey('join', tableL, onL),
        parseKey('join', tableR, onR)
      ];
    }

    const OPT_L = { aggregate: false, window: false };
    const OPT_R = { ...OPT_L, index: 1 };

    function __join(tableL, tableR, on, values, options = {}) {
      on = inferKeys(tableL, tableR, on);
      const optParse = { join: [tableL, tableR] };
      let predicate;

      if (isArray(on)) {
        const [onL, onR] = on.map(toArray);
        predicate = keyPredicate(tableL, tableR, onL, onR);

        if (!values) {
          // infer output columns, suppress duplicated key columns
          values = inferValues(tableL, onL, onR, options);
        }
      } else {
        predicate = parse$1({ on }, optParse).exprs[0];

        if (!values) {
          // include all table columns if values not provided
          values = [all(), all()];
        }
      }

      return _join(
        tableL, tableR, predicate,
        parseValues(tableL, tableR, values, optParse, options && options.suffix),
        options
      );
    }

    function inferValues(tableL, onL, onR, options) {
      const isect = [];
      onL.forEach((s, i) => isString(s) && s === onR[i] ? isect.push(s) : 0);
      const vR = not(isect);

      if (options.left && options.right) {
        // for full join, merge shared key columns together
        const shared = new Set(isect);
        return [
          tableL.columnNames().map(s => {
            const c = `[${toString(s)}]`;
            return shared.has(s)
              ? { [s]: `(a, b) => a${c} == null ? b${c} : a${c}` }
              : s;
          }),
          vR
        ];
      }

      return options.right ? [vR, all()] : [all(), vR];
    }

    function parseValues(tableL, tableR, values, optParse, suffix = []) {
      if (isArray(values)) {
        let vL, vR, vJ, n = values.length;
        vL = vR = vJ = { names: [], exprs: [] };

        if (n--) {
          vL = parse$2('join', tableL, values[0], optParse);
        }
        if (n--) {
          vR = parse$2('join', tableR, values[1], OPT_R);
        }
        if (n--) {
          vJ = parse$1(values[2], optParse);
        }

        // handle name collisions
        const rename = new Set();
        const namesL = new Set(vL.names);
        vR.names.forEach(name => {
          if (namesL.has(name)) {
            rename.add(name);
          }
        });
        if (rename.size) {
          rekey(vL.names, rename, suffix[0] || '_1');
          rekey(vR.names, rename, suffix[1] || '_2');
        }

        return {
          names: vL.names.concat(vR.names, vJ.names),
          exprs: vL.exprs.concat(vR.exprs, vJ.exprs)
        };
      } else {
        return parse$1(values, optParse);
      }
    }

    function rekey(names, rename, suffix) {
      names.forEach((name, i) => rename.has(name)
        ? (names[i] = name + suffix)
        : 0);
    }

    function _join_filter(tableL, tableR, predicate, options = {}) {
      // calculate semi-join filter mask
      const filter = new BitSet(tableL.totalRows());
      const join = isArray(predicate) ? hashSemiJoin : loopSemiJoin;
      join(filter, tableL, tableR, predicate);

      // if anti-join, negate the filter
      if (options.anti) {
        filter.not().and(tableL.mask());
      }

      return tableL.create({ filter });
    }

    function hashSemiJoin(filter, tableL, tableR, [keyL, keyR]) {
      // build lookup table
      const lut = rowLookup(tableR, keyR);

      // scan table, update filter with matches
      tableL.scan((rowL, data) => {
        const rowR = lut.get(keyL(rowL, data));
        if (rowR >= 0) filter.set(rowL);
      });
    }

    function loopSemiJoin(filter, tableL, tableR, predicate) {
      const nL = tableL.numRows();
      const nR = tableR.numRows();
      const dataL = tableL.data();
      const dataR = tableR.data();

      if (tableL.isFiltered() || tableR.isFiltered()) {
        // use indices as at least one table is filtered
        const idxL = tableL.indices(false);
        const idxR = tableR.indices(false);
        for (let i = 0; i < nL; ++i) {
          const rowL = idxL[i];
          for (let j = 0; j < nR; ++j) {
            if (predicate(rowL, dataL, idxR[j], dataR)) {
              filter.set(rowL);
              break;
            }
          }
        }
      } else {
        // no filters, enumerate row indices directly
        for (let i = 0; i < nL; ++i) {
          for (let j = 0; j < nR; ++j) {
            if (predicate(i, dataL, j, dataR)) {
              filter.set(i);
              break;
            }
          }
        }
      }
    }

    // export default function(tableL, tableR, predicate, options = {}) {
    //   const filter = new BitSet(tableL.totalRows());
    //   const nL = tableL.numRows();
    //   const nR = tableR.numRows();
    //   const dataL = tableL.data();
    //   const dataR = tableR.data();

    //   if (tableL.isFiltered() || tableR.isFiltered()) {
    //     // use indices as at least one table is filtered
    //     const idxL = tableL.indices(false);
    //     const idxR = tableR.indices(false);
    //     for (let i = 0; i < nL; ++i) {
    //       const rowL = idxL[i];
    //       for (let j = 0; j < nR; ++j) {
    //         if (predicate(rowL, dataL, idxR[j], dataR)) {
    //           filter.set(rowL);
    //           break;
    //         }
    //       }
    //     }
    //   } else {
    //     // no filters, enumerate row indices directly
    //     for (let i = 0; i < nL; ++i) {
    //       for (let j = 0; j < nR; ++j) {
    //         if (predicate(i, dataL, j, dataR)) {
    //           filter.set(i);
    //           break;
    //         }
    //       }
    //     }
    //   }

    //   // if anti-join, negate the filter
    //   if (options.anti) {
    //     filter.not().and(tableL.mask());
    //   }

    //   return tableL.create({ filter });
    // }

    function __semijoin(tableL, tableR, on, options) {
      on = inferKeys(tableL, tableR, on);

      const predicate = isArray(on)
        ? keyPredicate(tableL, tableR, ...on.map(toArray))
        : parse$1({ on }, { join: [tableL, tableR] }).exprs[0];

      return _join_filter(tableL, tableR, predicate, options);
    }

    function _lookup(tableL, tableR, [keyL, keyR], { names, exprs, ops }) {
      // instantiate output data
      const cols = columnSet(tableL);
      const total = tableL.totalRows();
      names.forEach(name => cols.add(name, Array(total).fill(NULL)));

      // build lookup table
      const lut = rowLookup(tableR, keyR);

      // generate setter function for lookup match
      const set = unroll(
        ['lr', 'rr', 'data'],
        '{' + concat(names, (_, i) => `_[${i}][lr] = $[${i}](rr, data);`) + '}',
        names.map(name => cols.data[name]),
        aggregateGet(tableR, ops, exprs)
      );

      // find matching rows, set values on match
      const dataR = tableR.data();
      tableL.scan((lrow, data) => {
        const rrow = lut.get(keyL(lrow, data));
        if (rrow >= 0) set(lrow, rrow, dataR);
      });

      return tableL.create(cols);
    }

    function __lookup(tableL, tableR, on, values) {
      on = inferKeys(tableL, tableR, on);
      return _lookup(
        tableL,
        tableR,
        [ parseKey('lookup', tableL, on[0]), parseKey('lookup', tableR, on[1]) ],
        parse$2('lookup', tableR, values)
      );
    }

    const opt = (value, defaultValue) => value != null ? value : defaultValue;

    function _pivot(table, on, values, options = {}) {
      const { keys, keyColumn } = pivotKeys(table, on, options);
      const vsep = opt(options.valueSeparator, '_');
      const namefn = values.names.length > 1
        ? (i, name) => name + vsep + keys[i]
        : i => keys[i];

      // perform separate aggregate operations for each key
      // if keys do not match, emit NaN so aggregate skips it
      // use custom toString method for proper field resolution
      const results = keys.map(
        k => aggregate(table, values.ops.map(op => {
          if (op.name === 'count') { // fix #273
            const fn = r => k === keyColumn[r] ? 1 : NaN;
            fn.toString = () => k + ':1';
            return { ...op, name: 'sum', fields: [fn] };
          }
          const fields = op.fields.map(f => {
            const fn = (r, d) => k === keyColumn[r] ? f(r, d) : NaN;
            fn.toString = () => k + ':' + f;
            return fn;
          });
          return { ...op, fields };
        }))
      );

      return table.create(output$2(values, namefn, table.groups(), results));
    }

    function pivotKeys(table, on, options) {
      const limit = options.limit > 0 ? +options.limit : Infinity;
      const sort = opt(options.sort, true);
      const ksep = opt(options.keySeparator, '_');

      // construct key accessor function
      const get = aggregateGet(table, on.ops, on.exprs);
      const key = get.length === 1
        ? get[0]
        : (row, data) => get.map(fn => fn(row, data)).join(ksep);

      // generate vector of per-row key values
      const kcol = Array(table.totalRows());
      table.scan((row, data) => kcol[row] = key(row, data));

      // collect unique key values
      const uniq = aggregate(
        table.ungroup(),
        [ {
          id: 0,
          name: 'array_agg_distinct',
          fields: [(row => kcol[row])], params: []
        } ]
      )[0][0];

      // get ordered set of unique key values
      const keys = sort ? uniq.sort() : uniq;

      // return key values
      return {
        keys: Number.isFinite(limit) ? keys.slice(0, limit) : keys,
        keyColumn: kcol
      };
    }

    function output$2({ names, exprs }, namefn, groups, results) {
      const size = groups ? groups.size : 1;
      const cols = columnSet();
      const m = results.length;
      const n = names.length;

      let result;
      const op = (id, row) => result[id][row];

      // write groupby fields to output
      if (groups) groupOutput(cols, groups);

      // write pivot values to output
      for (let i = 0; i < n; ++i) {
        const get = exprs[i];
        if (get.field != null) {
          // if expression is op only, use aggregates directly
          for (let j = 0; j < m; ++j) {
            cols.add(namefn(j, names[i]), results[j][get.field]);
          }
        } else if (size > 1) {
          // if multiple groups, evaluate expression for each
          for (let j = 0; j < m; ++j) {
            result = results[j];
            const col = cols.add(namefn(j, names[i]), Array(size));
            for (let k = 0; k < size; ++k) {
              col[k] = get(k, null, op);
            }
          }
        } else {
          // if only one group, no need to loop
          for (let j = 0; j < m; ++j) {
            result = results[j];
            cols.add(namefn(j, names[i]), [ get(0, null, op) ]);
          }
        }
      }

      return cols.new();
    }

    // TODO: enforce aggregates only (no output changes) for values
    function __pivot(table, on, values, options) {
      return _pivot(
        table,
        parse$2('fold', table, on),
        parse$2('fold', table, values, { preparse: preparse$1, aggronly: true }),
        options
      );
    }

    // map direct field reference to "any" aggregate
    function preparse$1(map) {
      map.forEach((value, key) =>
        value.field ? map.set(key, any(value + '')) : 0
      );
    }

    function __rename(table, columns) {
      const map = new Map();
      table.columnNames(x => (map.set(x, x), 0));
      return _select(table, resolve(table, columns, map));
    }

    function __rollup(table, values) {
      return _rollup(table, parse$1(values, { table, aggronly: true, window: false }));
    }

    function sample(buffer, replace, index, weight) {
      return (
        replace
          ? (weight ? sampleRW : sampleRU)
          : (weight ? sampleNW : sampleNU)
      )(buffer.length, buffer, index, weight);
    }

    // uniform sampling with replacement
    // uses straightforward uniform sampling
    function sampleRU(size, buffer, index) {
      const n = index.length;
      for (let i = 0; i < size; ++i) {
        buffer[i] = index[(n * random()) | 0];
      }
      return buffer;
    }

    // weighted sampling with replacement
    // uses binary search lookup against cumulative weight
    function sampleRW(size, buffer, index, weight) {
      const n = index.length;
      const w = new Float64Array(n);

      let sum = 0;
      for (let i = 0; i < n; ++i) {
        w[i] = (sum += weight(index[i]));
      }

      const bisect = bisector$1(ascending$1).right;
      for (let i = 0; i < size; ++i) {
        buffer[i] = index[bisect(w, sum * random())];
      }
      return buffer;
    }

    // uniform sampling without replacement
    // uses reservoir sampling to build out the sample
    // https://en.wikipedia.org/wiki/Reservoir_sampling
    function sampleNU(size, buffer, index) {
      const n = index.length;
      if (size >= n) return index;

      for (let i = 0; i < size; ++i) {
        buffer[i] = index[i];
      }

      for (let i = size; i < n; ++i) {
        const j = i * random();
        if (j < size) {
          buffer[j | 0] = index[i];
        }
      }

      return buffer;
    }

    // weighted sample without replacement
    // uses method of Efraimidis and Spirakis
    // TODO: could use min-heap to improve efficiency
    function sampleNW(size, buffer, index, weight) {
      const n = index.length;
      if (size >= n) return index;

      const w = new Float32Array(n);
      const k = new Uint32Array(n);
      for (let i = 0; i < n; ++i) {
        k[i] = i;
        w[i] = -Math.log(random()) / weight(index[i]);
      }

      k.sort((a, b) => w[a] - w[b]);
      for (let i = 0; i < size; ++i) {
        buffer[i] = index[k[i]];
      }
      return buffer;
    }

    function _shuffle(array, lo = 0, hi = array.length) {
      let n = hi - (lo = +lo);

      while (n) {
        const i = random() * n-- | 0;
        const v = array[n + lo];
        array[n + lo] = array[i + lo];
        array[i + lo] = v;
      }

      return array;
    }

    function _sample(table, size, weight, options = {}) {
      const { replace, shuffle } = options;
      const parts = table.partitions(false);

      let total = 0;
      size = parts.map((idx, group) => {
        let s = size(group);
        total += (s = (replace ? s : Math.min(idx.length, s)));
        return s;
      });

      const samples = new Uint32Array(total);
      let curr = 0;

      parts.forEach((idx, group) => {
        const sz = size[group];
        const buf = samples.subarray(curr, curr += sz);

        if (!replace && sz === idx.length) {
          // sample size === data size, no replacement
          // no need to sample, just copy indices
          buf.set(idx);
        } else {
          sample(buf, replace, idx, weight);
        }
      });

      if (shuffle !== false && (parts.length > 1 || !replace)) {
        // sampling with replacement methods shuffle, so in
        // that case a single partition is already good to go
        _shuffle(samples);
      }

      return table.reify(samples);
    }

    function __sample(table, size, options = {}) {
      return _sample(
        table,
        parseSize(table, size),
        parseWeight(table, options.weight),
        options
      );
    }

    const get = col => row => col.get(row) || 0;

    function parseSize(table, size) {
      return isNumber(size)
        ? () => size
        : get(_rollup(table, parse$1({ size }, { table, window: false })).column('size'));
    }

    function parseWeight(table, w) {
      if (w == null) return null;
      w = isNumber(w) ? table.columnName(w) : w;
      return get(
        isString(w)
          ? table.column(w)
          : _derive(table, parse$1({ w }, { table }), { drop: true }).column('w')
      );
    }

    function __select(table, columns) {
      return _select(table, resolve(table, columns));
    }

    function _spread(table, { names, exprs, ops = [] }, options = {}) {
      if (names.length === 0) return table;

      // ignore 'as' if there are multiple field names
      const as = (names.length === 1 && options.as) || [];
      const drop = options.drop == null ? true : !!options.drop;
      const limit = options.limit == null
        ? as.length || Infinity
        : Math.max(1, +options.limit || 1);

      const get = aggregateGet(table, ops, exprs);
      const cols = columnSet();
      const map = names.reduce((map, name, i) => map.set(name, i), new Map());

      const add = (index, name) => {
        const columns = spread(table, get[index], limit);
        const n = columns.length;
        for (let i = 0; i < n; ++i) {
          cols.add(as[i] || `${name}_${i + 1}`, columns[i]);
        }
      };

      table.columnNames().forEach(name => {
        if (map.has(name)) {
          if (!drop) cols.add(name, table.column(name));
          add(map.get(name), name);
          map.delete(name);
        } else {
          cols.add(name, table.column(name));
        }
      });

      map.forEach(add);

      return table.create(cols);
    }

    function spread(table, get, limit) {
      const nrows = table.totalRows();
      const columns = [];

      table.scan((row, data) => {
        const values = toArray(get(row, data));
        const n = Math.min(values.length, limit);
        while (columns.length < n) {
          columns.push(Array(nrows).fill(NULL));
        }
        for (let i = 0; i < n; ++i) {
          columns[i][row] = values[i];
        }
      });

      return columns;
    }

    function __spread(table, values, options) {
      return _spread(table, parse$2('spread', table, values), options);
    }

    function __union(table, others) {
      return table.concat(others).dedupe();
    }

    function __unroll(table, values, options) {
      return _unroll(
        table,
        parse$2('unroll', table, values),
        options && options.drop
          ? { ...options, drop: parse$2('unroll', table, options.drop).names }
          : options
      );
    }

    function _groupby(table, exprs) {
      return table.create({
        groups: createGroups(table, exprs)
      });
    }

    function createGroups(table, { names = [], exprs = [], ops = [] }) {
      const n = names.length;
      if (n === 0) return null;

      // check for optimized path when grouping by a single field
      // use pre-calculated groups if available
      if (n === 1 && !table.isFiltered() && exprs[0].field) {
        const col = table.column(exprs[0].field);
        if (col.groups) return col.groups(names);
      }

      let get = aggregateGet(table, ops, exprs);
      const getKey = keyFunction(get);
      const nrows = table.totalRows();
      const keys = new Uint32Array(nrows);
      const index = {};
      const rows = [];

      // inline table scan for performance
      const data = table.data();
      const bits = table.mask();
      if (bits) {
        for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {
          const key = getKey(i, data) + '';
          const val = index[key];
          keys[i] = val != null ? val : (index[key] = rows.push(i) - 1);
        }
      } else {
        for (let i = 0; i < nrows; ++i) {
          const key = getKey(i, data) + '';
          const val = index[key];
          keys[i] = val != null ? val : (index[key] = rows.push(i) - 1);
        }
      }

      if (!ops.length) {
        // capture data in closure, so no interaction with select
        get = get.map(f => row => f(row, data));
      }

      return { keys, get, names, rows, size: rows.length };
    }

    function __groupby(table, values) {
      return _groupby(table, parse$2('groupby', table, values));
    }

    function _orderby(table, comparator) {
      return table.create({ order: comparator });
    }

    // generate code to compare a single field
    const _compare = (u, v, lt, gt) =>
      `((u = ${u}) < (v = ${v}) || u == null) && v != null ? ${lt}
    : (u > v || v == null) && u != null ? ${gt}
    : ((v = v instanceof Date ? +v : v), (u = u instanceof Date ? +u : u)) !== u && v === v ? ${lt}
    : v !== v && u === u ? ${gt} : `;

    function parse$3(table, fields) {
      // parse expressions, generate code for both a and b values
      const names = [];
      const exprs = [];
      const fn = [];
      let keys = null, opA = '0', opB = '0';
      if (table.isGrouped()) {
        keys = table.groups().keys;
        opA = 'ka';
        opB = 'kb';
      }
      const { ops } = parse$1(fields, {
        table,
        value: (name, node) => {
          names.push(name);
          if (node.escape) {
            // if an escaped function, invoke it directly
            const f = i => `fn[${fn.length}](${i}, data)`;
            exprs.push([f('a'), f('b')]);
            fn.push(node.escape);
          } else {
            // generate code to extract values to compare
            exprs.push([
              codegen(node, { index: 'a', op: opA }),
              codegen(node, { index: 'b', op: opB })
            ]);
          }
        },
        window: false
      });

      // calculate aggregate values if needed
      const result = aggregate(table, ops);
      const op = (id, row) => result[id][row];

      // generate comparison code for each field
      const n = names.length;
      let code = 'return (a, b) => {'
        + (op && table.isGrouped() ? 'const ka = keys[a], kb = keys[b];' : '')
        + 'let u, v; return ';
      for (let i = 0; i < n; ++i) {
        const o = fields.get(names[i]).desc ? -1 : 1;
        const [u, v] = exprs[i];
        code += _compare(u, v, -o, o);
      }
      code += '0;};';

      // instantiate and return comparator function
      return Function('op', 'keys', 'fn', 'data', code)(op, keys, fn, table.data());
    }

    function __orderby(table, values) {
      return _orderby(table, parseValues$1(table, values));
    }

    function parseValues$1(table, params) {
      let index = -1;
      const exprs = new Map();
      const add = val => exprs.set(++index + '', val);

      params.forEach(param => {
        const expr = param.expr != null ? param.expr : param;

        if (isObject(expr) && !isFunction(expr)) {
          for (const key in expr) add(expr[key]);
        } else {
          add(
            isNumber(expr) ? field(param, table.columnName(expr))
              : isString(expr) ? field(param)
              : isFunction(expr) ? param
              : error(`Invalid orderby field: ${param+''}`)
          );
        }
      });

      return parse$3(table, exprs);
    }

    function __concat(table, others) {
      const trows = table.numRows();
      const nrows = trows + others.reduce((n, t) => n + t.numRows(), 0);
      if (trows === nrows) return table;

      const tables = [table, ...others];
      const cols = columnSet();

      table.columnNames().forEach(name => {
        const arr = Array(nrows);
        let row = 0;
        tables.forEach(table => {
          const col = table.column(name) || { get: () => NULL };
          table.scan(trow => arr[row++] = col.get(trow));
        });
        cols.add(name, arr);
      });

      return table.create(cols.new());
    }

    function __reduce(table, reducer) {
      const cols = columnSet();
      const groups = table.groups();

      // initialize groups
      const { get, names = [], rows, size = 1 } = groups || {};
      const counts = new Uint32Array(size + 1);
      names.forEach(name => cols.add(name, null));

      // compute reduced values
      const cells = groups
        ? reduceGroups(table, reducer, groups)
        : [ reduceFlat(table, reducer) ];

      // initialize output columns
      reducer.outputs().map(name => cols.add(name, []));

      // write reduced values to output columns
      const n = counts.length - 1;
      let len = 0;
      for (let i = 0; i < n; ++i) {
        len += counts[i + 1] = reducer.write(cells[i], cols.data, counts[i]);
      }

      // write group values to output columns
      if (groups) {
        const data = table.data();
        names.forEach((name, index) => {
          const column = cols.data[name] = Array(len);
          const getter = get[index];
          for (let i = 0, j = 0; i < size; ++i) {
            column.fill(getter(rows[i], data), j, j += counts[i + 1]);
          }
        });
      }

      return table.create(cols.new());
    }

    function __ungroup(table) {
      return table.isGrouped()
        ? table.create({ groups: null })
        : table;
    }

    function __unorder(table) {
      return table.isOrdered()
        ? table.create({ order: null })
        : table;
    }

    var verbs = {
      __antijoin: (table, other, on) =>
        __semijoin(table, other, on, { anti: true }),
      __count: (table, options = {}) =>
        __rollup(table, { [options.as || 'count']: count() }),
      __cross: (table, other, values, options) =>
        __join(table, other, () => true, values, {
          ...options, left: true, right: true
        }),
      __concat,
      __dedupe,
      __derive,
      __except,
      __filter,
      __fold,
      __impute,
      __intersect,
      __join,
      __lookup,
      __pivot,
      __relocate,
      __rename,
      __rollup,
      __sample,
      __select,
      __semijoin,
      __spread,
      __union,
      __unroll,
      __groupby,
      __orderby,
      __ungroup,
      __unorder,
      __reduce
    };

    // Add verb implementations to ColumnTable prototype
    Object.assign(ColumnTable.prototype, verbs);

    /**
     * Create a new table for a set of named columns.
     * @param {object|Map} columns
     *  The set of named column arrays. Keys are column names.
     *  The enumeration order of the keys determines the column indices,
     *  unless the names parameter is specified.
     *  Values must be arrays (or array-like values) of identical length.
     * @param {string[]} [names] Ordered list of column names. If specified,
     *  this array determines the column indices. If not specified, the
     *  key enumeration order of the columns object is used.
     * @return {ColumnTable} the instantiated table
     * @example table({ colA: ['a', 'b', 'c'], colB: [3, 4, 5] })
     */
    function table$1(columns, names) {
      return ColumnTable.new(columns, names);
    }

    /**
     * Create a new table from an existing object, such as an array of
     * objects or a set of key-value pairs.
     * @param {object|Array|Map} values Data values to populate the table.
     *  If array-valued or iterable, imports rows for each non-null value,
     *  using the provided column names as keys for each row object. If no
     *  names are provided, the first non-null object's own keys are used.
     *  If object- or Map-valued, create columns for the keys and values.
     * @param {string[]} [names] Column names to include.
     *  For object or Map values, specifies the key and value column names.
     *  Otherwise, specifies the keys to look up on each row object.
     * @return {ColumnTable} the instantiated table.
     * @example from([ { colA: 1, colB: 2 }, { colA: 3, colB: 4 } ])
     */
    function from(values, names) {
      return ColumnTable.from(values, names);
    }

    /**
     * Options for file loading.
     * @typedef {object} LoadOptions
     * @property {'arrayBuffer'|'text'|'json'} [as='text'] A string indicating
     *  the data type of the file. One of 'arrayBuffer', 'json', or 'text'.
     * @property {(data: *, options?: object) => ColumnTable} [using] A function
     *  that accepts a data payload (e.g., string or buffer) and an options object
     *  as input and returns an Arquero table (such as fromCSV or fromJSON).
     * @property {object} [fetch] Options to pass to the HTTP fetch method
     *  when loading a URL.
     */

    /**
     * Load data from a file and return a Promise for an Arquero table.
     * A specific format parser can be provided with the *using* option,
     * otherwise CSV format is assumed. The options to this method are
     * passed as the second argument to the format parser.
     * @param {string} url The URL to load.
     * @param {LoadOptions & object} options The loading and formatting options.
     * @return {Promise<ColumnTable>} A Promise for an Arquero table.
     * @example aq.load('data/table.csv')
     * @example aq.load('data/table.json', { using: aq.fromJSON })
     * @example aq.load('data/table.json', { using: aq.from })
     */
    function load(url, options = {}) {
      const parse = options.using || fromCSV;
      return fetch(url, options.fetch)
        .then(res => res[options.as || 'text']())
        .then(data => parse(data, options));
    }

    /**
     * Load an Arrow file from a URL and return a Promise for an Arquero table.
     * @param {string} url The URL to load.
     * @param {LoadOptions & import('./from-arrow').ArrowOptions} options Arrow format options.
     * @return {Promise<ColumnTable>} A Promise for an Arquero table.
     * @example aq.loadArrow('data/table.arrow')
     */
    function loadArrow(url, options) {
      return load(url, { ...options, as: 'arrayBuffer', using: fromArrow });
    }

    /**
     * Load a CSV file from a URL and return a Promise for an Arquero table.
     * @param {string} url The URL to load.
     * @param {LoadOptions & import('./from-csv').CSVParseOptions} options CSV format options.
     * @return {Promise<ColumnTable>} A Promise for an Arquero table.
     * @example aq.loadCSV('data/table.csv')
     * @example aq.loadTSV('data/table.tsv', { delimiter: '\t' })
     */
    function loadCSV(url, options) {
      return load(url, { ...options, as: 'text', using: fromCSV });
    }

    /**
     * Load a fixed width file from a URL and return a Promise for an Arquero table.
     * @param {string} url The URL to load.
     * @param {LoadOptions & import('./from-fixed').FixedParseOptions} options Fixed width format options.
     * @return {Promise<ColumnTable>} A Promise for an Arquero table.
     * @example aq.loadFixedWidth('data/table.txt', { names: ['name', 'city', state'], widths: [10, 20, 2] })
     */
     function loadFixed(url, options) {
      return load(url, { ...options, as: 'text', using: fromFixed });
    }

    /**
     * Load a JSON file from a URL and return a Promise for an Arquero table.
     * If the loaded JSON is array-valued, an array-of-objects format is assumed
     * and the aq.from method is used to construct the table. Otherwise, a
     * column object format is assumed and aq.fromJSON is applied.
     * @param {string} url The URL to load.
     * @param {LoadOptions & import('./from-json').JSONParseOptions} options JSON format options.
     * @return {Promise<ColumnTable>} A Promise for an Arquero table.
     * @example aq.loadJSON('data/table.json')
     */
    function loadJSON(url, options) {
      return load(url, { ...options, as: 'json', using: parseJSON });
    }

    function parseJSON(data, options) {
      return isArray(data) ? from(data) : fromJSON(data, options);
    }

    /**
     * Options for binning number values.
     * @typedef {object} BinOptions
     * @property {number} [maxbins] The maximum number of bins.
     * @property {number} [minstep] The minimum step size between bins.
     * @property {number} [step] The exact step size to use between bins.
     *  If specified, the maxbins and minstep options are ignored.
     * @property {boolean} [nice=true] Flag indicating if bins should
     *  snap to "nice" human-friendly values such as multiples of ten.
     * @property {number} [offset=0] Step offset for bin boundaries.
     *  The default floors to the lower bin boundary. A value of 1 snaps
     *  one step higher to the upper bin boundary, and so on.
     */

    /**
     * Generate a table expression that performs uniform binning of
     * number values. The resulting string can be used as part of the
     * input to table transformation verbs.
     * @param {string} name The name of the column to bin.
     * @param {BinOptions} [options] Binning scheme options.
     * @return {string} A table expression string for binned values.
     * @example bin('colA', { maxbins: 20 })
     */
    function bin$1(name, options = {}) {
      const field = `d[${JSON.stringify(name)}]`;
      const { maxbins, nice, minstep, step, offset } = options;
      const args = [maxbins, nice, minstep, step];

      let n = args.length;
      while (n && args[--n] == null) args.pop();
      const a = args.length ? ', ' + args.map(a => a + '').join(', ') : '';

      return `d => op.bin(${field}, ...op.bins(${field}${a}), ${offset || 0})`;
    }

    /**
     * Escape a function or value to prevent it from being parsed and recompiled.
     * This helper can be used in lieu of single-table table expressions (which
     * are internally parsed and rewritten) to apply a JavaScript function as-is,
     * including support for closures. It can also be used to pass a constant,
     * literal value as a table expression, bypassing the parser.
     * @param {*} value A function or value to escape.
     * @return {object} A wrapper object representing the escaped value.
     * @example escape(d => d.a.toFixed(2))
     * @example escape(d => d.a * -d.b)
     */
    function _escape(value) {
      return wrap(value, {
        escape: true,
        toString() { error('Escaped values can not be serialized.'); }
      });
    }

    /**
     * Generate a table expression that computes the number of rows
     * corresponding to a given fraction for each group. The resulting
     * string can be used as part of the input to the sample verb.
     * @param {number} fraction The fractional value.
     * @return {string} A table expression string for computing row counts.
     * @example frac(0.5)
     */
    function frac(fraction) {
      return `() => op.round(${+fraction} * op.count())`;
    }

    /**
     * Select columns by index and rename them to the provided names. Returns a
     * selection helper function that takes a table as input and produces a
     * rename map as output. If the number of provided names is less than the
     * number of table columns, the rename map will only include entries for the
     * provided names. If the number of table columns is less than then number of
     * provided names, only the rename map will only include entries that cover
     * the existing columns.
     * @param {...(string|string[])} names An ordered list of column names.
     * @return {Function} Selection function compatible with {@link Table#select}.
     * @example table.rename(aq.names('a', 'b', 'c'))
     * @example table.select(aq.names(['a', 'b', 'c']))
     */
    function names(...names) {
      names = names.flat();
      return table => {
        const m = new Map();
        const n = Math.min(names.length, table.numCols());
        for (let i = 0; i < n; ++i) {
          m.set(table.columnName(i), names[i]);
        }
        return m;
      };
    }

    /**
     * Convenience function for computing a single aggregate value for
     * a table. Equivalent to ungrouping a table, applying a rollup verb
     * for a single aggregate, and extracting the resulting value.
     * @param {Table} table A table instance.
     * @param {import('../../table/transformable').TableExpr} expr An
     *   aggregate table expression to evaluate.
     * @return {import('../../table/table').DataValue} The aggregate value.
     * @example agg(table, op.max('colA'))
     * @example agg(table, d => [op.min('colA'), op.max('colA')])
     */
    function agg(table, expr) {
      return table.ungroup().rollup({ _: expr }).get('_');
    }

    const onIllegal = (name, type) =>
      error(`Illegal ${type} name: ${toString(name)}`);

    const onDefined = (name, type) =>
      error(`The ${type} ${toString(name)} is already defined. Use override option?`);

    const onReserve = (name, type) =>
      error(`The ${type} name ${toString(name)} is reserved and can not be overridden.`);

    function check$1(name, options, obj = ops, type = 'function') {
      if (!name) onIllegal(name, type);
      if (!options.override && has(obj, name)) onDefined(name, type);
    }

    // -- Op Functions --------------------------------------------------

    function verifyFunction(name, def, object, options) {
      return object[name] === def || check$1(name, options);
    }

    /**
     * Register an aggregate or window operation.
     * @param {string} name The name of the operation
     * @param {AggregateDef|WindowDef} def The operation definition.
     * @param {object} object The registry object to add the definition to.
     * @param {RegisterOptions} [options] Registration options.
     */
    function addOp(name, def, object, options = {}) {
      if (verifyFunction(name, def, object, options)) return;
      const [nf = 0, np = 0] = def.param;
      object[name] = def;
      ops[name] = (...params) => op(
        name,
        params.slice(0, nf),
        params.slice(nf, nf + np)
      );
    }

    /**
     * Register a custom aggregate function.
     * @param {string} name The name to use for the aggregate function.
     * @param {AggregateDef} def The aggregate operator definition.
     * @param {RegisterOptions} [options] Function registration options.
     * @throws If a function with the same name is already registered and
     *  the override option is not specified.
     */
    function addAggregateFunction(name, def, options) {
      addOp(name, def, aggregateFunctions, options);
    }

    /**
     * Register a custom window function.
     * @param {string} name The name to use for the window function.
     * @param {WindowDef} def The window operator definition.
     * @param {RegisterOptions} [options] Function registration options.
     * @throws If a function with the same name is already registered and
     *  the override option is not specified.
     */
    function addWindowFunction(name, def, options) {
      addOp(name, def, windowFunctions, options);
    }

    /**
     * Register a function for use within table expressions.
     * If only a single argument is provided, it will be assumed to be a
     * function and the system will try to extract its name.
     * @param {string} name The name to use for the function.
     * @param {Function} fn A standard JavaScript function.
     * @param {RegisterOptions} [options] Function registration options.
     * @throws If a function with the same name is already registered and
     *  the override option is not specified, or if no name is provided
     *  and the input function is anonymous.
     */
    function addFunction(name, fn, options = {}) {
      if (arguments.length === 1) {
        fn = name;
        name = fn.name;
        if (name === '' || name === 'anonymous') {
          error('Anonymous function provided, please include a name argument.');
        } else if (name === ROW_OBJECT) {
          onReserve(ROW_OBJECT, 'function');
        }
      }
      if (verifyFunction(name, fn, functions, options)) return;
      functions[name] = fn;
      ops[name] = fn;
    }

    // -- Table Methods and Verbs ---------------------------------------

    const proto = ColumnTable.prototype;

    /**
     * Reserved table/query methods that must not be overwritten.
     */
    let RESERVED;

    function addReserved(obj) {
      for (; obj; obj = Object.getPrototypeOf(obj)) {
        Object.getOwnPropertyNames(obj).forEach(name => RESERVED[name] = 1);
      }
    }

    function verifyTableMethod(name, fn, options) {
      const type = 'method';

      // exit early if duplicate re-assignment
      if (proto[name] && proto[name].fn === fn) return true;

      // initialize reserved properties to avoid overriding internals
      if (!RESERVED) {
        RESERVED = {};
        addReserved(proto);
        addReserved(Query$1.prototype);
      }

      // perform name checks
      if (RESERVED[name]) onReserve(name, type);
      if ((name + '')[0] === '_') onIllegal(name, type);
      check$1(name, options, proto, type);
    }

    /**
     * Register a new table method. A new method will be added to the column
     * table prototype. When invoked from a table, the registered method will
     * be invoked with the table as the first argument, followed by all the
     * provided arguments.
     * @param {string} name The name of the table method.
     * @param {Function} method The table method.
     * @param {RegisterOptions} options
     */
    function addTableMethod(name, method, options = {}) {
      if (verifyTableMethod(name, method, options)) return;
      proto[name] = function(...args) { return method(this, ...args); };
      proto[name].fn = method;
    }

    /**
     * Register a new transformation verb.
     * @param {string} name The name of the verb.
     * @param {Function} method The verb implementation.
     * @param {ParamDef[]} params The verb parameter schema.
     * @param {RegisterOptions} options Function registration options.
     */
    function addVerb(name, method, params, options = {}) {
      // register table method first
      // if that doesn't throw, add serializable verb entry
      addTableMethod(name, method, options);
      addQueryVerb(name, Verbs[name] = createVerb(name, params));
    }

    // -- Package Bundles -----------------------------------------------

    const PACKAGE = 'arquero_package';

    /**
     * Add an extension package of functions, table methods, and/or verbs.
     * @param {Package|PackageBundle} bundle The package of extensions.
     * @throws If package validation fails.
     */
    function addPackage(bundle, options = {}) {
      const pkg = bundle && bundle[PACKAGE] || bundle;
      const parts = {
        functions: [
          (name, def, opt) => verifyFunction(name, def, functions, opt),
          addFunction
        ],
        aggregateFunctions: [
          (name, def, opt) => verifyFunction(name, def, aggregateFunctions, opt),
          addAggregateFunction
        ],
        windowFunctions: [
          (name, def, opt) => verifyFunction(name, def, windowFunctions, opt),
          addWindowFunction
        ],
        tableMethods: [
          verifyTableMethod,
          addTableMethod
        ],
        verbs: [
          (name, obj, opt) => verifyTableMethod(name, obj.method, opt),
          (name, obj, opt) => addVerb(name, obj.method, obj.params, opt)
        ]
      };

      function scan(index) {
        for (const key in parts) {
          const part = parts[key];
          const p = pkg[key];
          for (const name in p) part[index](name, p[name], options);
        }
      }
      scan(0); // first validate package, throw if validation fails
      scan(1); // then add package content
    }

    /**
     * Aggregate function definition.
     * @typedef {import('./op/aggregate-functions').AggregateDef} AggregateDef
     */

    /**
     * Window function definition.
     * @typedef {import('./op/window-functions').WindowDef} WindowDef
     */

    /**
     * Verb parameter definition.
     * @typedef {import('./query/verb').ParamDef} ParamDef
     */

    /**
     * Verb definition.
     * @typedef {object} VerbDef
     * @property {Function} method A function implementing the verb.
     * @property {ParamDef[]} params The verb parameter schema.
     */

    /**
     * Verb parameter definition.
     * @typedef {object} ParamDef
     * @property {string} name The verb parameter name.
     * @property {ParamType} type The verb parameter type.
     */

    /**
     * A package of op function and table method definitions.
     * @typedef {object} Package
     * @property {{[name: string]: Function}} [functions] Standard function entries.
     * @property {{[name: string]: AggregateDef}} [aggregateFunctions] Aggregate function entries.
     * @property {{[name: string]: WindowDef}} [windowFunctions] Window function entries.
     * @property {{[name: string]: Function}} [tableMethods] Table method entries.
     * @property {{[name: string]: VerbDef}} [verbs] Verb entries.
     */

    /**
     * An object containing an extension package.
     * @typedef {object} PackageBundle
     * @property {Package} arquero.package The package bundle.
     */

    /**
     * Options for registering new functions.
     * @typedef {object} RegisterOptions
     * @property {boolean} [override=false] Flag indicating if the added
     *  function can override an existing function with the same name.
     */

    // export internal class definitions

    const internal = {
      Table,
      ColumnTable,
      Transformable,
      Query: Query$1,
      Reducer,
      Verb: Verb$1,
      Verbs,
      columnFactory,
      parse: parse$1,
      walk_ast: walk
    };
    const version$2 = pkg.version;

    var aq = /*#__PURE__*/Object.freeze({
        __proto__: null,
        internal: internal,
        version: version$2,
        seed: seed,
        fromArrow: fromArrow,
        fromCSV: fromCSV,
        fromFixed: fromFixed,
        fromJSON: fromJSON,
        load: load,
        loadArrow: loadArrow,
        loadCSV: loadCSV,
        loadFixed: loadFixed,
        loadJSON: loadJSON,
        toArrow: toArrow,
        bin: bin$1,
        escape: _escape,
        desc: desc,
        field: field,
        frac: frac,
        names: names,
        rolling: rolling,
        all: all,
        endswith: endswith,
        matches: matches,
        not: not,
        range: range,
        startswith: startswith,
        agg: agg,
        op: ops,
        query: query,
        queryFrom: queryFrom,
        addAggregateFunction: addAggregateFunction,
        addWindowFunction: addWindowFunction,
        addFunction: addFunction,
        addTableMethod: addTableMethod,
        addVerb: addVerb,
        addPackage: addPackage,
        table: table$1,
        from: from
    });

    var ffRenData = [
    	{
    		year: 1900,
    		coalprod: "1.92322e+4",
    		coalprodpercap: "1.91858e+3",
    		gasprod: "2.21520e+2",
    		oilprodpercap: "9.82316e+0",
    		oilprod: "7.10839e+2",
    		gasprodpercap: "2.37052e+1",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1901,
    		coalprod: "1.95062e+4",
    		coalprodpercap: "1.95788e+3",
    		gasprod: "2.45484e+2",
    		oilprodpercap: "1.06790e+1",
    		oilprod: "7.95481e+2",
    		gasprodpercap: "2.58919e+1",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1902,
    		coalprod: "1.99302e+4",
    		coalprodpercap: "1.98437e+3",
    		gasprod: "2.69448e+2",
    		oilprodpercap: "1.14968e+1",
    		oilprod: "8.64728e+2",
    		gasprodpercap: "2.87851e+1",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1903,
    		coalprod: "2.15975e+4",
    		coalprodpercap: "2.08453e+3",
    		gasprod: "2.93409e+2",
    		oilprodpercap: "1.22778e+1",
    		oilprod: "9.25225e+2",
    		gasprodpercap: "3.37033e+1",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1904,
    		coalprod: "2.17291e+4",
    		coalprodpercap: "2.07070e+3",
    		gasprod: "3.17373e+2",
    		oilprodpercap: "1.30245e+1",
    		oilprod: "1.04048e+3",
    		gasprodpercap: "3.92794e+1",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1905,
    		coalprod: "2.32777e+4",
    		coalprodpercap: "2.14388e+3",
    		gasprod: "3.41337e+2",
    		oilprodpercap: "1.37379e+1",
    		oilprod: "1.02304e+3",
    		gasprodpercap: "4.44818e+1",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1906,
    		coalprod: "2.45962e+4",
    		coalprodpercap: "2.26958e+3",
    		gasprod: "3.65298e+2",
    		oilprodpercap: "1.44190e+1",
    		oilprod: "1.01895e+3",
    		gasprodpercap: "4.60790e+1",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1907,
    		coalprod: "2.70513e+4",
    		coalprodpercap: "2.41327e+3",
    		gasprod: "3.89262e+2",
    		oilprodpercap: "1.50688e+1",
    		oilprod: "1.26227e+3",
    		gasprodpercap: "5.92287e+1",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1908,
    		coalprod: "2.59229e+4",
    		coalprodpercap: "2.36721e+3",
    		gasprod: "4.13226e+2",
    		oilprodpercap: "1.56882e+1",
    		oilprod: "1.37056e+3",
    		gasprodpercap: "6.70686e+1",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1909,
    		coalprod: "2.69334e+4",
    		coalprodpercap: "2.36341e+3",
    		gasprod: "4.37187e+2",
    		oilprodpercap: "1.62955e+1",
    		oilprod: "1.44296e+3",
    		gasprodpercap: "7.16801e+1",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1910,
    		coalprod: "2.82075e+4",
    		coalprodpercap: "2.46524e+3",
    		gasprod: "4.72767e+2",
    		oilprodpercap: "2.24465e+1",
    		oilprod: "1.56297e+3",
    		gasprodpercap: "7.36700e+1",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1911,
    		coalprod: "2.87852e+4",
    		coalprodpercap: "2.46584e+3",
    		gasprod: "4.97895e+2",
    		oilprodpercap: "2.30719e+1",
    		oilprod: "1.65101e+3",
    		gasprodpercap: "8.82001e+1",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1912,
    		coalprod: "3.01230e+4",
    		coalprodpercap: "2.58876e+3",
    		gasprod: "5.23026e+2",
    		oilprodpercap: "2.36948e+1",
    		oilprod: "1.67319e+3",
    		gasprodpercap: "9.28457e+1",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1913,
    		coalprod: "3.22924e+4",
    		coalprodpercap: "2.69715e+3",
    		gasprod: "5.48154e+2",
    		oilprodpercap: "2.43186e+1",
    		oilprod: "1.84567e+3",
    		gasprodpercap: "1.07579e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1914,
    		coalprod: "2.89256e+4",
    		coalprodpercap: "2.43607e+3",
    		gasprod: "5.73282e+2",
    		oilprodpercap: "2.49187e+1",
    		oilprod: "1.89902e+3",
    		gasprodpercap: "1.04928e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1915,
    		coalprod: "2.82781e+4",
    		coalprodpercap: "2.34178e+3",
    		gasprod: "5.98413e+2",
    		oilprodpercap: "2.54958e+1",
    		oilprod: "2.03662e+3",
    		gasprodpercap: "1.19360e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1916,
    		coalprod: "3.01987e+4",
    		coalprodpercap: "2.38870e+3",
    		gasprod: "6.23541e+2",
    		oilprodpercap: "2.60503e+1",
    		oilprod: "2.18696e+3",
    		gasprodpercap: "1.26339e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1917,
    		coalprod: "3.12396e+4",
    		coalprodpercap: "2.20073e+3",
    		gasprod: "6.48670e+2",
    		oilprodpercap: "2.65830e+1",
    		oilprod: "2.41582e+3",
    		gasprodpercap: "1.52536e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1918,
    		coalprod: "3.05162e+4",
    		coalprodpercap: "2.16611e+3",
    		gasprod: "6.73800e+2",
    		oilprodpercap: "2.71038e+1",
    		oilprod: "2.39911e+3",
    		gasprodpercap: "1.67872e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1919,
    		coalprod: "2.59305e+4",
    		coalprodpercap: "1.89959e+3",
    		gasprod: "6.98928e+2",
    		oilprodpercap: "2.76051e+1",
    		oilprod: "2.73300e+3",
    		gasprodpercap: "1.99639e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1920,
    		coalprod: "2.96339e+4",
    		coalprodpercap: "2.17375e+3",
    		gasprod: "7.24057e+2",
    		oilprodpercap: "2.80857e+1",
    		oilprod: "3.49686e+3",
    		gasprodpercap: "3.04889e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1921,
    		coalprod: "2.49147e+4",
    		coalprodpercap: "1.93514e+3",
    		gasprod: "7.49187e+2",
    		oilprodpercap: "2.85503e+1",
    		oilprod: "3.78879e+3",
    		gasprodpercap: "3.46905e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1922,
    		coalprod: "2.67372e+4",
    		coalprodpercap: "2.04145e+3",
    		gasprod: "8.04034e+2",
    		oilprodpercap: "3.32919e+1",
    		oilprod: "4.23237e+3",
    		gasprodpercap: "3.58596e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1923,
    		coalprod: "3.04857e+4",
    		coalprodpercap: "2.23094e+3",
    		gasprod: "9.41491e+2",
    		oilprodpercap: "3.80870e+1",
    		oilprod: "5.00572e+3",
    		gasprodpercap: "3.53260e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1924,
    		coalprod: "3.00755e+4",
    		coalprodpercap: "2.22356e+3",
    		gasprod: "1.07895e+3",
    		oilprodpercap: "4.27378e+1",
    		oilprod: "4.99793e+3",
    		gasprodpercap: "3.49568e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1925,
    		coalprod: "3.01104e+4",
    		coalprodpercap: "2.20856e+3",
    		gasprod: "1.21640e+3",
    		oilprodpercap: "4.72472e+1",
    		oilprod: "5.24027e+3",
    		gasprodpercap: "3.37218e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1926,
    		coalprod: "2.93452e+4",
    		coalprodpercap: "2.16387e+3",
    		gasprod: "1.35386e+3",
    		oilprodpercap: "5.16186e+1",
    		oilprod: "5.37922e+3",
    		gasprodpercap: "3.36411e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1927,
    		coalprod: "3.23672e+4",
    		coalprodpercap: "2.38774e+3",
    		gasprod: "1.49132e+3",
    		oilprodpercap: "5.58549e+1",
    		oilprod: "6.13905e+3",
    		gasprodpercap: "3.48624e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1928,
    		coalprod: "3.18161e+4",
    		coalprodpercap: "2.35013e+3",
    		gasprod: "1.62877e+3",
    		oilprodpercap: "5.99590e+1",
    		oilprod: "6.44505e+3",
    		gasprodpercap: "3.65154e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1929,
    		coalprod: "3.38553e+4",
    		coalprodpercap: "2.42339e+3",
    		gasprod: "1.72690e+3",
    		oilprodpercap: "6.54251e+1",
    		oilprod: "7.21376e+3",
    		gasprodpercap: "3.84791e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1930,
    		coalprod: "3.09773e+4",
    		coalprodpercap: "2.23750e+3",
    		gasprod: "1.81112e+3",
    		oilprodpercap: "6.85530e+1",
    		oilprod: "6.88771e+3",
    		gasprodpercap: "3.63449e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1931,
    		coalprod: "2.74328e+4",
    		coalprodpercap: "1.99501e+3",
    		gasprod: "1.89701e+3",
    		oilprodpercap: "7.16914e+1",
    		oilprod: "6.66424e+3",
    		gasprodpercap: "3.56830e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1932,
    		coalprod: "2.45084e+4",
    		coalprodpercap: "1.78060e+3",
    		gasprod: "1.98290e+3",
    		oilprodpercap: "7.48362e+1",
    		oilprod: "6.36995e+3",
    		gasprodpercap: "9.56429e+2",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1933,
    		coalprod: "2.55778e+4",
    		coalprodpercap: "1.84538e+3",
    		gasprod: "2.06880e+3",
    		oilprodpercap: "7.80021e+1",
    		oilprod: "6.95688e+3",
    		gasprodpercap: "1.31886e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1934,
    		coalprod: "2.78402e+4",
    		coalprodpercap: "1.97245e+3",
    		gasprod: "2.15469e+3",
    		oilprodpercap: "8.10995e+1",
    		oilprod: "7.36045e+3",
    		gasprodpercap: "1.68096e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1935,
    		coalprod: "2.90128e+4",
    		coalprodpercap: "2.02299e+3",
    		gasprod: "2.24058e+3",
    		oilprodpercap: "8.41294e+1",
    		oilprod: "8.05551e+3",
    		gasprodpercap: "2.08843e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1936,
    		coalprod: "3.16649e+4",
    		coalprodpercap: "2.12998e+3",
    		gasprod: "2.32647e+3",
    		oilprodpercap: "8.70929e+1",
    		oilprod: "8.77755e+3",
    		gasprodpercap: "2.56093e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1937,
    		coalprod: "3.34250e+4",
    		coalprodpercap: "2.26742e+3",
    		gasprod: "2.49563e+3",
    		oilprodpercap: "3.22038e+2",
    		oilprod: "9.99320e+3",
    		gasprodpercap: "3.30947e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1938,
    		coalprod: "3.15096e+4",
    		coalprodpercap: "2.20001e+3",
    		gasprod: "2.64988e+3",
    		oilprodpercap: "1.07090e+2",
    		oilprod: "9.76213e+3",
    		gasprodpercap: "3.70406e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1939,
    		coalprod: "3.30093e+4",
    		coalprodpercap: "2.24611e+3",
    		gasprod: "2.83945e+3",
    		oilprodpercap: "1.10951e+2",
    		oilprod: "1.01548e+4",
    		gasprodpercap: "3.77664e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1940,
    		coalprod: "3.62132e+4",
    		coalprodpercap: "2.38637e+3",
    		gasprod: "3.02903e+3",
    		oilprodpercap: "1.14614e+2",
    		oilprod: "1.04342e+4",
    		gasprodpercap: "3.88566e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1941,
    		coalprod: "3.73230e+4",
    		coalprodpercap: "2.45912e+3",
    		gasprod: "3.21861e+3",
    		oilprodpercap: "1.18077e+2",
    		oilprod: "1.06966e+4",
    		gasprodpercap: "3.09795e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1942,
    		coalprod: "3.79226e+4",
    		coalprodpercap: "2.49772e+3",
    		gasprod: "3.40819e+3",
    		oilprodpercap: "1.21306e+2",
    		oilprod: "1.01367e+4",
    		gasprodpercap: "2.42000e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1943,
    		coalprod: "3.88613e+4",
    		coalprodpercap: "2.49791e+3",
    		gasprod: "3.59777e+3",
    		oilprodpercap: "1.24295e+2",
    		oilprod: "1.09285e+4",
    		gasprodpercap: "3.04244e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1944,
    		coalprod: "3.70117e+4",
    		coalprodpercap: "2.26424e+3",
    		gasprod: "3.78734e+3",
    		oilprodpercap: "1.27155e+2",
    		oilprod: "1.25798e+4",
    		gasprodpercap: "3.60472e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1945,
    		coalprod: "2.89494e+4",
    		coalprodpercap: "1.75891e+3",
    		gasprod: "3.97692e+3",
    		oilprodpercap: "1.29891e+2",
    		oilprod: "1.26233e+4",
    		gasprodpercap: "2.31459e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1946,
    		coalprod: "3.17737e+4",
    		coalprodpercap: "2.01550e+3",
    		gasprod: "4.19532e+3",
    		oilprodpercap: "2.15762e+2",
    		oilprod: "1.35248e+4",
    		gasprodpercap: "3.04018e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1947,
    		coalprod: "3.56203e+4",
    		coalprodpercap: "2.17254e+3",
    		gasprod: "4.64306e+3",
    		oilprodpercap: "2.16071e+2",
    		oilprod: "1.49460e+4",
    		gasprodpercap: "8.09318e+3",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1948,
    		coalprod: "3.70540e+4",
    		coalprodpercap: "2.30367e+3",
    		gasprod: "5.25361e+3",
    		oilprodpercap: "2.70337e+2",
    		oilprod: "1.70517e+4",
    		gasprodpercap: "1.40703e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1949,
    		coalprod: "3.58106e+4",
    		coalprodpercap: "2.30845e+3",
    		gasprod: "5.61383e+3",
    		oilprodpercap: "1.93005e+2",
    		oilprod: "1.71919e+4",
    		gasprodpercap: "2.07118e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1950,
    		coalprod: "3.88301e+4",
    		coalprodpercap: "2.41545e+3",
    		gasprod: "6.43696e+3",
    		oilprodpercap: "2.17361e+2",
    		oilprod: "1.94846e+4",
    		gasprodpercap: "3.28255e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1951,
    		coalprod: "4.09355e+4",
    		coalprodpercap: "2.51480e+3",
    		gasprod: "7.63835e+3",
    		oilprodpercap: "3.76366e+2",
    		oilprod: "2.21888e+4",
    		gasprodpercap: "4.42723e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1952,
    		coalprod: "4.08944e+4",
    		coalprodpercap: "2.54993e+3",
    		gasprod: "8.22753e+3",
    		oilprodpercap: "3.79408e+2",
    		oilprod: "2.35820e+4",
    		gasprodpercap: "5.29640e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1953,
    		coalprod: "4.11213e+4",
    		coalprodpercap: "2.53107e+3",
    		gasprod: "8.70877e+3",
    		oilprodpercap: "4.11273e+2",
    		oilprod: "2.52225e+4",
    		gasprodpercap: "5.71201e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1954,
    		coalprod: "4.06882e+4",
    		coalprodpercap: "2.51733e+3",
    		gasprod: "9.14376e+3",
    		oilprodpercap: "4.36935e+2",
    		oilprod: "2.65898e+4",
    		gasprodpercap: "6.02396e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1955,
    		coalprod: "4.38794e+4",
    		coalprodpercap: "2.62034e+3",
    		gasprod: "9.96553e+3",
    		oilprodpercap: "4.77695e+2",
    		oilprod: "2.99077e+4",
    		gasprodpercap: "6.52160e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1956,
    		coalprod: "4.61495e+4",
    		coalprodpercap: "2.64844e+3",
    		gasprod: "1.08154e+4",
    		oilprodpercap: "4.99941e+2",
    		oilprod: "3.23909e+4",
    		gasprodpercap: "6.42939e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1957,
    		coalprod: "4.73846e+4",
    		coalprodpercap: "2.65930e+3",
    		gasprod: "1.17538e+4",
    		oilprodpercap: "5.06859e+2",
    		oilprod: "3.39612e+4",
    		gasprodpercap: "6.45463e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1958,
    		coalprod: "4.86524e+4",
    		coalprodpercap: "2.66322e+3",
    		gasprod: "1.26449e+4",
    		oilprodpercap: "5.39534e+2",
    		oilprod: "3.54947e+4",
    		gasprodpercap: "7.19925e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1959,
    		coalprod: "5.02065e+4",
    		coalprodpercap: "2.59360e+3",
    		gasprod: "1.41475e+4",
    		oilprodpercap: "8.00406e+2",
    		oilprod: "3.82745e+4",
    		gasprodpercap: "6.70752e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1960,
    		coalprod: "5.20984e+4",
    		coalprodpercap: "2.59826e+3",
    		gasprod: "1.54193e+4",
    		oilprodpercap: "1.26467e+3",
    		oilprod: "4.16242e+4",
    		gasprodpercap: "6.69470e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1961,
    		coalprod: "4.94970e+4",
    		coalprodpercap: "2.64842e+3",
    		gasprod: "1.65839e+4",
    		oilprodpercap: "1.26479e+3",
    		oilprod: "4.43556e+4",
    		gasprodpercap: "6.19211e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1962,
    		coalprod: "5.06050e+4",
    		coalprodpercap: "2.64360e+3",
    		gasprod: "1.81579e+4",
    		oilprodpercap: "1.41516e+3",
    		oilprod: "4.82055e+4",
    		gasprodpercap: "6.13409e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1963,
    		coalprod: "5.19989e+4",
    		coalprodpercap: "2.69939e+3",
    		gasprod: "1.98751e+4",
    		oilprodpercap: "1.66121e+3",
    		oilprod: "5.18973e+4",
    		gasprodpercap: "5.91695e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1964,
    		coalprod: "5.41426e+4",
    		coalprodpercap: "2.75147e+3",
    		gasprod: "2.17283e+4",
    		oilprodpercap: "1.64342e+3",
    		oilprod: "5.62781e+4",
    		gasprodpercap: "6.03793e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1965,
    		coalprod: "5.49790e+4",
    		coalprodpercap: "2.54339e+3",
    		gasprod: "2.33060e+4",
    		oilprodpercap: "1.58853e+3",
    		oilprod: "8.59187e+4",
    		gasprodpercap: "7.15417e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1966,
    		coalprod: "5.55091e+4",
    		coalprodpercap: "2.52564e+3",
    		gasprod: "2.51056e+4",
    		oilprodpercap: "1.54011e+3",
    		oilprod: "9.35702e+4",
    		gasprodpercap: "7.66495e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1967,
    		coalprod: "5.35101e+4",
    		coalprodpercap: "2.44376e+3",
    		gasprod: "2.70732e+4",
    		oilprodpercap: "1.80644e+3",
    		oilprod: "1.00307e+5",
    		gasprodpercap: "7.69883e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1968,
    		coalprod: "5.48106e+4",
    		coalprodpercap: "2.39784e+3",
    		gasprod: "2.97609e+4",
    		oilprodpercap: "2.56008e+3",
    		oilprod: "1.09508e+5",
    		gasprodpercap: "8.22094e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1969,
    		coalprod: "5.57366e+4",
    		coalprodpercap: "2.36682e+3",
    		gasprod: "3.28722e+4",
    		oilprodpercap: "3.03515e+3",
    		oilprod: "1.18353e+5",
    		gasprodpercap: "8.41860e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1970,
    		coalprod: "5.77566e+4",
    		coalprodpercap: "2.43799e+3",
    		gasprod: "3.86314e+4",
    		oilprodpercap: "3.21617e+3",
    		oilprod: "1.30957e+5",
    		gasprodpercap: "8.45396e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1971,
    		coalprod: "5.71954e+4",
    		coalprodpercap: "2.33921e+3",
    		gasprod: "4.17476e+4",
    		oilprodpercap: "3.56162e+3",
    		oilprod: "1.40845e+5",
    		gasprodpercap: "8.66288e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1972,
    		coalprod: "5.67957e+4",
    		coalprodpercap: "2.35767e+3",
    		gasprod: "4.42961e+4",
    		oilprodpercap: "3.99679e+3",
    		oilprod: "1.50331e+5",
    		gasprodpercap: "8.66555e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1973,
    		coalprod: "5.77095e+4",
    		coalprodpercap: "2.38095e+3",
    		gasprod: "4.70711e+4",
    		oilprodpercap: "5.50410e+3",
    		oilprod: "1.66315e+5",
    		gasprodpercap: "8.97141e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1974,
    		coalprod: "5.79491e+4",
    		coalprodpercap: "2.33331e+3",
    		gasprod: "4.91360e+4",
    		oilprodpercap: "6.59712e+3",
    		oilprod: "1.68291e+5",
    		gasprodpercap: "7.85309e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1975,
    		coalprod: "6.14533e+4",
    		coalprodpercap: "2.46755e+3",
    		gasprod: "5.04280e+4",
    		oilprodpercap: "7.55429e+3",
    		oilprod: "1.59346e+5",
    		gasprodpercap: "6.64790e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1976,
    		coalprod: "6.31313e+4",
    		coalprodpercap: "2.53908e+3",
    		gasprod: "5.33691e+4",
    		oilprodpercap: "7.94300e+3",
    		oilprod: "1.74623e+5",
    		gasprodpercap: "6.93584e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1977,
    		coalprod: "6.49337e+4",
    		coalprodpercap: "2.59883e+3",
    		gasprod: "5.78967e+4",
    		oilprodpercap: "8.90046e+3",
    		oilprod: "1.80264e+5",
    		gasprodpercap: "6.37892e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1978,
    		coalprod: "6.59124e+4",
    		coalprodpercap: "2.61478e+3",
    		gasprod: "5.84556e+4",
    		oilprodpercap: "9.05949e+3",
    		oilprod: "1.80638e+5",
    		gasprodpercap: "6.05829e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1979,
    		coalprod: "6.95931e+4",
    		coalprodpercap: "2.72742e+3",
    		gasprod: "6.30260e+4",
    		oilprodpercap: "1.07826e+4",
    		oilprod: "1.87648e+5",
    		gasprodpercap: "6.09219e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1980,
    		coalprod: "6.80630e+4",
    		coalprodpercap: "1.39069e+3",
    		gasprod: "6.39045e+4",
    		oilprodpercap: "5.57269e+3",
    		oilprod: "1.81502e+5",
    		gasprodpercap: "2.76135e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1981,
    		coalprod: "9.79566e+4",
    		coalprodpercap: "1.64878e+3",
    		gasprod: "6.54160e+4",
    		oilprodpercap: "5.20558e+3",
    		oilprod: "1.69268e+5",
    		gasprodpercap: "2.17730e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1982,
    		coalprod: "1.01636e+5",
    		coalprodpercap: "1.71260e+3",
    		gasprod: "6.65965e+4",
    		oilprodpercap: "5.30746e+3",
    		oilprod: "1.59476e+5",
    		gasprodpercap: "1.79657e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1983,
    		coalprod: "1.02092e+5",
    		coalprodpercap: "1.70781e+3",
    		gasprod: "6.86669e+4",
    		oilprodpercap: "5.26061e+3",
    		oilprod: "1.56631e+5",
    		gasprodpercap: "1.68338e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1984,
    		coalprod: "1.05910e+5",
    		coalprodpercap: "1.73151e+3",
    		gasprod: "7.52969e+4",
    		oilprodpercap: "5.44869e+3",
    		oilprod: "1.58971e+5",
    		gasprodpercap: "1.64806e+4",
    		renewable: 0,
    		renewablepercap: 0
    	},
    	{
    		year: 1985,
    		coalprod: "1.11377e+5",
    		coalprodpercap: "2.17306e+3",
    		gasprod: "7.87426e+4",
    		oilprodpercap: "6.78354e+3",
    		oilprod: "1.56097e+5",
    		gasprodpercap: "1.54042e+4",
    		renewable: "1.73637e+3",
    		renewablepercap: "4.96277e+3"
    	},
    	{
    		year: 1986,
    		coalprod: "1.14162e+5",
    		coalprodpercap: "2.20380e+3",
    		gasprod: "8.15652e+4",
    		oilprodpercap: "6.83469e+3",
    		oilprod: "1.66224e+5",
    		gasprodpercap: "1.60334e+4",
    		renewable: "1.75188e+3",
    		renewablepercap: "4.92023e+3"
    	},
    	{
    		year: 1987,
    		coalprod: "1.16306e+5",
    		coalprodpercap: "2.21281e+3",
    		gasprod: "8.57631e+4",
    		oilprodpercap: "6.76093e+3",
    		oilprod: "1.67139e+5",
    		gasprodpercap: "1.49689e+4",
    		renewable: "1.77756e+3",
    		renewablepercap: "5.08245e+3"
    	},
    	{
    		year: 1988,
    		coalprod: "1.18974e+5",
    		coalprodpercap: "2.21675e+3",
    		gasprod: "8.99551e+4",
    		oilprodpercap: "6.83054e+3",
    		oilprod: "1.75346e+5",
    		gasprodpercap: "1.57606e+4",
    		renewable: "1.82888e+3",
    		renewablepercap: "5.21156e+3"
    	},
    	{
    		year: 1989,
    		coalprod: "1.20608e+5",
    		coalprodpercap: "2.17577e+3",
    		gasprod: "9.33637e+4",
    		oilprodpercap: "6.89497e+3",
    		oilprod: "1.78965e+5",
    		gasprodpercap: "1.65035e+4",
    		renewable: "1.83377e+3",
    		renewablepercap: "5.13648e+3"
    	},
    	{
    		year: 1990,
    		coalprod: "1.20649e+5",
    		coalprodpercap: "2.07433e+3",
    		gasprod: "9.60083e+4",
    		oilprodpercap: "6.59376e+3",
    		oilprod: "1.81961e+5",
    		gasprodpercap: "1.65255e+4",
    		renewable: "2.09921e+3",
    		renewablepercap: "4.69190e+3"
    	},
    	{
    		year: 1991,
    		coalprod: "1.16109e+5",
    		coalprodpercap: "1.99629e+3",
    		gasprod: "9.70123e+4",
    		oilprodpercap: "6.59617e+3",
    		oilprod: "1.79843e+5",
    		gasprodpercap: "1.58188e+4",
    		renewable: "2.15286e+3",
    		renewablepercap: "4.51939e+3"
    	},
    	{
    		year: 1992,
    		coalprod: "1.16199e+5",
    		coalprodpercap: "1.97706e+3",
    		gasprod: "9.53624e+4",
    		oilprodpercap: "6.08320e+3",
    		oilprod: "1.81371e+5",
    		gasprodpercap: "1.68366e+4",
    		renewable: "2.16742e+3",
    		renewablepercap: "4.61650e+3"
    	},
    	{
    		year: 1993,
    		coalprod: "1.12586e+5",
    		coalprodpercap: "1.89111e+3",
    		gasprod: "9.59564e+4",
    		oilprodpercap: "6.34047e+3",
    		oilprod: "1.81068e+5",
    		gasprodpercap: "1.75758e+4",
    		renewable: "2.30131e+3",
    		renewablepercap: "4.78043e+3"
    	},
    	{
    		year: 1994,
    		coalprod: "1.14093e+5",
    		coalprodpercap: "1.82920e+3",
    		gasprod: "9.65429e+4",
    		oilprodpercap: "6.11819e+3",
    		oilprod: "1.83215e+5",
    		gasprodpercap: "1.79734e+4",
    		renewable: "2.31569e+3",
    		renewablepercap: "4.72365e+3"
    	},
    	{
    		year: 1995,
    		coalprod: "1.17442e+5",
    		coalprodpercap: "1.80762e+3",
    		gasprod: "9.80389e+4",
    		oilprodpercap: "6.51139e+3",
    		oilprod: "1.85873e+5",
    		gasprodpercap: "1.80610e+4",
    		renewable: "2.44694e+3",
    		renewablepercap: "4.90284e+3"
    	},
    	{
    		year: 1996,
    		coalprod: "1.19031e+5",
    		coalprodpercap: "1.80200e+3",
    		gasprod: "1.01925e+5",
    		oilprodpercap: "6.72004e+3",
    		oilprod: "1.90248e+5",
    		gasprodpercap: "1.85954e+4",
    		renewable: "2.47580e+3",
    		renewablepercap: "4.58414e+3"
    	},
    	{
    		year: 1997,
    		coalprod: "1.20168e+5",
    		coalprodpercap: "1.85237e+3",
    		gasprod: "1.01696e+5",
    		oilprodpercap: "6.88898e+3",
    		oilprod: "1.95206e+5",
    		gasprodpercap: "1.89929e+4",
    		renewable: "2.52995e+3",
    		renewablepercap: "4.78935e+3"
    	},
    	{
    		year: 1998,
    		coalprod: "1.17715e+5",
    		coalprodpercap: "1.82816e+3",
    		gasprod: "1.04396e+5",
    		oilprodpercap: "6.89496e+3",
    		oilprod: "2.00730e+5",
    		gasprodpercap: "1.88147e+4",
    		renewable: "2.55463e+3",
    		renewablepercap: "5.04436e+3"
    	},
    	{
    		year: 1999,
    		coalprod: "1.18018e+5",
    		coalprodpercap: "1.76555e+3",
    		gasprod: "1.07421e+5",
    		oilprodpercap: "7.40353e+3",
    		oilprod: "1.96669e+5",
    		gasprodpercap: "1.81056e+4",
    		renewable: "2.57614e+3",
    		renewablepercap: "5.18473e+3"
    	},
    	{
    		year: 2000,
    		coalprod: "1.20742e+5",
    		coalprodpercap: "1.81878e+3",
    		gasprod: "1.11453e+5",
    		oilprodpercap: "8.08512e+3",
    		oilprod: "2.06537e+5",
    		gasprodpercap: "1.89318e+4",
    		renewable: "2.63221e+3",
    		renewablepercap: "5.53135e+3"
    	},
    	{
    		year: 2001,
    		coalprod: "1.26048e+5",
    		coalprodpercap: "1.87812e+3",
    		gasprod: "1.13798e+5",
    		oilprodpercap: "8.34305e+3",
    		oilprod: "2.06029e+5",
    		gasprodpercap: "1.85907e+4",
    		renewable: "2.57745e+3",
    		renewablepercap: "5.28144e+3"
    	},
    	{
    		year: 2002,
    		coalprod: "1.28220e+5",
    		coalprodpercap: "1.85426e+3",
    		gasprod: "1.17165e+5",
    		oilprodpercap: "8.65504e+3",
    		oilprod: "2.02761e+5",
    		gasprodpercap: "1.76084e+4",
    		renewable: "2.63486e+3",
    		renewablepercap: "5.27510e+3"
    	},
    	{
    		year: 2003,
    		coalprod: "1.39144e+5",
    		coalprodpercap: "1.90052e+3",
    		gasprod: "1.21683e+5",
    		oilprodpercap: "9.08985e+3",
    		oilprod: "2.12802e+5",
    		gasprodpercap: "1.83944e+4",
    		renewable: "2.65301e+3",
    		renewablepercap: "4.94464e+3"
    	},
    	{
    		year: 2004,
    		coalprod: "1.51658e+5",
    		coalprodpercap: "1.94137e+3",
    		gasprod: "1.26465e+5",
    		oilprodpercap: "9.49605e+3",
    		oilprod: "2.25553e+5",
    		gasprodpercap: "1.88679e+4",
    		renewable: "2.87562e+3",
    		renewablepercap: "5.20901e+3"
    	},
    	{
    		year: 2005,
    		coalprod: "1.62229e+5",
    		coalprodpercap: "1.94799e+3",
    		gasprod: "1.30425e+5",
    		oilprodpercap: "9.70893e+3",
    		oilprod: "2.29190e+5",
    		gasprodpercap: "1.83646e+4",
    		renewable: "3.01369e+3",
    		renewablepercap: "5.36766e+3"
    	},
    	{
    		year: 2006,
    		coalprod: "1.70972e+5",
    		coalprodpercap: "1.99876e+3",
    		gasprod: "1.35034e+5",
    		oilprodpercap: "9.75430e+3",
    		oilprod: "2.30748e+5",
    		gasprodpercap: "1.76758e+4",
    		renewable: "3.15877e+3",
    		renewablepercap: "5.34956e+3"
    	},
    	{
    		year: 2007,
    		coalprod: "1.79228e+5",
    		coalprodpercap: "2.01572e+3",
    		gasprod: "1.38437e+5",
    		oilprodpercap: "9.83414e+3",
    		oilprod: "2.30431e+5",
    		gasprodpercap: "1.63420e+4",
    		renewable: "3.26149e+3",
    		renewablepercap: "5.62736e+3"
    	},
    	{
    		year: 2008,
    		coalprod: "1.85501e+5",
    		coalprodpercap: "2.04418e+3",
    		gasprod: "1.43462e+5",
    		oilprodpercap: "9.90982e+3",
    		oilprod: "2.34536e+5",
    		gasprodpercap: "1.57141e+4",
    		renewable: "3.51198e+3",
    		renewablepercap: "6.27337e+3"
    	},
    	{
    		year: 2009,
    		coalprod: "1.87417e+5",
    		coalprodpercap: "2.00273e+3",
    		gasprod: "1.38610e+5",
    		oilprodpercap: "9.41494e+3",
    		oilprod: "2.28210e+5",
    		gasprodpercap: "1.41933e+4",
    		renewable: "3.59414e+3",
    		renewablepercap: "6.15693e+3"
    	},
    	{
    		year: 2010,
    		coalprod: "1.99146e+5",
    		coalprodpercap: "2.14915e+3",
    		gasprod: "1.49957e+5",
    		oilprodpercap: "1.01345e+4",
    		oilprod: "2.33346e+5",
    		gasprodpercap: "1.38498e+4",
    		renewable: "3.86866e+3",
    		renewablepercap: "6.22017e+3"
    	},
    	{
    		year: 2011,
    		coalprod: "2.14150e+5",
    		coalprodpercap: "2.24064e+3",
    		gasprod: "1.55534e+5",
    		oilprodpercap: "1.04398e+4",
    		oilprod: "2.36563e+5",
    		gasprodpercap: "1.33155e+4",
    		renewable: "4.08157e+3",
    		renewablepercap: "6.19639e+3"
    	},
    	{
    		year: 2012,
    		coalprod: "2.19232e+5",
    		coalprodpercap: "2.25172e+3",
    		gasprod: "1.58475e+5",
    		oilprodpercap: "1.05052e+4",
    		oilprod: "2.41842e+5",
    		gasprodpercap: "1.34488e+4",
    		renewable: "4.38973e+3",
    		renewablepercap: "6.47312e+3"
    	},
    	{
    		year: 2013,
    		coalprod: "2.23316e+5",
    		coalprodpercap: "2.26650e+3",
    		gasprod: "1.60522e+5",
    		oilprodpercap: "1.03410e+4",
    		oilprod: "2.40951e+5",
    		gasprodpercap: "1.25834e+4",
    		renewable: "4.67674e+3",
    		renewablepercap: "6.51939e+3"
    	},
    	{
    		year: 2014,
    		coalprod: "2.22424e+5",
    		coalprodpercap: "2.18178e+3",
    		gasprod: "1.62815e+5",
    		oilprodpercap: "1.02433e+4",
    		oilprod: "2.45261e+5",
    		gasprodpercap: "1.20490e+4",
    		renewable: "4.95064e+3",
    		renewablepercap: "6.42468e+3"
    	},
    	{
    		year: 2015,
    		coalprod: "2.17978e+5",
    		coalprodpercap: "2.11704e+3",
    		gasprod: "1.66065e+5",
    		oilprodpercap: "1.02516e+4",
    		oilprod: "2.52853e+5",
    		gasprodpercap: "1.18106e+4",
    		renewable: "5.17142e+3",
    		renewablepercap: "6.55512e+3"
    	},
    	{
    		year: 2016,
    		coalprod: "2.07453e+5",
    		coalprodpercap: "2.12739e+3",
    		gasprod: "1.68648e+5",
    		oilprodpercap: "9.93311e+3",
    		oilprod: "2.56012e+5",
    		gasprodpercap: "1.15877e+4",
    		renewable: "5.48859e+3",
    		renewablepercap: "6.55215e+3"
    	},
    	{
    		year: 2017,
    		coalprod: "1.69898e+5",
    		coalprodpercap: "5.77117e+3",
    		gasprod: "1.35640e+5",
    		oilprodpercap: "2.80185e+4",
    		oilprod: "1.88604e+5",
    		gasprodpercap: "3.16496e+4",
    		renewable: "5.85847e+3",
    		renewablepercap: "6.65773e+3"
    	},
    	{
    		year: 2018,
    		coalprod: "1.78772e+5",
    		coalprodpercap: "5.92385e+3",
    		gasprod: "1.41750e+5",
    		oilprodpercap: "2.78800e+4",
    		oilprod: "1.92320e+5",
    		gasprodpercap: "3.11790e+4",
    		renewable: "6.24944e+3",
    		renewablepercap: "6.74049e+3"
    	},
    	{
    		year: 2019,
    		coalprod: "1.81956e+5",
    		coalprodpercap: "5.89346e+3",
    		gasprod: "1.45853e+5",
    		oilprodpercap: "2.79363e+4",
    		oilprod: "1.91272e+5",
    		gasprodpercap: "3.04259e+4",
    		renewable: "6.59880e+3",
    		renewablepercap: "6.68593e+3"
    	},
    	{
    		year: 2020,
    		coalprod: "1.74004e+5",
    		coalprodpercap: "5.11397e+3",
    		gasprod: "1.41184e+5",
    		oilprodpercap: "2.64156e+4",
    		oilprod: "1.77459e+5",
    		gasprodpercap: "2.75710e+4",
    		renewable: "7.05384e+3",
    		renewablepercap: "6.96572e+3"
    	}
    ];

    function colors(specifier) {
      var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
      while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
      return colors;
    }

    var schemeCategory10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

    /* src\components\FFRenChart.svelte generated by Svelte v3.31.0 */

    const { Object: Object_1 } = globals;
    const file$3 = "src\\components\\FFRenChart.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[25] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[28] = list[i];
    	child_ctx[30] = i;
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[31] = list[i];
    	child_ctx[30] = i;
    	return child_ctx;
    }

    // (127:12) {#each seriesData as sData, i}
    function create_each_block_2(ctx) {
    	let path;
    	let path_d_value;
    	let path_fill_value;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", path_d_value = /*areaPath*/ ctx[2](/*sData*/ ctx[31]));
    			attr_dev(path, "fill", path_fill_value = schemeCategory10[/*i*/ ctx[30]]);
    			attr_dev(path, "class", "path");
    			add_location(path, file$3, 127, 16, 4029);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*areaPath, seriesData*/ 5 && path_d_value !== (path_d_value = /*areaPath*/ ctx[2](/*sData*/ ctx[31]))) {
    				attr_dev(path, "d", path_d_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(127:12) {#each seriesData as sData, i}",
    		ctx
    	});

    	return block;
    }

    // (145:12) {#each seriesData as sdtt, i}
    function create_each_block_1(ctx) {
    	let text_1;
    	let t_value = /*getTooltipText*/ ctx[14](/*sdtt*/ ctx[28], /*i*/ ctx[30]) + "";
    	let t;
    	let text_1_x_value;
    	let text_1_text_anchor_value;
    	let text_1_dy_value;

    	const block = {
    		c: function create() {
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(text_1, "class", "tt-indicator");

    			attr_dev(text_1, "x", text_1_x_value = /*isCursorOnRight*/ ctx[5]
    			? /*mouseX*/ ctx[6] - 10
    			: /*mouseX*/ ctx[6] + 10);

    			attr_dev(text_1, "y", "40");
    			attr_dev(text_1, "text-anchor", text_1_text_anchor_value = /*isCursorOnRight*/ ctx[5] ? "end" : "start");
    			attr_dev(text_1, "dy", text_1_dy_value = (/*i*/ ctx[30] + 1) * 20);
    			attr_dev(text_1, "visibility", /*ttVisibility*/ ctx[1]);
    			add_location(text_1, file$3, 145, 16, 4612);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, text_1, anchor);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*seriesData*/ 1 && t_value !== (t_value = /*getTooltipText*/ ctx[14](/*sdtt*/ ctx[28], /*i*/ ctx[30]) + "")) set_data_dev(t, t_value);

    			if (dirty[0] & /*isCursorOnRight, mouseX*/ 96 && text_1_x_value !== (text_1_x_value = /*isCursorOnRight*/ ctx[5]
    			? /*mouseX*/ ctx[6] - 10
    			: /*mouseX*/ ctx[6] + 10)) {
    				attr_dev(text_1, "x", text_1_x_value);
    			}

    			if (dirty[0] & /*isCursorOnRight*/ 32 && text_1_text_anchor_value !== (text_1_text_anchor_value = /*isCursorOnRight*/ ctx[5] ? "end" : "start")) {
    				attr_dev(text_1, "text-anchor", text_1_text_anchor_value);
    			}

    			if (dirty[0] & /*ttVisibility*/ 2) {
    				attr_dev(text_1, "visibility", /*ttVisibility*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(text_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(145:12) {#each seriesData as sdtt, i}",
    		ctx
    	});

    	return block;
    }

    // (170:12) {#each seriesData as sdpt}
    function create_each_block$1(ctx) {
    	let circle;
    	let circle_cx_value;
    	let circle_cy_value;

    	const block = {
    		c: function create() {
    			circle = svg_element("circle");
    			attr_dev(circle, "r", "5");
    			attr_dev(circle, "cx", circle_cx_value = /*pointX*/ ctx[8](/*sdpt*/ ctx[25]));
    			attr_dev(circle, "cy", circle_cy_value = /*pointY*/ ctx[9](/*sdpt*/ ctx[25]));
    			attr_dev(circle, "stroke", "#000000");
    			attr_dev(circle, "fill", "none");
    			attr_dev(circle, "visibility", /*ttVisibility*/ ctx[1]);
    			add_location(circle, file$3, 170, 16, 5435);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, circle, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*pointX, seriesData*/ 257 && circle_cx_value !== (circle_cx_value = /*pointX*/ ctx[8](/*sdpt*/ ctx[25]))) {
    				attr_dev(circle, "cx", circle_cx_value);
    			}

    			if (dirty[0] & /*pointY, seriesData*/ 513 && circle_cy_value !== (circle_cy_value = /*pointY*/ ctx[9](/*sdpt*/ ctx[25]))) {
    				attr_dev(circle, "cy", circle_cy_value);
    			}

    			if (dirty[0] & /*ttVisibility*/ 2) {
    				attr_dev(circle, "visibility", /*ttVisibility*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(circle);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(170:12) {#each seriesData as sdpt}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let div;
    	let h3;
    	let t1;
    	let svg;
    	let g0;
    	let g1;
    	let text_1;
    	let t2;
    	let text_1_x_value;
    	let text_1_text_anchor_value;
    	let g2;
    	let line;
    	let line_x__value;
    	let line_x__value_1;
    	let g3;
    	let svg_viewBox_value;
    	let mounted;
    	let dispose;
    	let each_value_2 = /*seriesData*/ ctx[0];
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	let each_value_1 = /*seriesData*/ ctx[0];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let each_value = /*seriesData*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			h3.textContent = "Renewable energy production remains insignificant compared to total fossil fuel production";
    			t1 = space();
    			svg = svg_element("svg");
    			g0 = svg_element("g");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			g1 = svg_element("g");
    			text_1 = svg_element("text");
    			t2 = text(/*year*/ ctx[4]);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			g2 = svg_element("g");
    			line = svg_element("line");
    			g3 = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			add_location(h3, file$3, 116, 4, 3596);
    			attr_dev(g0, "class", "paths-group");
    			add_location(g0, file$3, 125, 8, 3944);
    			attr_dev(text_1, "class", "tt-year");

    			attr_dev(text_1, "x", text_1_x_value = /*isCursorOnRight*/ ctx[5]
    			? /*mouseX*/ ctx[6] - 10
    			: /*mouseX*/ ctx[6] + 10);

    			attr_dev(text_1, "y", "15");
    			attr_dev(text_1, "text-anchor", text_1_text_anchor_value = /*isCursorOnRight*/ ctx[5] ? "end" : "start");
    			attr_dev(text_1, "visibility", /*ttVisibility*/ ctx[1]);
    			add_location(text_1, file$3, 135, 12, 4256);
    			attr_dev(g1, "class", "tooltip");
    			add_location(g1, file$3, 134, 8, 4223);
    			attr_dev(line, "x1", line_x__value = /*mouseX*/ ctx[6] - 2.5);
    			attr_dev(line, "x2", line_x__value_1 = /*mouseY*/ ctx[7] - 2.5);
    			attr_dev(line, "y1", "0");
    			attr_dev(line, "y2", /*yMax*/ ctx[3]);
    			attr_dev(line, "stroke", "#000000");
    			attr_dev(line, "opacity", "0.5");
    			attr_dev(line, "visibility", /*ttVisibility*/ ctx[1]);
    			add_location(line, file$3, 158, 12, 5078);
    			attr_dev(g2, "class", "vline");
    			add_location(g2, file$3, 157, 8, 5047);
    			attr_dev(g3, "class", "points-group");
    			add_location(g3, file$3, 168, 8, 5353);
    			attr_dev(svg, "viewBox", svg_viewBox_value = "0 0 " + (width - /*margin*/ ctx[10].right - /*margin*/ ctx[10].left) + " " + height);
    			attr_dev(svg, "width", width);
    			attr_dev(svg, "height", height);
    			add_location(svg, file$3, 117, 4, 3701);
    			attr_dev(div, "class", "area-chart svelte-1rihjai");
    			add_location(div, file$3, 115, 0, 3566);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(div, t1);
    			append_dev(div, svg);
    			append_dev(svg, g0);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(g0, null);
    			}

    			append_dev(svg, g1);
    			append_dev(g1, text_1);
    			append_dev(text_1, t2);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(g1, null);
    			}

    			append_dev(svg, g2);
    			append_dev(g2, line);
    			append_dev(svg, g3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g3, null);
    			}

    			if (!mounted) {
    				dispose = [
    					listen_dev(svg, "mouseover", /*handleMouseOver*/ ctx[11], false, false, false),
    					listen_dev(svg, "mousemove", /*handleMouseMove*/ ctx[12], false, false, false),
    					listen_dev(svg, "mouseout", /*handleMouseOut*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*areaPath, seriesData*/ 5) {
    				each_value_2 = /*seriesData*/ ctx[0];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_2(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(g0, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_2.length;
    			}

    			if (dirty[0] & /*year*/ 16) set_data_dev(t2, /*year*/ ctx[4]);

    			if (dirty[0] & /*isCursorOnRight, mouseX*/ 96 && text_1_x_value !== (text_1_x_value = /*isCursorOnRight*/ ctx[5]
    			? /*mouseX*/ ctx[6] - 10
    			: /*mouseX*/ ctx[6] + 10)) {
    				attr_dev(text_1, "x", text_1_x_value);
    			}

    			if (dirty[0] & /*isCursorOnRight*/ 32 && text_1_text_anchor_value !== (text_1_text_anchor_value = /*isCursorOnRight*/ ctx[5] ? "end" : "start")) {
    				attr_dev(text_1, "text-anchor", text_1_text_anchor_value);
    			}

    			if (dirty[0] & /*ttVisibility*/ 2) {
    				attr_dev(text_1, "visibility", /*ttVisibility*/ ctx[1]);
    			}

    			if (dirty[0] & /*isCursorOnRight, mouseX, ttVisibility, getTooltipText, seriesData*/ 16483) {
    				each_value_1 = /*seriesData*/ ctx[0];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(g1, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty[0] & /*mouseX*/ 64 && line_x__value !== (line_x__value = /*mouseX*/ ctx[6] - 2.5)) {
    				attr_dev(line, "x1", line_x__value);
    			}

    			if (dirty[0] & /*mouseY*/ 128 && line_x__value_1 !== (line_x__value_1 = /*mouseY*/ ctx[7] - 2.5)) {
    				attr_dev(line, "x2", line_x__value_1);
    			}

    			if (dirty[0] & /*yMax*/ 8) {
    				attr_dev(line, "y2", /*yMax*/ ctx[3]);
    			}

    			if (dirty[0] & /*ttVisibility*/ 2) {
    				attr_dev(line, "visibility", /*ttVisibility*/ ctx[1]);
    			}

    			if (dirty[0] & /*pointX, seriesData, pointY, ttVisibility*/ 771) {
    				each_value = /*seriesData*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g3, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const width = 700;
    const height = 500;

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("FFRenChart", slots, []);
    	const indicators = Object.keys(ffRenData[0]).slice(1).filter(ind => !ind.includes("percap"));
    	const indicatorsPercap = Object.keys(ffRenData[0]).slice(1).filter(ind => ind.includes("percap") && !ind.includes("renewable"));
    	const margin = { top: 20, right: 20, bottom: 20, left: 50 };
    	let togglePercap = false;
    	let indicatorsUsed = !togglePercap ? indicators : indicatorsPercap;
    	let ttVisibility = "hidden";

    	function handleMouseOver() {
    		$$invalidate(1, ttVisibility = "visible");
    	}

    	function handleMouseMove(e) {
    		const { pageX, pageY } = e;
    		$$invalidate(6, mouseX = pageX);
    		$$invalidate(7, mouseY = pageY);
    		$$invalidate(1, ttVisibility = "visible");
    		$$invalidate(4, year = xRev(pageX).getFullYear());
    		$$invalidate(18, sIndex = sYears.indexOf(year));
    		$$invalidate(5, isCursorOnRight = pageX > x(width / 2));
    	}

    	function handleMouseOut() {
    		$$invalidate(1, ttVisibility = "hidden");
    	}

    	function getTooltipText(sdtt, i) {
    		const ind = indicatorsUsed[i];
    		const valFixed = sdtt[sIndex].data[ind].toFixed(0);
    		const valRound = Math.round(valFixed / 100) * 100;
    		const perc = (valFixed / sdtt[sIndex].data.total * 100).toPrecision(2);
    		return `${ind}: ${valRound} (${perc}%)`;
    	}

    	const writable_props = [];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FFRenChart> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		aq,
    		ffRenData,
    		area,
    		stack,
    		scaleLinear: linear$1,
    		scaleUtc: utcTime,
    		max,
    		extent,
    		schemeCategory10,
    		indicators,
    		indicatorsPercap,
    		width,
    		height,
    		margin,
    		togglePercap,
    		indicatorsUsed,
    		ttVisibility,
    		handleMouseOver,
    		handleMouseMove,
    		handleMouseOut,
    		getTooltipText,
    		areaData,
    		x,
    		y,
    		seriesData,
    		areaPath,
    		yMax,
    		xRev,
    		sYears,
    		year,
    		sIndex,
    		isCursorOnRight,
    		mouseX,
    		mouseY,
    		pointX,
    		pointY
    	});

    	$$self.$inject_state = $$props => {
    		if ("togglePercap" in $$props) $$invalidate(23, togglePercap = $$props.togglePercap);
    		if ("indicatorsUsed" in $$props) $$invalidate(24, indicatorsUsed = $$props.indicatorsUsed);
    		if ("ttVisibility" in $$props) $$invalidate(1, ttVisibility = $$props.ttVisibility);
    		if ("areaData" in $$props) $$invalidate(15, areaData = $$props.areaData);
    		if ("x" in $$props) $$invalidate(16, x = $$props.x);
    		if ("y" in $$props) $$invalidate(17, y = $$props.y);
    		if ("seriesData" in $$props) $$invalidate(0, seriesData = $$props.seriesData);
    		if ("areaPath" in $$props) $$invalidate(2, areaPath = $$props.areaPath);
    		if ("yMax" in $$props) $$invalidate(3, yMax = $$props.yMax);
    		if ("xRev" in $$props) xRev = $$props.xRev;
    		if ("sYears" in $$props) sYears = $$props.sYears;
    		if ("year" in $$props) $$invalidate(4, year = $$props.year);
    		if ("sIndex" in $$props) $$invalidate(18, sIndex = $$props.sIndex);
    		if ("isCursorOnRight" in $$props) $$invalidate(5, isCursorOnRight = $$props.isCursorOnRight);
    		if ("mouseX" in $$props) $$invalidate(6, mouseX = $$props.mouseX);
    		if ("mouseY" in $$props) $$invalidate(7, mouseY = $$props.mouseY);
    		if ("pointX" in $$props) $$invalidate(8, pointX = $$props.pointX);
    		if ("pointY" in $$props) $$invalidate(9, pointY = $$props.pointY);
    	};

    	let areaData;
    	let x;
    	let y;
    	let seriesData;
    	let areaPath;
    	let yMax;
    	let xRev;
    	let sYears;
    	let year;
    	let sIndex;
    	let isCursorOnRight;
    	let mouseX;
    	let mouseY;
    	let pointX;
    	let pointY;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*areaData*/ 32768) {
    			 $$invalidate(16, x = utcTime().domain(extent(areaData, d => d.date)).range([margin.left, width - margin.right]));
    		}

    		if ($$self.$$.dirty[0] & /*areaData*/ 32768) {
    			 $$invalidate(17, y = linear$1().domain([
    				0,
    				max(areaData, d => indicators.reduce(
    					(sum, ind) => {
    						return sum + d[ind];
    					},
    					0
    				))
    			]).nice().range([height - margin.bottom, margin.top]));
    		}

    		if ($$self.$$.dirty[0] & /*areaData*/ 32768) {
    			 $$invalidate(0, seriesData = stack().keys(indicatorsUsed)(areaData).map(sData => sData.map((d, i) => {
    				return { ...d, data: areaData[i] };
    			})));
    		}

    		if ($$self.$$.dirty[0] & /*x, areaData, y*/ 229376) {
    			 $$invalidate(2, areaPath = area().x((d, i) => x(areaData[i].date)).y0(d => y(d[0])).y1(d => y(d[1])));
    		}

    		if ($$self.$$.dirty[0] & /*areaData*/ 32768) {
    			 $$invalidate(3, yMax = max(areaData, d => indicatorsUsed.reduce(
    				(sum, ind) => {
    					return sum + d[ind];
    				},
    				0
    			)));
    		}

    		if ($$self.$$.dirty[0] & /*areaData*/ 32768) {
    			 xRev = utcTime().domain([margin.left, width - margin.right]).range(extent(areaData, d => d.date));
    		}

    		if ($$self.$$.dirty[0] & /*seriesData*/ 1) {
    			 sYears = seriesData[0].map(d => d.data.date.getFullYear());
    		}

    		if ($$self.$$.dirty[0] & /*x, sIndex*/ 327680) {
    			 $$invalidate(8, pointX = sdpt => x(sdpt[sIndex].data.date) || x(new Date(2000, 0, 1)));
    		}

    		if ($$self.$$.dirty[0] & /*y, sIndex*/ 393216) {
    			 $$invalidate(9, pointY = sdpt => y(sdpt[sIndex][1]) || y(0));
    		}
    	};

    	 $$invalidate(15, areaData = from(ffRenData).derive(indicatorsUsed.reduce(
    		(obj, ind) => {
    			return {
    				...obj,
    				[ind]: _escape(d => {
    					if (d[ind]) {
    						const [b, e] = d[ind].split("e");
    						return b * Math.pow(10, e);
    					} else return 0;
    				})
    			};
    		},
    		{}
    	)).derive({
    		date: _escape(d => new Date(d.year, 1, 1)),
    		total: _escape(d => indicatorsUsed.reduce(
    			(sum, ind) => {
    				return sum + d[ind];
    			},
    			0
    		))
    	}).relocate("date", { before: "year" }).select(not(!togglePercap ? indicatorsPercap : indicators, "year")).orderby("date").objects());

    	 $$invalidate(4, year = 1900);
    	 $$invalidate(18, sIndex = 0);
    	 $$invalidate(5, isCursorOnRight = false);
    	 $$invalidate(6, mouseX = 0);
    	 $$invalidate(7, mouseY = 0);

    	return [
    		seriesData,
    		ttVisibility,
    		areaPath,
    		yMax,
    		year,
    		isCursorOnRight,
    		mouseX,
    		mouseY,
    		pointX,
    		pointY,
    		margin,
    		handleMouseOver,
    		handleMouseMove,
    		handleMouseOut,
    		getTooltipText,
    		areaData,
    		x,
    		y,
    		sIndex
    	];
    }

    class FFRenChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$3, safe_not_equal, {}, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FFRenChart",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    var trendData = [
    	{
    		yr: 1950,
    		cont: "Africa",
    		coalprod: "8.23e-3",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "3.63e-2",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "0.00e+0",
    		gdp: "3.28e-3",
    		sharehh: "6.97e-1",
    		tradeopen: "3.96e-1"
    	},
    	{
    		yr: 1955,
    		cont: "Africa",
    		coalprod: "3.84e-3",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "2.38e-2",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "0.00e+0",
    		gdp: "8.13e-3",
    		sharehh: "6.59e-1",
    		tradeopen: "4.16e-1"
    	},
    	{
    		yr: 1960,
    		cont: "Africa",
    		coalprod: "2.90e-2",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "8.45e-2",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "0.00e+0",
    		gdp: "2.58e-2",
    		sharehh: "5.26e-1",
    		tradeopen: "2.35e-1"
    	},
    	{
    		yr: 1965,
    		cont: "Africa",
    		coalprod: "7.21e-2",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "1.14e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "0.00e+0",
    		gdp: "5.52e-2",
    		sharehh: "4.33e-1",
    		tradeopen: "2.42e-1"
    	},
    	{
    		yr: 1970,
    		cont: "Africa",
    		coalprod: "5.15e-2",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "4.87e-2",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "0.00e+0",
    		gdp: "1.12e-1",
    		sharehh: "4.20e-1",
    		tradeopen: "2.72e-1"
    	},
    	{
    		yr: 1975,
    		cont: "Africa",
    		coalprod: "2.00e-1",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "2.00e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "0.00e+0",
    		gdp: "1.56e-1",
    		sharehh: "2.76e-1",
    		tradeopen: "4.29e-1"
    	},
    	{
    		yr: 1980,
    		cont: "Africa",
    		coalprod: "7.23e-2",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "6.91e-2",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "9.10e-1",
    		gdp: "1.83e-1",
    		sharehh: "3.25e-1",
    		tradeopen: "3.37e-1"
    	},
    	{
    		yr: 1985,
    		cont: "Africa",
    		coalprod: "2.09e-1",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "1.33e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "7.88e-1",
    		gdp: "2.28e-1",
    		sharehh: "3.62e-1",
    		tradeopen: "2.36e-1"
    	},
    	{
    		yr: 1990,
    		cont: "Africa",
    		coalprod: "2.43e-1",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "9.51e-2",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "7.47e-1",
    		gdp: "2.39e-1",
    		sharehh: "5.05e-1",
    		tradeopen: "3.88e-1"
    	},
    	{
    		yr: 1995,
    		cont: "Africa",
    		coalprod: "1.59e-1",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "1.62e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "8.94e-1",
    		gdp: "2.19e-1",
    		sharehh: "6.69e-1",
    		tradeopen: "4.52e-1"
    	},
    	{
    		yr: 2000,
    		cont: "Africa",
    		coalprod: "2.47e-1",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "1.06e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "8.05e-1",
    		gdp: "2.99e-1",
    		sharehh: "5.99e-1",
    		tradeopen: "3.93e-1"
    	},
    	{
    		yr: 2005,
    		cont: "Africa",
    		coalprod: "1.12e-1",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "6.15e-2",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "8.93e-1",
    		gdp: "5.03e-1",
    		sharehh: "3.97e-1",
    		tradeopen: "5.54e-1"
    	},
    	{
    		yr: 2010,
    		cont: "Africa",
    		coalprod: "4.02e-2",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "1.10e-2",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "5.64e-1",
    		gdp: "7.73e-1",
    		sharehh: "6.35e-1",
    		tradeopen: "6.01e-1"
    	},
    	{
    		yr: 2015,
    		cont: "Africa",
    		coalprod: "1.13e-1",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "3.17e-2",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "6.15e-1",
    		gdp: "9.53e-1",
    		sharehh: "6.97e-1",
    		tradeopen: "6.41e-1"
    	},
    	{
    		yr: 1955,
    		cont: "Americas",
    		coalprod: "1.75e-1",
    		gasprod: "3.03e-2",
    		oilprod: "1.01e-1",
    		coalprodpc: "2.56e-1",
    		gasprodpc: "1.96e-1",
    		oilprodpc: "8.45e-2",
    		gini: "2.00e-1",
    		gdp: "1.82e-2",
    		sharehh: "7.45e-1",
    		tradeopen: "1.89e-1"
    	},
    	{
    		yr: 1960,
    		cont: "Americas",
    		coalprod: "2.01e-1",
    		gasprod: "6.72e-2",
    		oilprod: "1.75e-1",
    		coalprodpc: "2.33e-1",
    		gasprodpc: "3.89e-1",
    		oilprodpc: "1.39e-1",
    		gini: "2.11e-1",
    		gdp: "3.17e-2",
    		sharehh: "6.62e-1",
    		tradeopen: "2.59e-1"
    	},
    	{
    		yr: 1965,
    		cont: "Americas",
    		coalprod: "2.59e-1",
    		gasprod: "1.32e-1",
    		oilprod: "2.56e-1",
    		coalprodpc: "2.60e-1",
    		gasprodpc: "4.92e-1",
    		oilprodpc: "2.98e-1",
    		gini: "1.68e-1",
    		gdp: "5.87e-2",
    		sharehh: "6.80e-1",
    		tradeopen: "7.11e-2"
    	},
    	{
    		yr: 1970,
    		cont: "Americas",
    		coalprod: "3.63e-1",
    		gasprod: "1.70e-1",
    		oilprod: "3.20e-1",
    		coalprodpc: "3.29e-1",
    		gasprodpc: "4.80e-1",
    		oilprodpc: "3.25e-1",
    		gini: "6.31e-2",
    		gdp: "9.49e-2",
    		sharehh: "6.03e-1",
    		tradeopen: "1.30e-1"
    	},
    	{
    		yr: 1975,
    		cont: "Americas",
    		coalprod: "4.13e-1",
    		gasprod: "2.08e-1",
    		oilprod: "3.39e-1",
    		coalprodpc: "3.73e-1",
    		gasprodpc: "4.12e-1",
    		oilprodpc: "3.62e-1",
    		gini: "1.16e-1",
    		gdp: "1.66e-1",
    		sharehh: "4.68e-1",
    		tradeopen: "3.61e-1"
    	},
    	{
    		yr: 1980,
    		cont: "Americas",
    		coalprod: "2.60e-1",
    		gasprod: "3.02e-1",
    		oilprod: "5.69e-1",
    		coalprodpc: "2.73e-1",
    		gasprodpc: "7.43e-1",
    		oilprodpc: "4.33e-1",
    		gini: "1.31e-1",
    		gdp: "2.23e-1",
    		sharehh: "4.52e-1",
    		tradeopen: "4.10e-1"
    	},
    	{
    		yr: 1985,
    		cont: "Americas",
    		coalprod: "4.25e-1",
    		gasprod: "2.90e-1",
    		oilprod: "6.06e-1",
    		coalprodpc: "4.24e-1",
    		gasprodpc: "7.31e-1",
    		oilprodpc: "4.13e-1",
    		gini: "2.08e-1",
    		gdp: "2.42e-1",
    		sharehh: "3.07e-1",
    		tradeopen: "3.80e-1"
    	},
    	{
    		yr: 1990,
    		cont: "Americas",
    		coalprod: "3.61e-1",
    		gasprod: "4.03e-1",
    		oilprod: "5.61e-1",
    		coalprodpc: "3.05e-1",
    		gasprodpc: "5.66e-1",
    		oilprodpc: "4.42e-1",
    		gini: "2.19e-1",
    		gdp: "2.93e-1",
    		sharehh: "4.95e-1",
    		tradeopen: "3.02e-1"
    	},
    	{
    		yr: 1995,
    		cont: "Americas",
    		coalprod: "3.44e-1",
    		gasprod: "4.82e-1",
    		oilprod: "5.45e-1",
    		coalprodpc: "3.33e-1",
    		gasprodpc: "5.47e-1",
    		oilprodpc: "5.08e-1",
    		gini: "3.49e-1",
    		gdp: "4.18e-1",
    		sharehh: "3.46e-1",
    		tradeopen: "5.09e-1"
    	},
    	{
    		yr: 2000,
    		cont: "Americas",
    		coalprod: "3.91e-1",
    		gasprod: "4.93e-1",
    		oilprod: "4.88e-1",
    		coalprodpc: "3.22e-1",
    		gasprodpc: "5.47e-1",
    		oilprodpc: "5.49e-1",
    		gini: "4.93e-1",
    		gdp: "4.90e-1",
    		sharehh: "3.03e-1",
    		tradeopen: "6.44e-1"
    	},
    	{
    		yr: 2005,
    		cont: "Americas",
    		coalprod: "5.13e-1",
    		gasprod: "5.04e-1",
    		oilprod: "5.31e-1",
    		coalprodpc: "3.12e-1",
    		gasprodpc: "5.99e-1",
    		oilprodpc: "5.30e-1",
    		gini: "4.73e-1",
    		gdp: "5.29e-1",
    		sharehh: "2.95e-1",
    		tradeopen: "8.09e-1"
    	},
    	{
    		yr: 2010,
    		cont: "Americas",
    		coalprod: "5.92e-1",
    		gasprod: "7.17e-1",
    		oilprod: "7.04e-1",
    		coalprodpc: "2.72e-1",
    		gasprodpc: "6.34e-1",
    		oilprodpc: "6.75e-1",
    		gini: "6.70e-1",
    		gdp: "7.82e-1",
    		sharehh: "1.54e-1",
    		tradeopen: "7.70e-1"
    	},
    	{
    		yr: 2015,
    		cont: "Americas",
    		coalprod: "7.13e-1",
    		gasprod: "8.76e-1",
    		oilprod: "7.19e-1",
    		coalprodpc: "2.51e-1",
    		gasprodpc: "6.26e-1",
    		oilprodpc: "8.05e-1",
    		gini: "4.42e-1",
    		gdp: "9.11e-1",
    		sharehh: "1.89e-1",
    		tradeopen: "7.58e-1"
    	},
    	{
    		yr: 1955,
    		cont: "Asia",
    		coalprod: "2.54e-2",
    		gasprod: "6.83e-4",
    		oilprod: "3.70e-2",
    		coalprodpc: "6.94e-2",
    		gasprodpc: "6.93e-2",
    		oilprodpc: "1.61e-3",
    		gini: "4.06e-1",
    		gdp: "4.48e-3",
    		sharehh: "9.01e-1",
    		tradeopen: "9.16e-2"
    	},
    	{
    		yr: 1960,
    		cont: "Asia",
    		coalprod: "6.36e-2",
    		gasprod: "3.41e-3",
    		oilprod: "6.99e-2",
    		coalprodpc: "1.70e-1",
    		gasprodpc: "1.28e-1",
    		oilprodpc: "9.33e-3",
    		gini: "3.89e-1",
    		gdp: "9.71e-3",
    		sharehh: "7.23e-1",
    		tradeopen: "9.50e-2"
    	},
    	{
    		yr: 1965,
    		cont: "Asia",
    		coalprod: "7.73e-2",
    		gasprod: "9.80e-3",
    		oilprod: "2.86e-1",
    		coalprodpc: "1.52e-1",
    		gasprodpc: "3.42e-1",
    		oilprodpc: "2.42e-2",
    		gini: "3.75e-1",
    		gdp: "2.24e-2",
    		sharehh: "6.99e-1",
    		tradeopen: "1.38e-1"
    	},
    	{
    		yr: 1970,
    		cont: "Asia",
    		coalprod: "7.33e-2",
    		gasprod: "1.47e-2",
    		oilprod: "4.49e-1",
    		coalprodpc: "1.42e-1",
    		gasprodpc: "3.69e-1",
    		oilprodpc: "3.10e-2",
    		gini: "3.81e-1",
    		gdp: "3.66e-2",
    		sharehh: "5.87e-1",
    		tradeopen: "9.18e-2"
    	},
    	{
    		yr: 1975,
    		cont: "Asia",
    		coalprod: "1.22e-1",
    		gasprod: "4.60e-2",
    		oilprod: "5.00e-1",
    		coalprodpc: "1.86e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "7.14e-2",
    		gini: "3.67e-1",
    		gdp: "6.35e-2",
    		sharehh: "4.23e-1",
    		tradeopen: "1.21e-1"
    	},
    	{
    		yr: 1980,
    		cont: "Asia",
    		coalprod: "1.33e-1",
    		gasprod: "1.19e-1",
    		oilprod: "4.97e-1",
    		coalprodpc: "2.17e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "2.30e-1",
    		gini: "7.02e-1",
    		gdp: "7.66e-2",
    		sharehh: "4.92e-1",
    		tradeopen: "2.91e-1"
    	},
    	{
    		yr: 1985,
    		cont: "Asia",
    		coalprod: "2.28e-1",
    		gasprod: "9.69e-2",
    		oilprod: "5.00e-1",
    		coalprodpc: "2.53e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "2.72e-1",
    		gini: "2.78e-1",
    		gdp: "9.94e-2",
    		sharehh: "3.74e-1",
    		tradeopen: "2.13e-1"
    	},
    	{
    		yr: 1990,
    		cont: "Asia",
    		coalprod: "1.25e-1",
    		gasprod: "2.44e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "1.85e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "4.66e-1",
    		gini: "6.25e-1",
    		gdp: "1.91e-1",
    		sharehh: "4.10e-1",
    		tradeopen: "3.35e-1"
    	},
    	{
    		yr: 1995,
    		cont: "Asia",
    		coalprod: "1.55e-1",
    		gasprod: "3.66e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "1.63e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "4.46e-1",
    		gini: "8.07e-1",
    		gdp: "2.23e-1",
    		sharehh: "3.14e-1",
    		tradeopen: "4.99e-1"
    	},
    	{
    		yr: 2000,
    		cont: "Asia",
    		coalprod: "1.38e-1",
    		gasprod: "5.00e-1",
    		oilprod: "5.45e-1",
    		coalprodpc: "1.54e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "6.68e-1",
    		gdp: "2.60e-1",
    		sharehh: "3.96e-1",
    		tradeopen: "6.11e-1"
    	},
    	{
    		yr: 2005,
    		cont: "Asia",
    		coalprod: "2.64e-1",
    		gasprod: "5.07e-1",
    		oilprod: "6.33e-1",
    		coalprodpc: "3.05e-1",
    		gasprodpc: "5.91e-1",
    		oilprodpc: "5.92e-1",
    		gini: "8.13e-1",
    		gdp: "4.06e-1",
    		sharehh: "4.65e-1",
    		tradeopen: "7.13e-1"
    	},
    	{
    		yr: 2010,
    		cont: "Asia",
    		coalprod: "5.37e-1",
    		gasprod: "6.53e-1",
    		oilprod: "6.04e-1",
    		coalprodpc: "5.22e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "6.57e-1",
    		gini: "7.32e-1",
    		gdp: "6.61e-1",
    		sharehh: "4.05e-1",
    		tradeopen: "6.35e-1"
    	},
    	{
    		yr: 2015,
    		cont: "Asia",
    		coalprod: "7.06e-1",
    		gasprod: "6.64e-1",
    		oilprod: "5.73e-1",
    		coalprodpc: "6.17e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.94e-1",
    		gini: "3.67e-1",
    		gdp: "8.54e-1",
    		sharehh: "4.83e-1",
    		tradeopen: "6.22e-1"
    	},
    	{
    		yr: 1955,
    		cont: "Europe",
    		coalprod: "4.45e-1",
    		gasprod: "3.72e-2",
    		oilprod: "1.96e-1",
    		coalprodpc: "5.01e-1",
    		gasprodpc: "2.60e-1",
    		oilprodpc: "5.81e-2",
    		gini: "0.00e+0",
    		gdp: "3.08e-2",
    		sharehh: "7.81e-1",
    		tradeopen: "1.01e-1"
    	},
    	{
    		yr: 1960,
    		cont: "Europe",
    		coalprod: "5.99e-1",
    		gasprod: "5.82e-2",
    		oilprod: "3.58e-1",
    		coalprodpc: "5.95e-1",
    		gasprodpc: "4.12e-1",
    		oilprodpc: "6.69e-2",
    		gini: "0.00e+0",
    		gdp: "6.48e-2",
    		sharehh: "6.95e-1",
    		tradeopen: "1.48e-1"
    	},
    	{
    		yr: 1965,
    		cont: "Europe",
    		coalprod: "6.51e-1",
    		gasprod: "1.62e-1",
    		oilprod: "4.39e-1",
    		coalprodpc: "5.66e-1",
    		gasprodpc: "4.83e-1",
    		oilprodpc: "1.76e-1",
    		gini: "0.00e+0",
    		gdp: "1.19e-1",
    		sharehh: "4.63e-1",
    		tradeopen: "1.51e-1"
    	},
    	{
    		yr: 1970,
    		cont: "Europe",
    		coalprod: "4.16e-1",
    		gasprod: "4.77e-1",
    		oilprod: "3.39e-1",
    		coalprodpc: "4.20e-1",
    		gasprodpc: "4.14e-1",
    		oilprodpc: "4.68e-1",
    		gini: "0.00e+0",
    		gdp: "1.69e-1",
    		sharehh: "3.08e-1",
    		tradeopen: "2.04e-1"
    	},
    	{
    		yr: 1975,
    		cont: "Europe",
    		coalprod: "3.17e-1",
    		gasprod: "4.85e-1",
    		oilprod: "2.57e-1",
    		coalprodpc: "3.36e-1",
    		gasprodpc: "2.66e-1",
    		oilprodpc: "5.00e-1",
    		gini: "0.00e+0",
    		gdp: "2.29e-1",
    		sharehh: "4.25e-1",
    		tradeopen: "2.74e-1"
    	},
    	{
    		yr: 1980,
    		cont: "Europe",
    		coalprod: "3.43e-1",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "2.82e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "8.28e-1",
    		gdp: "2.93e-1",
    		sharehh: "4.71e-1",
    		tradeopen: "4.02e-1"
    	},
    	{
    		yr: 1985,
    		cont: "Europe",
    		coalprod: "4.42e-1",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "3.94e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "8.55e-1",
    		gdp: "2.97e-1",
    		sharehh: "3.53e-1",
    		tradeopen: "4.75e-1"
    	},
    	{
    		yr: 1990,
    		cont: "Europe",
    		coalprod: "3.24e-1",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "2.60e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "8.63e-1",
    		gdp: "4.16e-1",
    		sharehh: "5.03e-1",
    		tradeopen: "4.15e-1"
    	},
    	{
    		yr: 1995,
    		cont: "Europe",
    		coalprod: "1.56e-1",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "1.36e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "8.70e-1",
    		gdp: "4.30e-1",
    		sharehh: "4.00e-1",
    		tradeopen: "4.21e-1"
    	},
    	{
    		yr: 2000,
    		cont: "Europe",
    		coalprod: "2.02e-1",
    		gasprod: "5.00e-1",
    		oilprod: "5.00e-1",
    		coalprodpc: "1.97e-1",
    		gasprodpc: "5.00e-1",
    		oilprodpc: "5.00e-1",
    		gini: "8.58e-1",
    		gdp: "5.25e-1",
    		sharehh: "4.15e-1",
    		tradeopen: "6.42e-1"
    	},
    	{
    		yr: 2005,
    		cont: "Europe",
    		coalprod: "1.60e-1",
    		gasprod: "5.00e-1",
    		oilprod: "4.76e-1",
    		coalprodpc: "1.50e-1",
    		gasprodpc: "4.64e-1",
    		oilprodpc: "5.00e-1",
    		gini: "9.21e-1",
    		gdp: "7.01e-1",
    		sharehh: "4.01e-1",
    		tradeopen: "6.54e-1"
    	},
    	{
    		yr: 2010,
    		cont: "Europe",
    		coalprod: "1.50e-1",
    		gasprod: "5.00e-1",
    		oilprod: "3.74e-1",
    		coalprodpc: "1.40e-1",
    		gasprodpc: "3.96e-1",
    		oilprodpc: "5.00e-1",
    		gini: "9.19e-1",
    		gdp: "8.50e-1",
    		sharehh: "4.40e-1",
    		tradeopen: "7.33e-1"
    	},
    	{
    		yr: 2015,
    		cont: "Europe",
    		coalprod: "6.35e-2",
    		gasprod: "3.65e-1",
    		oilprod: "3.34e-1",
    		coalprodpc: "5.74e-2",
    		gasprodpc: "3.21e-1",
    		oilprodpc: "3.52e-1",
    		gini: "9.23e-1",
    		gdp: "9.12e-1",
    		sharehh: "2.35e-1",
    		tradeopen: "9.31e-1"
    	},
    	{
    		yr: 1950,
    		cont: "Oceania",
    		coalprod: "1.44e-1",
    		gasprod: "2.50e-1",
    		oilprod: "2.50e-1",
    		coalprodpc: "2.38e-1",
    		gasprodpc: "2.50e-1",
    		oilprodpc: "2.50e-1",
    		gini: "6.31e-1",
    		gdp: "7.19e-3",
    		sharehh: "6.32e-1",
    		tradeopen: "6.72e-1"
    	},
    	{
    		yr: 1955,
    		cont: "Oceania",
    		coalprod: "1.40e-1",
    		gasprod: "2.50e-1",
    		oilprod: "2.50e-1",
    		coalprodpc: "1.85e-1",
    		gasprodpc: "2.50e-1",
    		oilprodpc: "2.50e-1",
    		gini: "3.55e-1",
    		gdp: "2.57e-2",
    		sharehh: "6.23e-1",
    		tradeopen: "3.52e-1"
    	},
    	{
    		yr: 1960,
    		cont: "Oceania",
    		coalprod: "1.89e-1",
    		gasprod: "2.50e-1",
    		oilprod: "2.50e-1",
    		coalprodpc: "2.17e-1",
    		gasprodpc: "2.50e-1",
    		oilprodpc: "2.50e-1",
    		gini: "4.25e-1",
    		gdp: "5.91e-2",
    		sharehh: "6.23e-1",
    		tradeopen: "1.68e-1"
    	},
    	{
    		yr: 1965,
    		cont: "Oceania",
    		coalprod: "1.68e-1",
    		gasprod: "2.50e-1",
    		oilprod: "2.55e-1",
    		coalprodpc: "1.54e-1",
    		gasprodpc: "2.58e-1",
    		oilprodpc: "2.50e-1",
    		gini: "4.04e-1",
    		gdp: "1.02e-1",
    		sharehh: "5.83e-1",
    		tradeopen: "1.59e-1"
    	},
    	{
    		yr: 1970,
    		cont: "Oceania",
    		coalprod: "1.58e-1",
    		gasprod: "2.56e-1",
    		oilprod: "3.67e-1",
    		coalprodpc: "1.24e-1",
    		gasprodpc: "4.24e-1",
    		oilprodpc: "2.62e-1",
    		gini: "3.47e-1",
    		gdp: "1.41e-1",
    		sharehh: "3.93e-1",
    		tradeopen: "1.55e-1"
    	},
    	{
    		yr: 1975,
    		cont: "Oceania",
    		coalprod: "1.98e-1",
    		gasprod: "2.70e-1",
    		oilprod: "5.41e-1",
    		coalprodpc: "1.48e-1",
    		gasprodpc: "6.51e-1",
    		oilprodpc: "2.87e-1",
    		gini: "2.27e-1",
    		gdp: "1.82e-1",
    		sharehh: "4.54e-1",
    		tradeopen: "2.75e-1"
    	},
    	{
    		yr: 1980,
    		cont: "Oceania",
    		coalprod: "2.10e-1",
    		gasprod: "2.89e-1",
    		oilprod: "5.44e-1",
    		coalprodpc: "1.72e-1",
    		gasprodpc: "6.32e-1",
    		oilprodpc: "3.17e-1",
    		gini: "2.16e-1",
    		gdp: "2.03e-1",
    		sharehh: "3.81e-1",
    		tradeopen: "4.93e-1"
    	},
    	{
    		yr: 1985,
    		cont: "Oceania",
    		coalprod: "2.68e-1",
    		gasprod: "2.97e-1",
    		oilprod: "6.64e-1",
    		coalprodpc: "2.42e-1",
    		gasprodpc: "7.50e-1",
    		oilprodpc: "3.25e-1",
    		gini: "2.37e-1",
    		gdp: "2.47e-1",
    		sharehh: "2.81e-1",
    		tradeopen: "5.46e-1"
    	},
    	{
    		yr: 1990,
    		cont: "Oceania",
    		coalprod: "3.24e-1",
    		gasprod: "3.22e-1",
    		oilprod: "6.58e-1",
    		coalprodpc: "2.89e-1",
    		gasprodpc: "7.06e-1",
    		oilprodpc: "3.57e-1",
    		gini: "3.36e-1",
    		gdp: "3.20e-1",
    		sharehh: "3.91e-1",
    		tradeopen: "4.03e-1"
    	},
    	{
    		yr: 1995,
    		cont: "Oceania",
    		coalprod: "4.91e-1",
    		gasprod: "3.53e-1",
    		oilprod: "6.09e-1",
    		coalprodpc: "4.26e-1",
    		gasprodpc: "6.28e-1",
    		oilprodpc: "3.95e-1",
    		gini: "3.97e-1",
    		gdp: "4.05e-1",
    		sharehh: "3.84e-1",
    		tradeopen: "6.19e-1"
    	},
    	{
    		yr: 2000,
    		cont: "Oceania",
    		coalprod: "5.31e-1",
    		gasprod: "3.59e-1",
    		oilprod: "7.50e-1",
    		coalprodpc: "4.54e-1",
    		gasprodpc: "7.49e-1",
    		oilprodpc: "3.95e-1",
    		gini: "3.64e-1",
    		gdp: "5.16e-1",
    		sharehh: "4.29e-1",
    		tradeopen: "9.53e-1"
    	},
    	{
    		yr: 2005,
    		cont: "Oceania",
    		coalprod: "7.96e-1",
    		gasprod: "3.84e-1",
    		oilprod: "5.91e-1",
    		coalprodpc: "6.58e-1",
    		gasprodpc: "5.70e-1",
    		oilprodpc: "4.17e-1",
    		gini: "3.59e-1",
    		gdp: "6.34e-1",
    		sharehh: "3.18e-1",
    		tradeopen: "7.15e-1"
    	},
    	{
    		yr: 2010,
    		cont: "Oceania",
    		coalprod: "8.51e-1",
    		gasprod: "4.34e-1",
    		oilprod: "5.82e-1",
    		coalprodpc: "6.58e-1",
    		gasprodpc: "5.34e-1",
    		oilprodpc: "4.59e-1",
    		gini: "3.26e-1",
    		gdp: "7.70e-1",
    		sharehh: "2.72e-1",
    		tradeopen: "7.25e-1"
    	},
    	{
    		yr: 2015,
    		cont: "Oceania",
    		coalprod: "7.22e-1",
    		gasprod: "5.09e-1",
    		oilprod: "4.79e-1",
    		coalprodpc: "5.37e-1",
    		gasprodpc: "4.31e-1",
    		oilprodpc: "5.23e-1",
    		gini: "4.30e-1",
    		gdp: "8.43e-1",
    		sharehh: "3.85e-1",
    		tradeopen: "6.42e-1"
    	},
    	{
    		yr: 1900,
    		cont: "World",
    		coalprod: "8.66e-3",
    		gasprod: "1.50e-1",
    		oilprod: "1.50e-1",
    		coalprodpc: "9.97e-2",
    		gasprodpc: "1.50e-1",
    		oilprodpc: "1.50e-1",
    		gini: "0.00e+0",
    		gdp: "NaN",
    		sharehh: "NaN",
    		tradeopen: "NaN"
    	},
    	{
    		yr: 1905,
    		cont: "World",
    		coalprod: "2.53e-2",
    		gasprod: "1.50e-1",
    		oilprod: "1.50e-1",
    		coalprodpc: "1.43e-1",
    		gasprodpc: "1.50e-1",
    		oilprodpc: "1.50e-1",
    		gini: "0.00e+0",
    		gdp: "NaN",
    		sharehh: "NaN",
    		tradeopen: "NaN"
    	},
    	{
    		yr: 1910,
    		cont: "World",
    		coalprod: "6.21e-2",
    		gasprod: "1.50e-1",
    		oilprod: "1.50e-1",
    		coalprodpc: "2.65e-1",
    		gasprodpc: "1.50e-1",
    		oilprodpc: "1.50e-1",
    		gini: "0.00e+0",
    		gdp: "NaN",
    		sharehh: "NaN",
    		tradeopen: "NaN"
    	},
    	{
    		yr: 1915,
    		cont: "World",
    		coalprod: "6.85e-2",
    		gasprod: "1.50e-1",
    		oilprod: "1.50e-1",
    		coalprodpc: "2.18e-1",
    		gasprodpc: "1.51e-1",
    		oilprodpc: "1.50e-1",
    		gini: "2.65e-1",
    		gdp: "NaN",
    		sharehh: "NaN",
    		tradeopen: "NaN"
    	},
    	{
    		yr: 1920,
    		cont: "World",
    		coalprod: "6.60e-2",
    		gasprod: "1.50e-1",
    		oilprod: "1.51e-1",
    		coalprodpc: "1.84e-1",
    		gasprodpc: "1.52e-1",
    		oilprodpc: "1.50e-1",
    		gini: "2.47e-1",
    		gdp: "NaN",
    		sharehh: "NaN",
    		tradeopen: "NaN"
    	},
    	{
    		yr: 1925,
    		cont: "World",
    		coalprod: "6.31e-2",
    		gasprod: "1.50e-1",
    		oilprod: "1.52e-1",
    		coalprodpc: "1.67e-1",
    		gasprodpc: "1.59e-1",
    		oilprodpc: "1.50e-1",
    		gini: "2.92e-1",
    		gdp: "NaN",
    		sharehh: "NaN",
    		tradeopen: "NaN"
    	},
    	{
    		yr: 1930,
    		cont: "World",
    		coalprod: "7.09e-2",
    		gasprod: "1.50e-1",
    		oilprod: "1.56e-1",
    		coalprodpc: "1.77e-1",
    		gasprodpc: "1.75e-1",
    		oilprodpc: "1.50e-1",
    		gini: "2.94e-1",
    		gdp: "NaN",
    		sharehh: "NaN",
    		tradeopen: "NaN"
    	},
    	{
    		yr: 1935,
    		cont: "World",
    		coalprod: "7.17e-2",
    		gasprod: "1.50e-1",
    		oilprod: "1.58e-1",
    		coalprodpc: "1.39e-1",
    		gasprodpc: "1.79e-1",
    		oilprodpc: "1.50e-1",
    		gini: "3.23e-1",
    		gdp: "NaN",
    		sharehh: "NaN",
    		tradeopen: "NaN"
    	},
    	{
    		yr: 1940,
    		cont: "World",
    		coalprod: "1.24e-1",
    		gasprod: "1.52e-1",
    		oilprod: "1.62e-1",
    		coalprodpc: "1.97e-1",
    		gasprodpc: "1.86e-1",
    		oilprodpc: "1.55e-1",
    		gini: "2.38e-1",
    		gdp: "NaN",
    		sharehh: "NaN",
    		tradeopen: "NaN"
    	},
    	{
    		yr: 1945,
    		cont: "World",
    		coalprod: "1.10e-1",
    		gasprod: "1.52e-1",
    		oilprod: "1.60e-1",
    		coalprodpc: "1.80e-1",
    		gasprodpc: "1.81e-1",
    		oilprodpc: "1.56e-1",
    		gini: "1.02e-1",
    		gdp: "NaN",
    		sharehh: "NaN",
    		tradeopen: "NaN"
    	},
    	{
    		yr: 1950,
    		cont: "World",
    		coalprod: "1.40e-1",
    		gasprod: "1.58e-1",
    		oilprod: "1.75e-1",
    		coalprodpc: "2.15e-1",
    		gasprodpc: "2.00e-1",
    		oilprodpc: "1.70e-1",
    		gini: "1.54e-1",
    		gdp: "2.09e-3",
    		sharehh: "8.09e-1",
    		tradeopen: "2.73e-1"
    	},
    	{
    		yr: 1955,
    		cont: "World",
    		coalprod: "1.58e-1",
    		gasprod: "1.64e-1",
    		oilprod: "2.17e-1",
    		coalprodpc: "2.07e-1",
    		gasprodpc: "2.55e-1",
    		oilprodpc: "1.79e-1",
    		gini: "1.92e-1",
    		gdp: "1.75e-2",
    		sharehh: "7.42e-1",
    		tradeopen: "2.30e-1"
    	},
    	{
    		yr: 1960,
    		cont: "World",
    		coalprod: "2.16e-1",
    		gasprod: "1.76e-1",
    		oilprod: "2.71e-1",
    		coalprodpc: "2.60e-1",
    		gasprodpc: "3.36e-1",
    		oilprodpc: "1.93e-1",
    		gini: "2.05e-1",
    		gdp: "3.82e-2",
    		sharehh: "6.46e-1",
    		tradeopen: "1.81e-1"
    	},
    	{
    		yr: 1965,
    		cont: "World",
    		coalprod: "2.45e-1",
    		gasprod: "2.11e-1",
    		oilprod: "3.47e-1",
    		coalprodpc: "2.49e-1",
    		gasprodpc: "4.15e-1",
    		oilprodpc: "2.50e-1",
    		gini: "1.89e-1",
    		gdp: "7.13e-2",
    		sharehh: "5.72e-1",
    		tradeopen: "1.52e-1"
    	},
    	{
    		yr: 1970,
    		cont: "World",
    		coalprod: "2.12e-1",
    		gasprod: "2.84e-1",
    		oilprod: "3.95e-1",
    		coalprodpc: "2.13e-1",
    		gasprodpc: "4.37e-1",
    		oilprodpc: "3.17e-1",
    		gini: "1.58e-1",
    		gdp: "1.11e-1",
    		sharehh: "4.62e-1",
    		tradeopen: "1.71e-1"
    	},
    	{
    		yr: 1975,
    		cont: "World",
    		coalprod: "2.50e-1",
    		gasprod: "3.02e-1",
    		oilprod: "4.28e-1",
    		coalprodpc: "2.49e-1",
    		gasprodpc: "4.66e-1",
    		oilprodpc: "3.44e-1",
    		gini: "1.42e-1",
    		gdp: "1.59e-1",
    		sharehh: "4.09e-1",
    		tradeopen: "2.92e-1"
    	},
    	{
    		yr: 1980,
    		cont: "World",
    		coalprod: "2.04e-1",
    		gasprod: "3.42e-1",
    		oilprod: "5.22e-1",
    		coalprodpc: "2.03e-1",
    		gasprodpc: "5.75e-1",
    		oilprodpc: "3.96e-1",
    		gini: "5.57e-1",
    		gdp: "1.96e-1",
    		sharehh: "4.24e-1",
    		tradeopen: "3.86e-1"
    	},
    	{
    		yr: 1985,
    		cont: "World",
    		coalprod: "3.14e-1",
    		gasprod: "3.37e-1",
    		oilprod: "5.54e-1",
    		coalprodpc: "2.89e-1",
    		gasprodpc: "5.96e-1",
    		oilprodpc: "4.02e-1",
    		gini: "4.73e-1",
    		gdp: "2.23e-1",
    		sharehh: "3.35e-1",
    		tradeopen: "3.70e-1"
    	},
    	{
    		yr: 1990,
    		cont: "World",
    		coalprod: "2.75e-1",
    		gasprod: "3.94e-1",
    		oilprod: "5.44e-1",
    		coalprodpc: "2.27e-1",
    		gasprodpc: "5.54e-1",
    		oilprodpc: "4.53e-1",
    		gini: "5.58e-1",
    		gdp: "2.92e-1",
    		sharehh: "4.61e-1",
    		tradeopen: "3.68e-1"
    	},
    	{
    		yr: 1995,
    		cont: "World",
    		coalprod: "2.61e-1",
    		gasprod: "4.40e-1",
    		oilprod: "5.31e-1",
    		coalprodpc: "2.44e-1",
    		gasprodpc: "5.35e-1",
    		oilprodpc: "4.70e-1",
    		gini: "6.63e-1",
    		gdp: "3.39e-1",
    		sharehh: "4.23e-1",
    		tradeopen: "5.00e-1"
    	},
    	{
    		yr: 2000,
    		cont: "World",
    		coalprod: "3.02e-1",
    		gasprod: "4.70e-1",
    		oilprod: "5.57e-1",
    		coalprodpc: "2.47e-1",
    		gasprodpc: "5.59e-1",
    		oilprodpc: "4.89e-1",
    		gini: "6.38e-1",
    		gdp: "4.18e-1",
    		sharehh: "4.28e-1",
    		tradeopen: "6.49e-1"
    	},
    	{
    		yr: 2005,
    		cont: "World",
    		coalprod: "3.69e-1",
    		gasprod: "4.79e-1",
    		oilprod: "5.46e-1",
    		coalprodpc: "2.97e-1",
    		gasprodpc: "5.45e-1",
    		oilprodpc: "5.08e-1",
    		gini: "6.92e-1",
    		gdp: "5.55e-1",
    		sharehh: "3.75e-1",
    		tradeopen: "6.89e-1"
    	},
    	{
    		yr: 2010,
    		cont: "World",
    		coalprod: "4.34e-1",
    		gasprod: "5.61e-1",
    		oilprod: "5.53e-1",
    		coalprodpc: "3.21e-1",
    		gasprodpc: "5.13e-1",
    		oilprodpc: "5.58e-1",
    		gini: "6.42e-1",
    		gdp: "7.67e-1",
    		sharehh: "3.81e-1",
    		tradeopen: "6.93e-1"
    	},
    	{
    		yr: 2015,
    		cont: "World",
    		coalprod: "4.63e-1",
    		gasprod: "5.83e-1",
    		oilprod: "5.21e-1",
    		coalprodpc: "2.99e-1",
    		gasprodpc: "4.76e-1",
    		oilprodpc: "5.55e-1",
    		gini: "5.55e-1",
    		gdp: "8.95e-1",
    		sharehh: "3.98e-1",
    		tradeopen: "7.19e-1"
    	},
    	{
    		yr: 2020,
    		cont: "World",
    		coalprod: "3.19e-1",
    		gasprod: "7.10e-1",
    		oilprod: "4.79e-1",
    		coalprodpc: "2.06e-1",
    		gasprodpc: "3.37e-1",
    		oilprodpc: "6.35e-1",
    		gini: "8.92e-1",
    		gdp: "NaN",
    		sharehh: "NaN",
    		tradeopen: "NaN"
    	}
    ];

    /* src\components\TrendLinesChart.svelte generated by Svelte v3.31.0 */

    const { Object: Object_1$1, console: console_1 } = globals;
    const file$4 = "src\\components\\TrendLinesChart.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	child_ctx[10] = i;
    	return child_ctx;
    }

    // (53:8) {#each continents as conti, i}
    function create_each_block$2(ctx) {
    	let path;
    	let path_d_value;
    	let path_stroke_value;
    	let path_stroke_width_value;

    	function func(...args) {
    		return /*func*/ ctx[3](/*conti*/ ctx[8], ...args);
    	}

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", path_d_value = /*linePath*/ ctx[2]("coalprod", "gdp")(/*linesData*/ ctx[1].filter(func)));
    			attr_dev(path, "stroke", path_stroke_value = schemeCategory10[/*i*/ ctx[10]]);
    			attr_dev(path, "fill", "none");
    			attr_dev(path, "stroke-width", path_stroke_width_value = 1.5);
    			add_location(path, file$4, 53, 12, 1699);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(53:8) {#each continents as conti, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let div;
    	let svg;
    	let svg_viewBox_value;
    	let each_value = /*continents*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(svg, "width", width$1);
    			attr_dev(svg, "height", height$1);
    			attr_dev(svg, "viewBox", svg_viewBox_value = [0, 0, width$1, height$1]);
    			add_location(svg, file$4, 47, 4, 1558);
    			attr_dev(div, "class", "trend-line");
    			add_location(div, file$4, 46, 0, 1528);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(svg, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*linePath, linesData, continents, schemeCategory10*/ 7) {
    				each_value = /*continents*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(svg, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const height$1 = 500;
    const width$1 = 700;

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("TrendLinesChart", slots, []);
    	const margin = { top: 20, right: 20, bottom: 20, left: 50 };
    	const trendInds = Object.keys(trendData[0]).slice(2);
    	const continents = [...new Set(trendData.map(d => d.cont))];

    	const linesData = from([...trendData]).derive(trendInds.reduce(
    		(obj, ind) => {
    			return {
    				...obj,
    				[ind]: _escape(d => {
    					if (d[ind]) {
    						const [b, e] = d[ind].split("e");
    						return b * Math.pow(10, e);
    					} else if (d[ind]) return 0;
    				})
    			};
    		},
    		{}
    	)).derive({
    		date: _escape(d => new Date(d.yr, 0, 1))
    	}).relocate("date", { before: "yr" }).select(not("yr")).objects();

    	console.log(linesData);
    	const xScaleLines = linear$1().domain([0, 1]).range([margin.left, width$1 - margin.right]);
    	const yScaleLines = linear$1().domain([0, 1]).range([height$1 - margin.bottom, margin.top]);

    	const linePath = (keyFF, keyEcon) => line().// .defined(d => !isNaN(d.date))
    	curve(curveBasis).x(d => xScaleLines(d[keyFF])).y(d => yScaleLines(d[keyEcon]));

    	const writable_props = [];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<TrendLinesChart> was created with unknown prop '${key}'`);
    	});

    	const func = (conti, d) => d.cont === conti;

    	$$self.$capture_state = () => ({
    		aq,
    		trendData,
    		line,
    		curveBasis,
    		scaleLinear: linear$1,
    		scaleUtc: utcTime,
    		max,
    		extent,
    		schemeCategory10,
    		height: height$1,
    		width: width$1,
    		margin,
    		trendInds,
    		continents,
    		linesData,
    		xScaleLines,
    		yScaleLines,
    		linePath
    	});

    	return [continents, linesData, linePath, func];
    }

    class TrendLinesChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TrendLinesChart",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    var RUdata = [
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 1
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 1
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 1
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 1
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 2
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 2
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 3
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 2
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 1
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Australia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 10
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 6
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 6
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 1
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 1
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 1
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 1
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 2
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 2
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 2
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 4
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 1
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 6
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 6
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 4
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 5
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 8
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 9
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 9
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 8
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 5
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 4
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 3
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 10
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 15
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 10
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 10
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 10
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 6
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 8
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 9
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 7
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 11
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 9
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 16
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 10
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 2
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 2
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 3
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 6
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 11
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 10
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 10
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 6
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 7
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 8
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 5
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 2
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 3
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 7
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 6
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 83
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 75
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 76
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 75
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 65
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 77
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 71
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 69
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 69
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 64
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 64
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 60
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 62
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 69
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 68
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 70
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 66
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 65
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 63
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 81
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 79
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 91
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 100
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 76
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Austria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 1
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 3
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 2
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 3
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 1
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 1
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 2
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 5
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 7
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 8
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 10
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 12
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 12
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 11
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 15
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 12
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 10
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 17
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 20
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 5
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 2
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 1
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 10
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 23
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 25
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 23
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 27
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 25
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 32
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 31
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 32
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 31
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 27
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 18
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 12
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 16
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 13
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 15
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 18
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 16
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 17
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 24
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 27
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 25
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 46
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 52
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 63
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 63
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 62
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 77
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 63
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 55
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 66
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 67
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 61
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 63
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 59
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 50
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 58
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 80
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 64
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 59
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 45
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 44
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 2
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 5
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 4
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 5
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 5
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 3
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 2
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 2
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 11
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 8
    	},
    	{
    		Country: "Belgium",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 8
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 3
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 5
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 4
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 7
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 9
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 11
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 10
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 11
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 14
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 9
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 11
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 10
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 7
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 8
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 7
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 9
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 7
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 9
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 7
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 8
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 8
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 8
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 9
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 9
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 87
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 75
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 42
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 96
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 126
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 134
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 130
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 133
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 118
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 127
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 126
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 133
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 119
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 84
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 121
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 113
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 128
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 97
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 110
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 109
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 154
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 154
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 168
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 186
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 160
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 136
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 130
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 101
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 90
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 102
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 4
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: null
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 101
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 97
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 100
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 99
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 98
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 100
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 101
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 104
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 100
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 103
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 94
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 100
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 104
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 94
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 96
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 88
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 90
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 91
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 96
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 99
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 93
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 86
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 83
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 93
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 94
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 97
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 97
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 99
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 99
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 80
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 73
    	},
    	{
    		Country: "Bulgaria",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 77
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 2
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 2
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 3
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 3
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 2
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 2
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 1
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Canada",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 1
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 1
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 1
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 1
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 6
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Chile",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Colombia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Costa Rica",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 18
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 2
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 5
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 5
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 2
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 1
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 29
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 44
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 31
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 1
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 25
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 24
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 20
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 82
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 64
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 73
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 82
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 37
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 94
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 78
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 78
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 76
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 51
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 40
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 70
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 35
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 73
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 78
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 84
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 89
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 80
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 83
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 63
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 60
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 54
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 65
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 36
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 30
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 18
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 19
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 21
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 9
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 13
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: null
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 26
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 32
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 28
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 29
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 29
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 12
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 33
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 38
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 42
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 41
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 41
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 38
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 37
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 39
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 35
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 39
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 39
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 32
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 34
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 34
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 32
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Croatia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 78
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 84
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 59
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 111
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 123
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 89
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 230
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 50
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 118
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 105
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 98
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 3
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 29
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 23
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 63
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 26
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 4
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 1
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 2
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 1
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: null
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Cyprus",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 1
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 1
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 1
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 1
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 1
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 1
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 1
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 2
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 2
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 2
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 1
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 87
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 81
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 75
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 63
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 62
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 51
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 48
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 51
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 48
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 57
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 55
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 49
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 56
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 56
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 56
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 47
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 53
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 52
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 48
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 47
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 44
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 44
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 43
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 41
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 36
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 37
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 91
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 109
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 94
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 96
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 99
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 98
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 100
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 90
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 87
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 79
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 78
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 73
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 74
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 73
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 68
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 75
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 78
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 74
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 75
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 68
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 76
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 109
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 89
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 100
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 87
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 95
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 96
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 101
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 96
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 109
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 86
    	},
    	{
    		Country: "Czech Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 92
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 18
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 9
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 11
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 3
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 4
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 2
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 12
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 21
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 28
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 16
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 10
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 27
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 25
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 23
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 30
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 41
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 42
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 22
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 37
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 35
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 36
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 42
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 49
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 58
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 71
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 75
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 149
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 94
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 44
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 3
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 11
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 14
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 12
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 18
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 9
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 2
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 1
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 2
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 2
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 2
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 3
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 1
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 2
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 1
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 4
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 8
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 2
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 10
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 13
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 22
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 28
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 15
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 8
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 6
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 13
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 15
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Denmark",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 3
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 3
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 4
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 2
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 2
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 2
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 2
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 2
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 2
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 2
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 2
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 3
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 1
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 12
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 11
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 7
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 9
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 6
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 8
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 6
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 11
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 8
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 9
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 9
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 8
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 2
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 45
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 21
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 22
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 46
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 28
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 101
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 100
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 104
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 49
    	},
    	{
    		Country: "Estonia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 35
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 12
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 18
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 20
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 21
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 17
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 15
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 13
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 9
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 18
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 32
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 30
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 25
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 41
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 45
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 35
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 32
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 43
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 44
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 55
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 35
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 55
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 37
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 45
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 55
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 36
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 39
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 41
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 41
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 38
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 30
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 22
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 2
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 4
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 32
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 27
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 41
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 28
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 31
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 46
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 56
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 60
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 63
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 63
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 68
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 82
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 95
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 91
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 79
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 97
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 108
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 116
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 119
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 117
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 124
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 145
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 116
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 133
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 141
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 144
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 144
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 160
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 137
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 112
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 100
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 99
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 98
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 98
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 68
    	},
    	{
    		Country: "Finland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 75
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 2
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 3
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 3
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 1
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 1
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 1
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 1
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 2
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 1
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 1
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 2
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 4
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 4
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 6
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 5
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 9
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 9
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 15
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 14
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 14
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 15
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 18
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 17
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 19
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 26
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 30
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 24
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 29
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 20
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 6
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 2
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 8
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 8
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 7
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 8
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 10
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 10
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 6
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 8
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 7
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 10
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 13
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 15
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 15
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 12
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 12
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 13
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 15
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 15
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 17
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 14
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 12
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 11
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 9
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 7
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 9
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 13
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 12
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 10
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 5
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 5
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 32
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 32
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 34
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 31
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 35
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 35
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 30
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 28
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 26
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 30
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 29
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 24
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 24
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 23
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 21
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 20
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 16
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 13
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 15
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 16
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 14
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 16
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 18
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 22
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 16
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 14
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 21
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 20
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 23
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 25
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 20
    	},
    	{
    		Country: "France",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 27
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 1
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 1
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 2
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 2
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 2
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 4
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 6
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 6
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 7
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 7
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 8
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 9
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 8
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 8
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 10
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 11
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 12
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 14
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 17
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 17
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 22
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 20
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 24
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 8
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 13
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 18
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 16
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 20
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 19
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 20
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 22
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 24
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 24
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 26
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 28
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 32
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 33
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 32
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 33
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 31
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 34
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 33
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 35
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 35
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 31
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 30
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 33
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 36
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 33
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 32
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 28
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 30
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 31
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 38
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 33
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 32
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 34
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 38
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 38
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 35
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 34
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 36
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 39
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 39
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 35
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 36
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 37
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 41
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 41
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 40
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 41
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 42
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 34
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 38
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 40
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 39
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 46
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 49
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 56
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 70
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 69
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 49
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 51
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 59
    	},
    	{
    		Country: "Germany",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 60
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 3
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 2
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 7
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 3
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 2
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 2
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 1
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 1
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 1
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 2
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 4
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 3
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 2
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 4
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 3
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 2
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 3
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 2
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 2
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 3
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 1
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 1
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 2
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 2
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 4
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 5
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 5
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 6
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 9
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 9
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 11
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 12
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 10
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 12
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 18
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 20
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 20
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 18
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 8
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 12
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 32
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 40
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 61
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 52
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 39
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 39
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 36
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 45
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 45
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 46
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 57
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 38
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 68
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 77
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 77
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 71
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 58
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 57
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 73
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 57
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 83
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 64
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 16
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 76
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 95
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 100
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 73
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 73
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 73
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 75
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 80
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 83
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 80
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 76
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 65
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 56
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 52
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 59
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 55
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 66
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 57
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 61
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 63
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 58
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 65
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 31
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 39
    	},
    	{
    		Country: "Greece",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 40
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 7
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 10
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 3
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 1
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 1
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 2
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 2
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 3
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 4
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 3
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 3
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 6
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 12
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 16
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 13
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 15
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 13
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 13
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 6
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 2
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 1
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 1
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 1
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 1
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 1
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 4
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 8
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 5
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 11
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 10
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 83
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 88
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 87
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 88
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 88
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 80
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 87
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 88
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 93
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 93
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 94
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 97
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 82
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 90
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 99
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 94
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 93
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 90
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 78
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 75
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 56
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 61
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 61
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 53
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 46
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 58
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 56
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 53
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 57
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 53
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 60
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 71
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 53
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 59
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 63
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 67
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 64
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 72
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 76
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 64
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 60
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 66
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 60
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 69
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 71
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 76
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 70
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 79
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 83
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 101
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 72
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 75
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 91
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 74
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 109
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 72
    	},
    	{
    		Country: "Hungary",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 64
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 7
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 6
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 6
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 7
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 7
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 7
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 8
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 3
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 7
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 4
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 5
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 4
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 3
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 4
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 2
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 2
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 2
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 1
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 1
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 2
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 2
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 1
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 2
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 2
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 2
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 1
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 2
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Iceland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 1
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 3
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 6
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 1
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 2
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 6
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 8
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 2
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Ireland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 18
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 16
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 14
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 20
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 23
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 23
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 21
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 28
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 38
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 2
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Israel",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 3
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 4
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 8
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 7
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 6
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 4
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 3
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 1
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 1
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 5
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 5
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 4
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 6
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 4
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 7
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 4
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 3
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 3
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 4
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 6
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 10
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 11
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 12
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 20
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 19
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 21
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 25
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 37
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 37
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 43
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 49
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 56
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 2
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 20
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 25
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 16
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 13
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 13
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 14
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 19
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 20
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 24
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 23
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 25
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 27
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 27
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 22
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 28
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 23
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 26
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 23
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 22
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 24
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 31
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 25
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 23
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 20
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 16
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 16
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 22
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 17
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 17
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 29
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 28
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 26
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 26
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 27
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 25
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 24
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 24
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 27
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 28
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 30
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 28
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 29
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 28
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 29
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 27
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 27
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 27
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 28
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 26
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 18
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 25
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 24
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 40
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 39
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 41
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 38
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 44
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 45
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 45
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 40
    	},
    	{
    		Country: "Italy",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 38
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 7
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 5
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 4
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 4
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 4
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 4
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 4
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 3
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 3
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 4
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 4
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 4
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 5
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 5
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 5
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 6
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 6
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 7
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 6
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 6
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 7
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 7
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 8
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 7
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 9
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 10
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 10
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 11
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 12
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 13
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 14
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 12
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 1
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 1
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 1
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 1
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 3
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 4
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 4
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 6
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 4
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 5
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 6
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 7
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 7
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 5
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 5
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 4
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 4
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 3
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 3
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 6
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 8
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 9
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 9
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 10
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 9
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 8
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 9
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 8
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 8
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 8
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 8
    	},
    	{
    		Country: "Japan",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 9
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 3
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 1
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 1
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 2
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 2
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 2
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 1
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 1
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 2
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 4
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 3
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 4
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 4
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 6
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 4
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 6
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 7
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 7
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 5
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 7
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 10
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 11
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 12
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 14
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 18
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 20
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 19
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 19
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 19
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 21
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 1
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 1
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 2
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 2
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 2
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 1
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 1
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 1
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 2
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 6
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 4
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 4
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 7
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 5
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 4
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 6
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 5
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 7
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 5
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 5
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 5
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 4
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 6
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 7
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 4
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 9
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 8
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 5
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 5
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 5
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 7
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 5
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 5
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 4
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 6
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 5
    	},
    	{
    		Country: "Korea",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 5
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 80
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 48
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 44
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 40
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 45
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 30
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 29
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 43
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 51
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 66
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 43
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 51
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 68
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 86
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 89
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 92
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 119
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 91
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 90
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 95
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 83
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 56
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 77
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 100
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 83
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 95
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 96
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 101
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 101
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 98
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 102
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 48
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 10
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 9
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 7
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 8
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 9
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 13
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 16
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 7
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 9
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 8
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 11
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 16
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 16
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 14
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 16
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 16
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 19
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 21
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 21
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 18
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 16
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 12
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 13
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 113
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 100
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 124
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 67
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 98
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 99
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 100
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 99
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 106
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 104
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 102
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 86
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 89
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 104
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 130
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 106
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 109
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 97
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 82
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 114
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 62
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 109
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 114
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 116
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 72
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 99
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 83
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 102
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 99
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 100
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 100
    	},
    	{
    		Country: "Latvia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 24
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 141
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 52
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 107
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 36
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 90
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 85
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 85
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 67
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 54
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 48
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 63
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 60
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 63
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 61
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 60
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 55
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 66
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 58
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 79
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 99
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 85
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 97
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 82
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 78
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 76
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 87
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 78
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 91
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 72
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 78
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 160
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 229
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 258
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 258
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 311
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 329
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 337
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 315
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 207
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 308
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 337
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 358
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 364
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 345
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 368
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 277
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 295
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 306
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 243
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 230
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 270
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 213
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 236
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 103
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 101
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 101
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 101
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 103
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 96
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 100
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 99
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 86
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 39
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 58
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 61
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 53
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 50
    	},
    	{
    		Country: "Lithuania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 43
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 8
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 8
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 8
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 8
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 7
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 8
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 7
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 8
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 7
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 23
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 23
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 24
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 24
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 24
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 24
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 25
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 25
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 25
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 25
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 27
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 27
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 27
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 27
    	},
    	{
    		Country: "Luxembourg",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: null
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Malta",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 1
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 1
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 2
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 1
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 8
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 9
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Mexico",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 1
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 1
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 1
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 2
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 1
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 3
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 3
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 1
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 6
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 8
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 8
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 10
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 13
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 14
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 19
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 14
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 15
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 17
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 20
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 27
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 32
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 39
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 39
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 43
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 51
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 38
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 10
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 5
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 12
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 8
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 11
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 11
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 14
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 13
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 7
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 16
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 22
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 31
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 36
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 44
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 59
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 66
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 70
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 64
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 68
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 73
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 71
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 73
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 72
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 74
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 71
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 86
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 106
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 123
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 135
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 90
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 67
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 85
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 9
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 11
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 10
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 11
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 7
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 7
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 4
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 6
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 9
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 16
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 20
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 30
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 26
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 46
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 42
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 41
    	},
    	{
    		Country: "Netherlands",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 31
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 7
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 2
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 9
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 5
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 2
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 3
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 2
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 4
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 4
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 7
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 5
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 5
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 15
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 11
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 7
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 13
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 7
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 9
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 12
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 19
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 17
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 14
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 9
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 15
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 15
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 15
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 18
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 17
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 20
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 18
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 18
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 5
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 2
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 2
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 1
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 1
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 3
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 3
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 2
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 3
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 6
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 2
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 1
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 2
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 3
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 1
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 1
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 2
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 8
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 6
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 6
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 2
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 2
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 5
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 5
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 4
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 4
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 6
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 3
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 4
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Norway",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 2
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "New Zealand",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 1
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 2
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 3
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 1
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 1
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 1
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 2
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 2
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 2
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 3
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 4
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 3
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 6
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 9
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 9
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 11
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 8
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 8
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 8
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 6
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 7
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 11
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 17
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 15
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 15
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 11
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 101
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 88
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 97
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 98
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 87
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 83
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 80
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 68
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 71
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 75
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 92
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 86
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 92
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 88
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 82
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 85
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 86
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 87
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 82
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 84
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 89
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 91
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 103
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 107
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 107
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 106
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 87
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 77
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 79
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 68
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 68
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 56
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 76
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 69
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 69
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 57
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 60
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 64
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 61
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 58
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 65
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 53
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 54
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 58
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 57
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 53
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 43
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 46
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 49
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 45
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 51
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 55
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 62
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 64
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 59
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 58
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 55
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 53
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 62
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 55
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 50
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 49
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 46
    	},
    	{
    		Country: "Poland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 47
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 1
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 2
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 2
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 3
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 3
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 1
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 1
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 2
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 1
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 3
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 1
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 2
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 2
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 6
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 2
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 8
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 4
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 4
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 6
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 5
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 6
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 5
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 4
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 2
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 8
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 4
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 10
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 6
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 1
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 1
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 4
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 4
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 17
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 14
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 16
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 33
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 43
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 34
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 18
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 7
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 12
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 2
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 11
    	},
    	{
    		Country: "Portugal",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 14
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 19
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 10
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 8
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 11
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 6
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 6
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 10
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 6
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 14
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 15
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 17
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 11
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 12
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 9
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 11
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 7
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 3
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 4
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 2
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 2
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 3
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 3
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 4
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 6
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 6
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 6
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 9
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 10
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 36
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 29
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 32
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 42
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 51
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 41
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 47
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 30
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 30
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 32
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 19
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 19
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 35
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 37
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 42
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 45
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 44
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 44
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 42
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 32
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: null
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 21
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 16
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 17
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 18
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 20
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 25
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 29
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 25
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 26
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 18
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 20
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 18
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 23
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 26
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 30
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 30
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 32
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 28
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 28
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 15
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 16
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 19
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 18
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 11
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 4
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 2
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 13
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 10
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 11
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 9
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 8
    	},
    	{
    		Country: "Romania",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 23
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 12
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 17
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 19
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 12
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 8
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 20
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 25
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 25
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 25
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 24
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 21
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 32
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 19
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 32
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 26
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 26
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 19
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 19
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 22
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 19
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 18
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 24
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 19
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 24
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 31
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 33
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 27
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 21
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 179
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 160
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 174
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 182
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 156
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 170
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 171
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 160
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 168
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 152
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 171
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 165
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 182
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 177
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 182
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 168
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 146
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 141
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 140
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 154
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 133
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 105
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 94
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 96
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 86
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 93
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 87
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 92
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 93
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 94
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 91
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 99
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 92
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 100
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 97
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 103
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 103
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 106
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 100
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 99
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 108
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 100
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 105
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 91
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 96
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 105
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 95
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 92
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 89
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 90
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 137
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 75
    	},
    	{
    		Country: "Slovak Republic",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 65
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 1
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 1
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 1
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 2
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 1
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 1
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 2
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 1
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 1
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 2
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 1
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 1
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 1
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 1
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 1
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 1
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 1
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 95
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 96
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 70
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 66
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 56
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 60
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 51
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 54
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 58
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 40
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 60
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 60
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 60
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 60
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 60
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 60
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 51
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 51
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 47
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 48
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 47
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 48
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 42
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 58
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 37
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 30
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 34
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 23
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 31
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 12
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 9
    	},
    	{
    		Country: "Slovenia",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 9
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 1
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 1
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 1
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 1
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 1
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 4
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 5
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 6
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 7
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 6
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 10
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 13
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 13
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 9
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 12
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 12
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 8
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 10
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 14
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 14
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 12
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 19
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 15
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 25
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 21
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 37
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 51
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 35
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 6
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 10
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 9
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 9
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 8
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 7
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 9
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 10
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 9
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 9
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 13
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 16
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 14
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 14
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 19
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 22
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 15
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 17
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 15
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 18
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 18
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 19
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 18
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 12
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 13
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 8
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 4
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 7
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 8
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 12
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 3
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 9
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 11
    	},
    	{
    		Country: "Spain",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 10
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 12
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 9
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 11
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 6
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 10
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 6
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 6
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 5
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 5
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 7
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 4
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 5
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 4
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 10
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 21
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 18
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 17
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 20
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 14
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 17
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 16
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 14
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 15
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 15
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 16
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 15
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 15
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 17
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 14
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 20
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 24
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 1
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 1
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 8
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 6
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 3
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 1
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 1
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 12
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 14
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 16
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 10
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 8
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 24
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 26
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 37
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 51
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 53
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 47
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 54
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 63
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 64
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 72
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 71
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 60
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 78
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 105
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 92
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 82
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 74
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 56
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 26
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 26
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 14
    	},
    	{
    		Country: "Sweden",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 3
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 2
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 2
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 1
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 1
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 2
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 2
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 2
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 1
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 2
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 2
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 2
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 1
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 1
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 2
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 1
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 2
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 2
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 3
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 11
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 8
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 6
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 1
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 3
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 13
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 17
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 17
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 15
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 16
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 12
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 14
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 13
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 13
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 13
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "Switzerland",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 4
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 5
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 4
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 3
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 3
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 4
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 8
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 9
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 11
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 12
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 15
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 11
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 17
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 19
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 19
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 19
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 20
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 21
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 18
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 19
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 20
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 16
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 18
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 18
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 16
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 21
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 20
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 23
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 19
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 21
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 26
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 21
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 9
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 1
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 2
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 5
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 1
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 5
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 2
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 2
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 3
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 9
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 7
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 17
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 13
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 16
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 22
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 25
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 23
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 30
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 24
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 22
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 14
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 10
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 9
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 8
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 5
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 11
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 10
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 7
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 7
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 26
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 10
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 14
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 94
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 95
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 96
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 96
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 90
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 79
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 67
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 65
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 60
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 67
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 65
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 66
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 64
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 58
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 61
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 62
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 60
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 61
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 63
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 55
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 46
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 57
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 59
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 57
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 55
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 56
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 53
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 53
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 47
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 34
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 34
    	},
    	{
    		Country: "Republic of Turkiye",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 44
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 1
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 1
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 1
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 1
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 1
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 1
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 6
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 7
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 6
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 16
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 29
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 36
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 34
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 37
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 39
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 19
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 25
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 29
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 34
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 37
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 22
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 13
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 26
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 36
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 27
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 20
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 23
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 7
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 7
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 5
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 5
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 5
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 4
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 4
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 5
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 4
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 2
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 4
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 4
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 6
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 8
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 13
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 8
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 14
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 13
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 13
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 9
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 8
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 10
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 13
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 9
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 5
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 4
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 6
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 8
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 6
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 8
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 9
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 7
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 2
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 4
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 3
    	},
    	{
    		Country: "United Kingdom",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 4
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Coal",
    		Year: 2021,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2002,
    		Percentage: 1
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2003,
    		Percentage: 1
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2004,
    		Percentage: 1
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2005,
    		Percentage: 2
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2006,
    		Percentage: 2
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2007,
    		Percentage: 2
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2008,
    		Percentage: 2
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2009,
    		Percentage: 3
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2010,
    		Percentage: 4
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2011,
    		Percentage: 4
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2012,
    		Percentage: 3
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2013,
    		Percentage: 3
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2014,
    		Percentage: 2
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2015,
    		Percentage: 2
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2016,
    		Percentage: 2
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2017,
    		Percentage: 2
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2018,
    		Percentage: 2
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2019,
    		Percentage: 3
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2020,
    		Percentage: 4
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Oil",
    		Year: 2021,
    		Percentage: 4
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1990,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1991,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1992,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1993,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1994,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1995,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1996,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1997,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1998,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 1999,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2000,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2001,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2002,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2003,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2004,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2005,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2006,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2007,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2008,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2009,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2010,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2011,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2012,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2013,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2014,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2015,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2016,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2017,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2018,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2019,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2020,
    		Percentage: 0
    	},
    	{
    		Country: "United States",
    		Fossil_Fuel: "Natural Gas",
    		Year: 2021,
    		Percentage: 0
    	}
    ];

    /* src/components/RussianImportsChart.svelte generated by Svelte v3.31.0 */
    const file$5 = "src/components/RussianImportsChart.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	child_ctx[20] = i;
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	return child_ctx;
    }

    // (68:8) {#each [1990, 1995, 2000, 2005, 2010, 2015, 2020] as tickValue}
    function create_each_block_2(ctx) {
    	let g;
    	let line_1;
    	let text_1;
    	let t;
    	let g_transform_value;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			line_1 = svg_element("line");
    			text_1 = svg_element("text");
    			t = text(/*tickValue*/ ctx[21]);
    			attr_dev(line_1, "y2", /*innerHeight*/ ctx[10]);
    			attr_dev(line_1, "stroke", "black");
    			add_location(line_1, file$5, 70, 12, 2050);
    			attr_dev(text_1, "text-anchor", "middle");
    			attr_dev(text_1, "dy", "1.71em");
    			attr_dev(text_1, "y", /*innerHeight*/ ctx[10]);
    			add_location(text_1, file$5, 71, 12, 2103);
    			attr_dev(g, "transform", g_transform_value = `translate(${/*xScale*/ ctx[1](/*tickValue*/ ctx[21])},0)`);
    			add_location(g, file$5, 69, 12, 1986);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, line_1);
    			append_dev(g, text_1);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*xScale*/ 2 && g_transform_value !== (g_transform_value = `translate(${/*xScale*/ ctx[1](/*tickValue*/ ctx[21])},0)`)) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(68:8) {#each [1990, 1995, 2000, 2005, 2010, 2015, 2020] as tickValue}",
    		ctx
    	});

    	return block;
    }

    // (79:12) {#if tickValue}
    function create_if_block$3(ctx) {
    	let g;
    	let text_1;
    	let t_value = /*tickValue*/ ctx[21] + "";
    	let t;
    	let text_1_x_value;
    	let g_transform_value;

    	const block = {
    		c: function create() {
    			g = svg_element("g");
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(text_1, "text-anchor", "end");
    			attr_dev(text_1, "dy", ".71em");
    			attr_dev(text_1, "x", text_1_x_value = /*margin*/ ctx[9].left);
    			add_location(text_1, file$5, 80, 16, 2393);
    			attr_dev(g, "transform", g_transform_value = `translate(0,${/*yScale*/ ctx[2](/*tickValue*/ ctx[21])})`);
    			add_location(g, file$5, 79, 16, 2325);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, g, anchor);
    			append_dev(g, text_1);
    			append_dev(text_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*yScale*/ 4 && t_value !== (t_value = /*tickValue*/ ctx[21] + "")) set_data_dev(t, t_value);

    			if (dirty & /*yScale*/ 4 && g_transform_value !== (g_transform_value = `translate(0,${/*yScale*/ ctx[2](/*tickValue*/ ctx[21])})`)) {
    				attr_dev(g, "transform", g_transform_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(g);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(79:12) {#if tickValue}",
    		ctx
    	});

    	return block;
    }

    // (78:8) {#each yScale.ticks() as tickValue}
    function create_each_block_1(ctx) {
    	let if_block_anchor;
    	let if_block = /*tickValue*/ ctx[21] && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*tickValue*/ ctx[21]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(78:8) {#each yScale.ticks() as tickValue}",
    		ctx
    	});

    	return block;
    }

    // (90:8) {#each countries as country, i}
    function create_each_block$3(ctx) {
    	let path;
    	let path_d_value;
    	let path_stroke_value;
    	let path_stroke_width_value;
    	let text_1;
    	let t_value = /*country*/ ctx[18] + "";
    	let t;
    	let text_1_x_value;
    	let text_1_y_value;
    	let mounted;
    	let dispose;

    	function func(...args) {
    		return /*func*/ ctx[15](/*country*/ ctx[18], ...args);
    	}

    	function func_1(...args) {
    		return /*func_1*/ ctx[16](/*country*/ ctx[18], ...args);
    	}

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			text_1 = svg_element("text");
    			t = text(t_value);
    			attr_dev(path, "d", path_d_value = /*linePath*/ ctx[8]("Year", "Percentage")(/*data*/ ctx[0].filter(func)));
    			attr_dev(path, "stroke", path_stroke_value = /*colorScale*/ ctx[6](/*country*/ ctx[18]));
    			attr_dev(path, "fill", "none");
    			attr_dev(path, "stroke-width", path_stroke_width_value = /*strokeScale*/ ctx[7](/*country*/ ctx[18]));
    			add_location(path, file$5, 90, 12, 2796);
    			attr_dev(text_1, "text-anchor", "end");
    			attr_dev(text_1, "x", text_1_x_value = width$2 - /*margin*/ ctx[9].right);
    			attr_dev(text_1, "y", text_1_y_value = /*yScale*/ ctx[2](/*data*/ ctx[0].filter(func_1)[0].Percentage));
    			attr_dev(text_1, "color", /*colour*/ ctx[3]);
    			attr_dev(text_1, "opacity", /*opacity*/ ctx[4]);
    			add_location(text_1, file$5, 97, 12, 3047);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    			insert_dev(target, text_1, anchor);
    			append_dev(text_1, t);

    			if (!mounted) {
    				dispose = [
    					listen_dev(text_1, "mouseover", /*handleMouseOver*/ ctx[11], false, false, false),
    					listen_dev(text_1, "mouseout", /*handleMouseOut*/ ctx[12], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*linePath, data, countries*/ 289 && path_d_value !== (path_d_value = /*linePath*/ ctx[8]("Year", "Percentage")(/*data*/ ctx[0].filter(func)))) {
    				attr_dev(path, "d", path_d_value);
    			}

    			if (dirty & /*colorScale, countries*/ 96 && path_stroke_value !== (path_stroke_value = /*colorScale*/ ctx[6](/*country*/ ctx[18]))) {
    				attr_dev(path, "stroke", path_stroke_value);
    			}

    			if (dirty & /*strokeScale, countries*/ 160 && path_stroke_width_value !== (path_stroke_width_value = /*strokeScale*/ ctx[7](/*country*/ ctx[18]))) {
    				attr_dev(path, "stroke-width", path_stroke_width_value);
    			}

    			if (dirty & /*countries*/ 32 && t_value !== (t_value = /*country*/ ctx[18] + "")) set_data_dev(t, t_value);

    			if (dirty & /*yScale, data, countries*/ 37 && text_1_y_value !== (text_1_y_value = /*yScale*/ ctx[2](/*data*/ ctx[0].filter(func_1)[0].Percentage))) {
    				attr_dev(text_1, "y", text_1_y_value);
    			}

    			if (dirty & /*colour*/ 8) {
    				attr_dev(text_1, "color", /*colour*/ ctx[3]);
    			}

    			if (dirty & /*opacity*/ 16) {
    				attr_dev(text_1, "opacity", /*opacity*/ ctx[4]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    			if (detaching) detach_dev(text_1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(90:8) {#each countries as country, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let div;
    	let svg;
    	let g;
    	let each0_anchor;
    	let text_1;
    	let t;
    	let text_1_x_value;
    	let text_1_y_value;
    	let svg_viewBox_value;
    	let each_value_2 = [1990, 1995, 2000, 2005, 2010, 2015, 2020];
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < 7; i += 1) {
    		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	let each_value_1 = /*yScale*/ ctx[2].ticks();
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	let each_value = /*countries*/ ctx[5];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			g = svg_element("g");

    			for (let i = 0; i < 7; i += 1) {
    				each_blocks_2[i].c();
    			}

    			each0_anchor = empty();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			text_1 = svg_element("text");
    			t = text("%");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(text_1, "text-anchor", "end");
    			attr_dev(text_1, "dy", ".71em");
    			attr_dev(text_1, "x", text_1_x_value = /*margin*/ ctx[9].left);
    			attr_dev(text_1, "y", text_1_y_value = /*margin*/ ctx[9].top);
    			add_location(text_1, file$5, 87, 8, 2570);
    			add_location(g, file$5, 65, 8, 1720);
    			attr_dev(svg, "width", width$2);
    			attr_dev(svg, "height", height$2);
    			attr_dev(svg, "viewBox", svg_viewBox_value = [0, 0, width$2, height$2]);
    			add_location(svg, file$5, 61, 4, 1633);
    			attr_dev(div, "class", "imports-line");
    			add_location(div, file$5, 59, 0, 1516);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, g);

    			for (let i = 0; i < 7; i += 1) {
    				each_blocks_2[i].m(g, null);
    			}

    			append_dev(g, each0_anchor);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(g, null);
    			}

    			append_dev(g, text_1);
    			append_dev(text_1, t);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*xScale, innerHeight*/ 1026) {
    				each_value_2 = [1990, 1995, 2000, 2005, 2010, 2015, 2020];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < 7; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_2(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(g, each0_anchor);
    					}
    				}

    				for (; i < 7; i += 1) {
    					each_blocks_2[i].d(1);
    				}
    			}

    			if (dirty & /*yScale, margin*/ 516) {
    				each_value_1 = /*yScale*/ ctx[2].ticks();
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(g, text_1);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*width, margin, yScale, data, countries, colour, opacity, handleMouseOver, handleMouseOut, linePath, colorScale, strokeScale*/ 7165) {
    				each_value = /*countries*/ ctx[5];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const height$2 = 500;
    const width$2 = 700;

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("RussianImportsChart", slots, []);
    	let { filter } = $$props;
    	let { highlight } = $$props;
    	const margin = { top: 20, right: 20, bottom: 20, left: 60 };
    	const innerHeight = height$2 - margin.top - margin.bottom;
    	const innerWidth = width$2 - margin.left - margin.right;
    	let colour = "black";
    	let opacity = "0.0";

    	function handleMouseOver(e) {
    		$$invalidate(3, colour = "black");
    		$$invalidate(4, opacity = "1.0");
    	}

    	function handleMouseOut(e) {
    		$$invalidate(3, colour = "white");
    		$$invalidate(4, opacity = "0.0");
    	}

    	const writable_props = ["filter", "highlight"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<RussianImportsChart> was created with unknown prop '${key}'`);
    	});

    	const func = (country, d) => d.Country === country;
    	const func_1 = (country, d) => d.Country === country && d.Year === 2020;

    	$$self.$$set = $$props => {
    		if ("filter" in $$props) $$invalidate(13, filter = $$props.filter);
    		if ("highlight" in $$props) $$invalidate(14, highlight = $$props.highlight);
    	};

    	$$self.$capture_state = () => ({
    		aq,
    		line,
    		curveBasis,
    		scaleLinear: linear$1,
    		scaleUtc: utcTime,
    		max,
    		extent,
    		RUdata,
    		filter,
    		highlight,
    		height: height$2,
    		width: width$2,
    		margin,
    		innerHeight,
    		innerWidth,
    		colour,
    		opacity,
    		handleMouseOver,
    		handleMouseOut,
    		data,
    		countries,
    		xScale,
    		yScale,
    		colorScale,
    		strokeScale,
    		linePath
    	});

    	$$self.$inject_state = $$props => {
    		if ("filter" in $$props) $$invalidate(13, filter = $$props.filter);
    		if ("highlight" in $$props) $$invalidate(14, highlight = $$props.highlight);
    		if ("colour" in $$props) $$invalidate(3, colour = $$props.colour);
    		if ("opacity" in $$props) $$invalidate(4, opacity = $$props.opacity);
    		if ("data" in $$props) $$invalidate(0, data = $$props.data);
    		if ("countries" in $$props) $$invalidate(5, countries = $$props.countries);
    		if ("xScale" in $$props) $$invalidate(1, xScale = $$props.xScale);
    		if ("yScale" in $$props) $$invalidate(2, yScale = $$props.yScale);
    		if ("colorScale" in $$props) $$invalidate(6, colorScale = $$props.colorScale);
    		if ("strokeScale" in $$props) $$invalidate(7, strokeScale = $$props.strokeScale);
    		if ("linePath" in $$props) $$invalidate(8, linePath = $$props.linePath);
    	};

    	let data;
    	let countries;
    	let xScale;
    	let yScale;
    	let colorScale;
    	let strokeScale;
    	let linePath;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*filter*/ 8192) {
    			 $$invalidate(0, data = RUdata.filter(d => d.Fossil_Fuel == filter));
    		}

    		if ($$self.$$.dirty & /*data*/ 1) {
    			 $$invalidate(5, countries = [...new Set(data.map(d => d.Country))]);
    		}

    		if ($$self.$$.dirty & /*data*/ 1) {
    			 $$invalidate(2, yScale = linear$1().domain([0, max(data.map(d => d.Percentage))]).range([height$2 - margin.bottom, margin.top]));
    		}

    		if ($$self.$$.dirty & /*highlight*/ 16384) {
    			 $$invalidate(6, colorScale = country => {
    				if (country == highlight) {
    					return "blue";
    				} else {
    					return "grey";
    				}
    			});
    		}

    		if ($$self.$$.dirty & /*highlight*/ 16384) {
    			 $$invalidate(7, strokeScale = country => {
    				if (country == highlight) {
    					return 2.5;
    				} else {
    					return 1.5;
    				}
    			});
    		}

    		if ($$self.$$.dirty & /*xScale, yScale*/ 6) {
    			 $$invalidate(8, linePath = (keyFF, keyEcon) => line().curve(curveBasis).x(d => xScale(d[keyFF])).y(d => yScale(d[keyEcon])));
    		}
    	};

    	 $$invalidate(1, xScale = linear$1().domain([1990, 2021]).range([margin.left, width$2 - margin.right]));

    	return [
    		data,
    		xScale,
    		yScale,
    		colour,
    		opacity,
    		countries,
    		colorScale,
    		strokeScale,
    		linePath,
    		margin,
    		innerHeight,
    		handleMouseOver,
    		handleMouseOut,
    		filter,
    		highlight,
    		func,
    		func_1
    	];
    }

    class RussianImportsChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$5, safe_not_equal, { filter: 13, highlight: 14 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "RussianImportsChart",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*filter*/ ctx[13] === undefined && !("filter" in props)) {
    			console.warn("<RussianImportsChart> was created without expected prop 'filter'");
    		}

    		if (/*highlight*/ ctx[14] === undefined && !("highlight" in props)) {
    			console.warn("<RussianImportsChart> was created without expected prop 'highlight'");
    		}
    	}

    	get filter() {
    		throw new Error("<RussianImportsChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filter(value) {
    		throw new Error("<RussianImportsChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get highlight() {
    		throw new Error("<RussianImportsChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set highlight(value) {
    		throw new Error("<RussianImportsChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/App.svelte generated by Svelte v3.31.0 */

    const { console: console_1$1 } = globals;
    const file$6 = "src/App.svelte";

    function create_fragment$6(ctx) {
    	let main;
    	let h1;
    	let t1;
    	let p;
    	let t2;
    	let br0;
    	let br1;
    	let t3;
    	let t4;
    	let h3;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let button0;
    	let t10;
    	let button1;
    	let t12;
    	let button2;
    	let t14;
    	let br2;
    	let t15;
    	let russianimportschart;
    	let t16;
    	let br3;
    	let t17;
    	let br4;
    	let t18;
    	let ffrenchart;
    	let t19;
    	let trendlineschart;
    	let current;
    	let mounted;
    	let dispose;

    	russianimportschart = new RussianImportsChart({
    			props: {
    				filter: /*importFilter*/ ctx[0],
    				highlight: "Germany"
    			},
    			$$inline: true
    		});

    	ffrenchart = new FFRenChart({ $$inline: true });
    	trendlineschart = new TrendLinesChart({ $$inline: true });

    	const block = {
    		c: function create() {
    			main = element("main");
    			h1 = element("h1");
    			h1.textContent = "Fossil Fuel Production";
    			t1 = space();
    			p = element("p");
    			t2 = text("During the last 120 years, countries started to produce more and more fossilfuels (gas, oil and coal). But, we can also see them changing the amount of production. Why is that? We explore the data about fossil fuel production in order to find out what impacts a country to produce more or less fossil fuels. We have three hypothesises: There might be political reasons (independence from other countries), social reasons or economic benefits. We leave the topic of sustainablity out as there is another team looking deeply at that.\n\t");
    			br0 = element("br");
    			br1 = element("br");
    			t3 = text("\n\tLet's start with the most recent topic: Fossil fuel production dominates public discourse in many countries at the moment, especially in Europe. The reason for that is the Russian invasion in Ukraine. The war has caused many countries to no longer want to rely on supplies from Russia. On the one hand, Russia does not seem to be a reliable economic partner anymore. On the other hand, politicians do not want to trade with Russia anymore for moral reasons.\n\tAs there are no up-to-date information about fossil fuel imports from Russia since the start of the invasion in February 2021, we have a look at the data from 1990 to 2021 - we would expect a decrease of Russian imports already after 2014 because in that year, Russia invaded the Ukrainian Crimea.");
    			t4 = space();
    			h3 = element("h3");
    			t5 = text("How much do countries rely on ");
    			t6 = text(/*importFilter*/ ctx[0]);
    			t7 = text(" imports from Russia?");
    			t8 = space();
    			button0 = element("button");
    			button0.textContent = "Gas";
    			t10 = space();
    			button1 = element("button");
    			button1.textContent = "Coal";
    			t12 = space();
    			button2 = element("button");
    			button2.textContent = "Oil";
    			t14 = space();
    			br2 = element("br");
    			t15 = space();
    			create_component(russianimportschart.$$.fragment);
    			t16 = space();
    			br3 = element("br");
    			t17 = text("\n\tThe chart shows which percentage of the countrie's consumption of each fossil fuel is imported from Russia. We don't see a clear pattern. But, a closer look at the chart reveals that countries which are close to Russia (e.g. Estonia and Lithuania) particularly depend on Russian imports. At first sight it might seem irritating that some countries import more than 100 percent of their consumption from Russia. That is because some import more than they consume, for example because they save it.");
    			br4 = element("br");
    			t18 = text("\n\tWe don't see a sharp decrease of fossil fuel imports from Russia after 2014 or in the following years. From that we conclude that political independence was not an important motivation to stop importing and to start producing more. However, this might change at the moment.\n\t");
    			create_component(ffrenchart.$$.fragment);
    			t19 = space();
    			create_component(trendlineschart.$$.fragment);
    			attr_dev(h1, "class", "svelte-1f2yf0w");
    			add_location(h1, file$6, 26, 1, 856);
    			add_location(br0, file$6, 31, 1, 1432);
    			add_location(br1, file$6, 31, 5, 1436);
    			add_location(p, file$6, 29, 1, 894);
    			add_location(h3, file$6, 35, 1, 2206);
    			add_location(button0, file$6, 36, 1, 2282);
    			add_location(button1, file$6, 37, 1, 2355);
    			add_location(button2, file$6, 38, 1, 2422);
    			add_location(br2, file$6, 39, 1, 2487);
    			add_location(br3, file$6, 41, 1, 2563);
    			add_location(br4, file$6, 42, 497, 3065);
    			attr_dev(main, "class", "svelte-1f2yf0w");
    			add_location(main, file$6, 24, 0, 846);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, h1);
    			append_dev(main, t1);
    			append_dev(main, p);
    			append_dev(p, t2);
    			append_dev(p, br0);
    			append_dev(p, br1);
    			append_dev(p, t3);
    			append_dev(main, t4);
    			append_dev(main, h3);
    			append_dev(h3, t5);
    			append_dev(h3, t6);
    			append_dev(h3, t7);
    			append_dev(main, t8);
    			append_dev(main, button0);
    			append_dev(main, t10);
    			append_dev(main, button1);
    			append_dev(main, t12);
    			append_dev(main, button2);
    			append_dev(main, t14);
    			append_dev(main, br2);
    			append_dev(main, t15);
    			mount_component(russianimportschart, main, null);
    			append_dev(main, t16);
    			append_dev(main, br3);
    			append_dev(main, t17);
    			append_dev(main, br4);
    			append_dev(main, t18);
    			mount_component(ffrenchart, main, null);
    			append_dev(main, t19);
    			mount_component(trendlineschart, main, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[2], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[3], false, false, false),
    					listen_dev(button2, "click", /*click_handler_2*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*importFilter*/ 1) set_data_dev(t6, /*importFilter*/ ctx[0]);
    			const russianimportschart_changes = {};
    			if (dirty & /*importFilter*/ 1) russianimportschart_changes.filter = /*importFilter*/ ctx[0];
    			russianimportschart.$set(russianimportschart_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(russianimportschart.$$.fragment, local);
    			transition_in(ffrenchart.$$.fragment, local);
    			transition_in(trendlineschart.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(russianimportschart.$$.fragment, local);
    			transition_out(ffrenchart.$$.fragment, local);
    			transition_out(trendlineschart.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(russianimportschart);
    			destroy_component(ffrenchart);
    			destroy_component(trendlineschart);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("App", slots, []);
    	let importFilter = "Natural Gas";

    	function changeImportFilter(choice) {
    		if (choice == "Natural Gas") {
    			$$invalidate(0, importFilter = "Natural Gas");
    		} else if (choice == "Coal") {
    			$$invalidate(0, importFilter = "Coal");
    			console.log("Coal");
    		} else if (choice == "Oil") {
    			$$invalidate(0, importFilter = "Oil");
    			console.log("Oil");
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => changeImportFilter("Natural Gas");
    	const click_handler_1 = () => changeImportFilter("Coal");
    	const click_handler_2 = () => changeImportFilter("Oil");

    	$$self.$capture_state = () => ({
    		onMount,
    		Line,
    		FfRenChart: FFRenChart,
    		TrendLinesChart,
    		RussianImportsChart,
    		importFilter,
    		changeImportFilter
    	});

    	$$self.$inject_state = $$props => {
    		if ("importFilter" in $$props) $$invalidate(0, importFilter = $$props.importFilter);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		importFilter,
    		changeImportFilter,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    // const url = 'URL to your JSON data';

    // fetch(url)
    //   .then((res) => res.json())
    //   .then((json) => {
    // 	const data = json;

    //     const app = new App({
    //       target: document.body,
    //       props: {
    // 		data: data
    // 		/*You can also pass each object in 'data' as an individual prop.
    // 		For example:
    // 			meta: data.meta,
    // 			menu: data.menu,
    // 			content: data.content
    			
    // 			OR

    // 			data:{...data}
    // 		*/
    //       }
    // 	});
    // });

    const app = new App({target: document.body});

    return app;

}());
//# sourceMappingURL=bundle.js.map
